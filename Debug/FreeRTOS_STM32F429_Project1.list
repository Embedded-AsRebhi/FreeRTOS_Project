
FreeRTOS_STM32F429_Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007428  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080075d8  080075d8  000085d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007774  08007774  00009078  2**0
                  CONTENTS
  4 .ARM          00000008  08007774  08007774  00008774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800777c  0800777c  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800777c  0800777c  0000877c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007780  08007780  00008780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08007784  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009078  2**0
                  CONTENTS
 10 .bss          00014594  20000078  20000078  00009078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001460c  2001460c  00009078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105ff  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a9a  00000000  00000000  000196a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  0001c148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b73  00000000  00000000  0001d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002730a  00000000  00000000  0001dbf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000119b2  00000000  00000000  00044efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1a00  00000000  00000000  000568af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001482af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004588  00000000  00000000  001482f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  0014c87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080075c0 	.word	0x080075c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080075c0 	.word	0x080075c0

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012eec 	.word	0x20012eec
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b96a 	b.w	800061c <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	460c      	mov	r4, r1
 8000368:	2b00      	cmp	r3, #0
 800036a:	d14e      	bne.n	800040a <__udivmoddi4+0xaa>
 800036c:	4694      	mov	ip, r2
 800036e:	458c      	cmp	ip, r1
 8000370:	4686      	mov	lr, r0
 8000372:	fab2 f282 	clz	r2, r2
 8000376:	d962      	bls.n	800043e <__udivmoddi4+0xde>
 8000378:	b14a      	cbz	r2, 800038e <__udivmoddi4+0x2e>
 800037a:	f1c2 0320 	rsb	r3, r2, #32
 800037e:	4091      	lsls	r1, r2
 8000380:	fa20 f303 	lsr.w	r3, r0, r3
 8000384:	fa0c fc02 	lsl.w	ip, ip, r2
 8000388:	4319      	orrs	r1, r3
 800038a:	fa00 fe02 	lsl.w	lr, r0, r2
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f f68c 	uxth.w	r6, ip
 8000396:	fbb1 f4f7 	udiv	r4, r1, r7
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb07 1114 	mls	r1, r7, r4, r1
 80003a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a6:	fb04 f106 	mul.w	r1, r4, r6
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003b6:	f080 8112 	bcs.w	80005de <__udivmoddi4+0x27e>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 810f 	bls.w	80005de <__udivmoddi4+0x27e>
 80003c0:	3c02      	subs	r4, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	fa1f f38e 	uxth.w	r3, lr
 80003ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ce:	fb07 1110 	mls	r1, r7, r0, r1
 80003d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d6:	fb00 f606 	mul.w	r6, r0, r6
 80003da:	429e      	cmp	r6, r3
 80003dc:	d90a      	bls.n	80003f4 <__udivmoddi4+0x94>
 80003de:	eb1c 0303 	adds.w	r3, ip, r3
 80003e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e6:	f080 80fc 	bcs.w	80005e2 <__udivmoddi4+0x282>
 80003ea:	429e      	cmp	r6, r3
 80003ec:	f240 80f9 	bls.w	80005e2 <__udivmoddi4+0x282>
 80003f0:	4463      	add	r3, ip
 80003f2:	3802      	subs	r0, #2
 80003f4:	1b9b      	subs	r3, r3, r6
 80003f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003fa:	2100      	movs	r1, #0
 80003fc:	b11d      	cbz	r5, 8000406 <__udivmoddi4+0xa6>
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	2200      	movs	r2, #0
 8000402:	e9c5 3200 	strd	r3, r2, [r5]
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d905      	bls.n	800041a <__udivmoddi4+0xba>
 800040e:	b10d      	cbz	r5, 8000414 <__udivmoddi4+0xb4>
 8000410:	e9c5 0100 	strd	r0, r1, [r5]
 8000414:	2100      	movs	r1, #0
 8000416:	4608      	mov	r0, r1
 8000418:	e7f5      	b.n	8000406 <__udivmoddi4+0xa6>
 800041a:	fab3 f183 	clz	r1, r3
 800041e:	2900      	cmp	r1, #0
 8000420:	d146      	bne.n	80004b0 <__udivmoddi4+0x150>
 8000422:	42a3      	cmp	r3, r4
 8000424:	d302      	bcc.n	800042c <__udivmoddi4+0xcc>
 8000426:	4290      	cmp	r0, r2
 8000428:	f0c0 80f0 	bcc.w	800060c <__udivmoddi4+0x2ac>
 800042c:	1a86      	subs	r6, r0, r2
 800042e:	eb64 0303 	sbc.w	r3, r4, r3
 8000432:	2001      	movs	r0, #1
 8000434:	2d00      	cmp	r5, #0
 8000436:	d0e6      	beq.n	8000406 <__udivmoddi4+0xa6>
 8000438:	e9c5 6300 	strd	r6, r3, [r5]
 800043c:	e7e3      	b.n	8000406 <__udivmoddi4+0xa6>
 800043e:	2a00      	cmp	r2, #0
 8000440:	f040 8090 	bne.w	8000564 <__udivmoddi4+0x204>
 8000444:	eba1 040c 	sub.w	r4, r1, ip
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	2101      	movs	r1, #1
 8000452:	fbb4 f6f8 	udiv	r6, r4, r8
 8000456:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800045a:	fb08 4416 	mls	r4, r8, r6, r4
 800045e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000462:	fb07 f006 	mul.w	r0, r7, r6
 8000466:	4298      	cmp	r0, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x11c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x11a>
 8000474:	4298      	cmp	r0, r3
 8000476:	f200 80cd 	bhi.w	8000614 <__udivmoddi4+0x2b4>
 800047a:	4626      	mov	r6, r4
 800047c:	1a1c      	subs	r4, r3, r0
 800047e:	fa1f f38e 	uxth.w	r3, lr
 8000482:	fbb4 f0f8 	udiv	r0, r4, r8
 8000486:	fb08 4410 	mls	r4, r8, r0, r4
 800048a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800048e:	fb00 f707 	mul.w	r7, r0, r7
 8000492:	429f      	cmp	r7, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x148>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 34ff 	add.w	r4, r0, #4294967295
 800049e:	d202      	bcs.n	80004a6 <__udivmoddi4+0x146>
 80004a0:	429f      	cmp	r7, r3
 80004a2:	f200 80b0 	bhi.w	8000606 <__udivmoddi4+0x2a6>
 80004a6:	4620      	mov	r0, r4
 80004a8:	1bdb      	subs	r3, r3, r7
 80004aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ae:	e7a5      	b.n	80003fc <__udivmoddi4+0x9c>
 80004b0:	f1c1 0620 	rsb	r6, r1, #32
 80004b4:	408b      	lsls	r3, r1
 80004b6:	fa22 f706 	lsr.w	r7, r2, r6
 80004ba:	431f      	orrs	r7, r3
 80004bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004c0:	fa04 f301 	lsl.w	r3, r4, r1
 80004c4:	ea43 030c 	orr.w	r3, r3, ip
 80004c8:	40f4      	lsrs	r4, r6
 80004ca:	fa00 f801 	lsl.w	r8, r0, r1
 80004ce:	0c38      	lsrs	r0, r7, #16
 80004d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004d4:	fbb4 fef0 	udiv	lr, r4, r0
 80004d8:	fa1f fc87 	uxth.w	ip, r7
 80004dc:	fb00 441e 	mls	r4, r0, lr, r4
 80004e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004e4:	fb0e f90c 	mul.w	r9, lr, ip
 80004e8:	45a1      	cmp	r9, r4
 80004ea:	fa02 f201 	lsl.w	r2, r2, r1
 80004ee:	d90a      	bls.n	8000506 <__udivmoddi4+0x1a6>
 80004f0:	193c      	adds	r4, r7, r4
 80004f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004f6:	f080 8084 	bcs.w	8000602 <__udivmoddi4+0x2a2>
 80004fa:	45a1      	cmp	r9, r4
 80004fc:	f240 8081 	bls.w	8000602 <__udivmoddi4+0x2a2>
 8000500:	f1ae 0e02 	sub.w	lr, lr, #2
 8000504:	443c      	add	r4, r7
 8000506:	eba4 0409 	sub.w	r4, r4, r9
 800050a:	fa1f f983 	uxth.w	r9, r3
 800050e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000512:	fb00 4413 	mls	r4, r0, r3, r4
 8000516:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800051a:	fb03 fc0c 	mul.w	ip, r3, ip
 800051e:	45a4      	cmp	ip, r4
 8000520:	d907      	bls.n	8000532 <__udivmoddi4+0x1d2>
 8000522:	193c      	adds	r4, r7, r4
 8000524:	f103 30ff 	add.w	r0, r3, #4294967295
 8000528:	d267      	bcs.n	80005fa <__udivmoddi4+0x29a>
 800052a:	45a4      	cmp	ip, r4
 800052c:	d965      	bls.n	80005fa <__udivmoddi4+0x29a>
 800052e:	3b02      	subs	r3, #2
 8000530:	443c      	add	r4, r7
 8000532:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000536:	fba0 9302 	umull	r9, r3, r0, r2
 800053a:	eba4 040c 	sub.w	r4, r4, ip
 800053e:	429c      	cmp	r4, r3
 8000540:	46ce      	mov	lr, r9
 8000542:	469c      	mov	ip, r3
 8000544:	d351      	bcc.n	80005ea <__udivmoddi4+0x28a>
 8000546:	d04e      	beq.n	80005e6 <__udivmoddi4+0x286>
 8000548:	b155      	cbz	r5, 8000560 <__udivmoddi4+0x200>
 800054a:	ebb8 030e 	subs.w	r3, r8, lr
 800054e:	eb64 040c 	sbc.w	r4, r4, ip
 8000552:	fa04 f606 	lsl.w	r6, r4, r6
 8000556:	40cb      	lsrs	r3, r1
 8000558:	431e      	orrs	r6, r3
 800055a:	40cc      	lsrs	r4, r1
 800055c:	e9c5 6400 	strd	r6, r4, [r5]
 8000560:	2100      	movs	r1, #0
 8000562:	e750      	b.n	8000406 <__udivmoddi4+0xa6>
 8000564:	f1c2 0320 	rsb	r3, r2, #32
 8000568:	fa20 f103 	lsr.w	r1, r0, r3
 800056c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000570:	fa24 f303 	lsr.w	r3, r4, r3
 8000574:	4094      	lsls	r4, r2
 8000576:	430c      	orrs	r4, r1
 8000578:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800057c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000580:	fa1f f78c 	uxth.w	r7, ip
 8000584:	fbb3 f0f8 	udiv	r0, r3, r8
 8000588:	fb08 3110 	mls	r1, r8, r0, r3
 800058c:	0c23      	lsrs	r3, r4, #16
 800058e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000592:	fb00 f107 	mul.w	r1, r0, r7
 8000596:	4299      	cmp	r1, r3
 8000598:	d908      	bls.n	80005ac <__udivmoddi4+0x24c>
 800059a:	eb1c 0303 	adds.w	r3, ip, r3
 800059e:	f100 36ff 	add.w	r6, r0, #4294967295
 80005a2:	d22c      	bcs.n	80005fe <__udivmoddi4+0x29e>
 80005a4:	4299      	cmp	r1, r3
 80005a6:	d92a      	bls.n	80005fe <__udivmoddi4+0x29e>
 80005a8:	3802      	subs	r0, #2
 80005aa:	4463      	add	r3, ip
 80005ac:	1a5b      	subs	r3, r3, r1
 80005ae:	b2a4      	uxth	r4, r4
 80005b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005b4:	fb08 3311 	mls	r3, r8, r1, r3
 80005b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005bc:	fb01 f307 	mul.w	r3, r1, r7
 80005c0:	42a3      	cmp	r3, r4
 80005c2:	d908      	bls.n	80005d6 <__udivmoddi4+0x276>
 80005c4:	eb1c 0404 	adds.w	r4, ip, r4
 80005c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005cc:	d213      	bcs.n	80005f6 <__udivmoddi4+0x296>
 80005ce:	42a3      	cmp	r3, r4
 80005d0:	d911      	bls.n	80005f6 <__udivmoddi4+0x296>
 80005d2:	3902      	subs	r1, #2
 80005d4:	4464      	add	r4, ip
 80005d6:	1ae4      	subs	r4, r4, r3
 80005d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005dc:	e739      	b.n	8000452 <__udivmoddi4+0xf2>
 80005de:	4604      	mov	r4, r0
 80005e0:	e6f0      	b.n	80003c4 <__udivmoddi4+0x64>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e706      	b.n	80003f4 <__udivmoddi4+0x94>
 80005e6:	45c8      	cmp	r8, r9
 80005e8:	d2ae      	bcs.n	8000548 <__udivmoddi4+0x1e8>
 80005ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80005f2:	3801      	subs	r0, #1
 80005f4:	e7a8      	b.n	8000548 <__udivmoddi4+0x1e8>
 80005f6:	4631      	mov	r1, r6
 80005f8:	e7ed      	b.n	80005d6 <__udivmoddi4+0x276>
 80005fa:	4603      	mov	r3, r0
 80005fc:	e799      	b.n	8000532 <__udivmoddi4+0x1d2>
 80005fe:	4630      	mov	r0, r6
 8000600:	e7d4      	b.n	80005ac <__udivmoddi4+0x24c>
 8000602:	46d6      	mov	lr, sl
 8000604:	e77f      	b.n	8000506 <__udivmoddi4+0x1a6>
 8000606:	4463      	add	r3, ip
 8000608:	3802      	subs	r0, #2
 800060a:	e74d      	b.n	80004a8 <__udivmoddi4+0x148>
 800060c:	4606      	mov	r6, r0
 800060e:	4623      	mov	r3, r4
 8000610:	4608      	mov	r0, r1
 8000612:	e70f      	b.n	8000434 <__udivmoddi4+0xd4>
 8000614:	3e02      	subs	r6, #2
 8000616:	4463      	add	r3, ip
 8000618:	e730      	b.n	800047c <__udivmoddi4+0x11c>
 800061a:	bf00      	nop

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 f9eb 	bl	8000a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f83d 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f8a5 	bl	800077c <MX_GPIO_Init>
  //Enable the CYCCLNT counter
  /* Ce code configure le registre DWT_CTRL pour activer le compteur de cycles du processeur. Plus précisément
   * (1 << 0) fait un shift à gauche de la valeur 1 sur le bit 0, ce qui
   *  est équivalent à l'activation du premier bit de DWT_CTRL*/

  DWT_CTRL |= ( 1<<0 ) ;
 8000632:	4b15      	ldr	r3, [pc, #84]	@ (8000688 <main+0x68>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a14      	ldr	r2, [pc, #80]	@ (8000688 <main+0x68>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6013      	str	r3, [r2, #0]
  // to initialise UART for real time recording
  SEGGER_UART_init(500000);
 800063e:	4813      	ldr	r0, [pc, #76]	@ (800068c <main+0x6c>)
 8000640:	f003 fcaa 	bl	8003f98 <SEGGER_UART_init>


  SEGGER_SYSVIEW_Conf();
 8000644:	f003 fad2 	bl	8003bec <SEGGER_SYSVIEW_Conf>

  //SEGGER_SYSVIEW_Start();
  //

  status = xTaskCreate(task1hanlder, "Task_1", 200, "Hello world from task1", 2, &task1_handle);
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2302      	movs	r3, #2
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <main+0x70>)
 8000654:	22c8      	movs	r2, #200	@ 0xc8
 8000656:	490f      	ldr	r1, [pc, #60]	@ (8000694 <main+0x74>)
 8000658:	480f      	ldr	r0, [pc, #60]	@ (8000698 <main+0x78>)
 800065a:	f001 fb0e 	bl	8001c7a <xTaskCreate>
 800065e:	60f8      	str	r0, [r7, #12]

  configASSERT(status = pdPASS); //status est une variable censée contenir le résultat d'une opération.
 8000660:	2301      	movs	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
  // pdPASS est une constante définie dans FreeRTOS qui indique une réussite (#define pdPASS (1)).

  status = xTaskCreate(task2hanlder, "Task_2", 200, "Hello world from task2", 2, &task2_handle);
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	2302      	movs	r3, #2
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <main+0x7c>)
 800066e:	22c8      	movs	r2, #200	@ 0xc8
 8000670:	490b      	ldr	r1, [pc, #44]	@ (80006a0 <main+0x80>)
 8000672:	480c      	ldr	r0, [pc, #48]	@ (80006a4 <main+0x84>)
 8000674:	f001 fb01 	bl	8001c7a <xTaskCreate>
 8000678:	60f8      	str	r0, [r7, #12]

  configASSERT(status = pdPASS);
 800067a:	2301      	movs	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]

  // start the freeRTOS scheduler

  vTaskStartScheduler();   // Démarre l'ordonnanceur , sans cette fonction les tasks jamais retourner
 800067e:	f001 fca3 	bl	8001fc8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000682:	bf00      	nop
 8000684:	e7fd      	b.n	8000682 <main+0x62>
 8000686:	bf00      	nop
 8000688:	e0001000 	.word	0xe0001000
 800068c:	0007a120 	.word	0x0007a120
 8000690:	080075d8 	.word	0x080075d8
 8000694:	080075f0 	.word	0x080075f0
 8000698:	080007b1 	.word	0x080007b1
 800069c:	080075f8 	.word	0x080075f8
 80006a0:	08007610 	.word	0x08007610
 80006a4:	080007e1 	.word	0x080007e1

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	@ 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2230      	movs	r2, #48	@ 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f006 f99c 	bl	80069f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	4a27      	ldr	r2, [pc, #156]	@ (8000774 <SystemClock_Config+0xcc>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	@ 0x40
 80006dc:	4b25      	ldr	r3, [pc, #148]	@ (8000774 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	4b22      	ldr	r3, [pc, #136]	@ (8000778 <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a21      	ldr	r2, [pc, #132]	@ (8000778 <SystemClock_Config+0xd0>)
 80006f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070c:	2310      	movs	r3, #16
 800070e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000710:	2302      	movs	r3, #2
 8000712:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000714:	2300      	movs	r3, #0
 8000716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000718:	2308      	movs	r3, #8
 800071a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800071c:	23a8      	movs	r3, #168	@ 0xa8
 800071e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f000 faab 	bl	8000c88 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000738:	f000 f870 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000748:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2105      	movs	r1, #5
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fd0c 	bl	8001178 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000766:	f000 f859 	bl	800081c <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	@ 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_GPIO_Init+0x30>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a08      	ldr	r2, [pc, #32]	@ (80007ac <MX_GPIO_Init+0x30>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_GPIO_Init+0x30>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <task1hanlder>:

/* USER CODE BEGIN 4 */

/* USER CODE BEGIN 4 */
static void task1hanlder(void* parameters)
	{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b09c      	sub	sp, #112	@ 0x70
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1)
	{
		printf("%s\n", (char*)parameters);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f005 fff7 	bl	80067ac <puts>
		//taskYIELD();

		//snprintf(msg, 100, "%s\n", (char*)parameters);
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4618      	mov	r0, r3
 80007c4:	f005 fe2a 	bl	800641c <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <task1hanlder+0x2c>)
 80007ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	f3bf 8f4f 	dsb	sy
 80007d4:	f3bf 8f6f 	isb	sy
	{
 80007d8:	bf00      	nop
 80007da:	e7ed      	b.n	80007b8 <task1hanlder+0x8>
 80007dc:	e000ed04 	.word	0xe000ed04

080007e0 <task2hanlder>:
	}

	}

static void task2hanlder(void* parameters)
	{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09c      	sub	sp, #112	@ 0x70
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

		// Arreter la tache aprés execution et passe a l'autre etape , on utlise si on a cooperative RTOS mais dans le cas de premptive deja le schudeler va intervenir
		//taskYIELD();

		// on va utiliser le print de segger qui fomatted le contenu avant de l'envoyer c pour cela on a fait un tableau de 100 pour mettre le contenu formatter
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80007e8:	f107 000c 	add.w	r0, r7, #12
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a09      	ldr	r2, [pc, #36]	@ (8000814 <task2hanlder+0x34>)
 80007f0:	2164      	movs	r1, #100	@ 0x64
 80007f2:	f005 ffe3 	bl	80067bc <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	4618      	mov	r0, r3
 80007fc:	f005 fe0e 	bl	800641c <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <task2hanlder+0x38>)
 8000802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	f3bf 8f4f 	dsb	sy
 800080c:	f3bf 8f6f 	isb	sy
		{
 8000810:	bf00      	nop
 8000812:	e7e9      	b.n	80007e8 <task2hanlder+0x8>
 8000814:	08007618 	.word	0x08007618
 8000818:	e000ed04 	.word	0xe000ed04

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <Error_Handler+0x8>

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000836:	4a0f      	ldr	r2, [pc, #60]	@ (8000874 <HAL_MspInit+0x4c>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800083c:	6453      	str	r3, [r2, #68]	@ 0x44
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000852:	4a08      	ldr	r2, [pc, #32]	@ (8000874 <HAL_MspInit+0x4c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000858:	6413      	str	r3, [r2, #64]	@ 0x40
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	e00a      	b.n	80008a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800088a:	f3af 8000 	nop.w
 800088e:	4601      	mov	r1, r0
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	60ba      	str	r2, [r7, #8]
 8000896:	b2ca      	uxtb	r2, r1
 8000898:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	3301      	adds	r3, #1
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	dbf0      	blt.n	800088a <_read+0x12>
  }

  return len;
 80008a8:	687b      	ldr	r3, [r7, #4]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008da:	605a      	str	r2, [r3, #4]
  return 0;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <_isatty>:

int _isatty(int file)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000924:	4a14      	ldr	r2, [pc, #80]	@ (8000978 <_sbrk+0x5c>)
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <_sbrk+0x60>)
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000930:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d102      	bne.n	800093e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <_sbrk+0x64>)
 800093a:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <_sbrk+0x68>)
 800093c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	429a      	cmp	r2, r3
 800094a:	d207      	bcs.n	800095c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800094c:	f006 f88e 	bl	8006a6c <__errno>
 8000950:	4603      	mov	r3, r0
 8000952:	220c      	movs	r2, #12
 8000954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	e009      	b.n	8000970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000962:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	4a05      	ldr	r2, [pc, #20]	@ (8000980 <_sbrk+0x64>)
 800096c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096e:	68fb      	ldr	r3, [r7, #12]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20030000 	.word	0x20030000
 800097c:	00000400 	.word	0x00000400
 8000980:	20000094 	.word	0x20000094
 8000984:	20014610 	.word	0x20014610

08000988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <SystemInit+0x20>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000992:	4a05      	ldr	r2, [pc, #20]	@ (80009a8 <SystemInit+0x20>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009b0:	f7ff ffea 	bl	8000988 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b4:	480c      	ldr	r0, [pc, #48]	@ (80009e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009b6:	490d      	ldr	r1, [pc, #52]	@ (80009ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009b8:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009cc:	4c0a      	ldr	r4, [pc, #40]	@ (80009f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009da:	f006 f84d 	bl	8006a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009de:	f7ff fe1f 	bl	8000620 <main>
  bx  lr    
 80009e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80009e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80009f0:	08007784 	.word	0x08007784
  ldr r2, =_sbss
 80009f4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80009f8:	2001460c 	.word	0x2001460c

080009fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC_IRQHandler>
	...

08000a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a04:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	@ (8000a40 <HAL_Init+0x40>)
 8000a0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0a      	ldr	r2, [pc, #40]	@ (8000a40 <HAL_Init+0x40>)
 8000a16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a07      	ldr	r2, [pc, #28]	@ (8000a40 <HAL_Init+0x40>)
 8000a22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f000 f8f9 	bl	8000c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f000 f808 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a34:	f7ff fef8 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023c00 	.word	0x40023c00

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <HAL_InitTick+0x54>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <HAL_InitTick+0x58>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f903 	bl	8000c6e <HAL_SYSTICK_Config>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00e      	b.n	8000a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b0f      	cmp	r3, #15
 8000a76:	d80a      	bhi.n	8000a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f000 f8d9 	bl	8000c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a84:	4a06      	ldr	r2, [pc, #24]	@ (8000aa0 <HAL_InitTick+0x5c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e000      	b.n	8000a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	@ (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000098 	.word	0x20000098

08000abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aee:	4a04      	ldr	r2, [pc, #16]	@ (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	60d3      	str	r3, [r2, #12]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b08:	4b04      	ldr	r3, [pc, #16]	@ (8000b1c <__NVIC_GetPriorityGrouping+0x18>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	f003 0307 	and.w	r3, r3, #7
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	@ (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	@ (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	@ 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	@ 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bec:	d301      	bcc.n	8000bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00f      	b.n	8000c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <SysTick_Config+0x40>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f7ff ff8e 	bl	8000b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c04:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <SysTick_Config+0x40>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <SysTick_Config+0x40>)
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff47 	bl	8000abc <__NVIC_SetPriorityGrouping>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c48:	f7ff ff5c 	bl	8000b04 <__NVIC_GetPriorityGrouping>
 8000c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	6978      	ldr	r0, [r7, #20]
 8000c54:	f7ff ff8e 	bl	8000b74 <NVIC_EncodePriority>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff5d 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffb0 	bl	8000bdc <SysTick_Config>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e267      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d075      	beq.n	8000d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000ca6:	4b88      	ldr	r3, [pc, #544]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f003 030c 	and.w	r3, r3, #12
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	d00c      	beq.n	8000ccc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cb2:	4b85      	ldr	r3, [pc, #532]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000cba:	2b08      	cmp	r3, #8
 8000cbc:	d112      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cbe:	4b82      	ldr	r3, [pc, #520]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000cca:	d10b      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ccc:	4b7e      	ldr	r3, [pc, #504]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d05b      	beq.n	8000d90 <HAL_RCC_OscConfig+0x108>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d157      	bne.n	8000d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e242      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cec:	d106      	bne.n	8000cfc <HAL_RCC_OscConfig+0x74>
 8000cee:	4b76      	ldr	r3, [pc, #472]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a75      	ldr	r2, [pc, #468]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	e01d      	b.n	8000d38 <HAL_RCC_OscConfig+0xb0>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d04:	d10c      	bne.n	8000d20 <HAL_RCC_OscConfig+0x98>
 8000d06:	4b70      	ldr	r3, [pc, #448]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a6f      	ldr	r2, [pc, #444]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4b6d      	ldr	r3, [pc, #436]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a6c      	ldr	r2, [pc, #432]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	e00b      	b.n	8000d38 <HAL_RCC_OscConfig+0xb0>
 8000d20:	4b69      	ldr	r3, [pc, #420]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a68      	ldr	r2, [pc, #416]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	4b66      	ldr	r3, [pc, #408]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a65      	ldr	r2, [pc, #404]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d013      	beq.n	8000d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d40:	f7ff feb0 	bl	8000aa4 <HAL_GetTick>
 8000d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d46:	e008      	b.n	8000d5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d48:	f7ff feac 	bl	8000aa4 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b64      	cmp	r3, #100	@ 0x64
 8000d54:	d901      	bls.n	8000d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e207      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5a:	4b5b      	ldr	r3, [pc, #364]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0f0      	beq.n	8000d48 <HAL_RCC_OscConfig+0xc0>
 8000d66:	e014      	b.n	8000d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d68:	f7ff fe9c 	bl	8000aa4 <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d70:	f7ff fe98 	bl	8000aa4 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b64      	cmp	r3, #100	@ 0x64
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e1f3      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d82:	4b51      	ldr	r3, [pc, #324]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1f0      	bne.n	8000d70 <HAL_RCC_OscConfig+0xe8>
 8000d8e:	e000      	b.n	8000d92 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d063      	beq.n	8000e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f003 030c 	and.w	r3, r3, #12
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00b      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000daa:	4b47      	ldr	r3, [pc, #284]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000db2:	2b08      	cmp	r3, #8
 8000db4:	d11c      	bne.n	8000df0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000db6:	4b44      	ldr	r3, [pc, #272]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d116      	bne.n	8000df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc2:	4b41      	ldr	r3, [pc, #260]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d005      	beq.n	8000dda <HAL_RCC_OscConfig+0x152>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d001      	beq.n	8000dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e1c7      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dda:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	4937      	ldr	r1, [pc, #220]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000dea:	4313      	orrs	r3, r2
 8000dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dee:	e03a      	b.n	8000e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d020      	beq.n	8000e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000df8:	4b34      	ldr	r3, [pc, #208]	@ (8000ecc <HAL_RCC_OscConfig+0x244>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dfe:	f7ff fe51 	bl	8000aa4 <HAL_GetTick>
 8000e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e04:	e008      	b.n	8000e18 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e06:	f7ff fe4d 	bl	8000aa4 <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e1a8      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e18:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0f0      	beq.n	8000e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e24:	4b28      	ldr	r3, [pc, #160]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	4925      	ldr	r1, [pc, #148]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000e34:	4313      	orrs	r3, r2
 8000e36:	600b      	str	r3, [r1, #0]
 8000e38:	e015      	b.n	8000e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e3a:	4b24      	ldr	r3, [pc, #144]	@ (8000ecc <HAL_RCC_OscConfig+0x244>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e40:	f7ff fe30 	bl	8000aa4 <HAL_GetTick>
 8000e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e46:	e008      	b.n	8000e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e48:	f7ff fe2c 	bl	8000aa4 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e187      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1f0      	bne.n	8000e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d036      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d016      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <HAL_RCC_OscConfig+0x248>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e80:	f7ff fe10 	bl	8000aa4 <HAL_GetTick>
 8000e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e88:	f7ff fe0c 	bl	8000aa4 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e167      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <HAL_RCC_OscConfig+0x240>)
 8000e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d0f0      	beq.n	8000e88 <HAL_RCC_OscConfig+0x200>
 8000ea6:	e01b      	b.n	8000ee0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ea8:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <HAL_RCC_OscConfig+0x248>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eae:	f7ff fdf9 	bl	8000aa4 <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb4:	e00e      	b.n	8000ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eb6:	f7ff fdf5 	bl	8000aa4 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d907      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e150      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	42470000 	.word	0x42470000
 8000ed0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed4:	4b88      	ldr	r3, [pc, #544]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8000ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1ea      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f000 8097 	beq.w	800101c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ef2:	4b81      	ldr	r3, [pc, #516]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10f      	bne.n	8000f1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	4b7d      	ldr	r3, [pc, #500]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	4a7c      	ldr	r2, [pc, #496]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0e:	4b7a      	ldr	r3, [pc, #488]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1e:	4b77      	ldr	r3, [pc, #476]	@ (80010fc <HAL_RCC_OscConfig+0x474>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d118      	bne.n	8000f5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f2a:	4b74      	ldr	r3, [pc, #464]	@ (80010fc <HAL_RCC_OscConfig+0x474>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a73      	ldr	r2, [pc, #460]	@ (80010fc <HAL_RCC_OscConfig+0x474>)
 8000f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f36:	f7ff fdb5 	bl	8000aa4 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f3e:	f7ff fdb1 	bl	8000aa4 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e10c      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f50:	4b6a      	ldr	r3, [pc, #424]	@ (80010fc <HAL_RCC_OscConfig+0x474>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0f0      	beq.n	8000f3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d106      	bne.n	8000f72 <HAL_RCC_OscConfig+0x2ea>
 8000f64:	4b64      	ldr	r3, [pc, #400]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8000f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f68:	4a63      	ldr	r2, [pc, #396]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f70:	e01c      	b.n	8000fac <HAL_RCC_OscConfig+0x324>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2b05      	cmp	r3, #5
 8000f78:	d10c      	bne.n	8000f94 <HAL_RCC_OscConfig+0x30c>
 8000f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8000f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f7e:	4a5e      	ldr	r2, [pc, #376]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f86:	4b5c      	ldr	r3, [pc, #368]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8000f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f8a:	4a5b      	ldr	r2, [pc, #364]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f92:	e00b      	b.n	8000fac <HAL_RCC_OscConfig+0x324>
 8000f94:	4b58      	ldr	r3, [pc, #352]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8000f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f98:	4a57      	ldr	r2, [pc, #348]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8000f9a:	f023 0301 	bic.w	r3, r3, #1
 8000f9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fa0:	4b55      	ldr	r3, [pc, #340]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8000fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fa4:	4a54      	ldr	r2, [pc, #336]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8000fa6:	f023 0304 	bic.w	r3, r3, #4
 8000faa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d015      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fb4:	f7ff fd76 	bl	8000aa4 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fba:	e00a      	b.n	8000fd2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fd72 	bl	8000aa4 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e0cb      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd2:	4b49      	ldr	r3, [pc, #292]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8000fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0ee      	beq.n	8000fbc <HAL_RCC_OscConfig+0x334>
 8000fde:	e014      	b.n	800100a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe0:	f7ff fd60 	bl	8000aa4 <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe6:	e00a      	b.n	8000ffe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fd5c 	bl	8000aa4 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e0b5      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8001000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1ee      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800100a:	7dfb      	ldrb	r3, [r7, #23]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d105      	bne.n	800101c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001010:	4b39      	ldr	r3, [pc, #228]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	4a38      	ldr	r2, [pc, #224]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8001016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800101a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 80a1 	beq.w	8001168 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001026:	4b34      	ldr	r3, [pc, #208]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	2b08      	cmp	r3, #8
 8001030:	d05c      	beq.n	80010ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d141      	bne.n	80010be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800103a:	4b31      	ldr	r3, [pc, #196]	@ (8001100 <HAL_RCC_OscConfig+0x478>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff fd30 	bl	8000aa4 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001048:	f7ff fd2c 	bl	8000aa4 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e087      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800105a:	4b27      	ldr	r3, [pc, #156]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f0      	bne.n	8001048 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69da      	ldr	r2, [r3, #28]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001074:	019b      	lsls	r3, r3, #6
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800107c:	085b      	lsrs	r3, r3, #1
 800107e:	3b01      	subs	r3, #1
 8001080:	041b      	lsls	r3, r3, #16
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001088:	061b      	lsls	r3, r3, #24
 800108a:	491b      	ldr	r1, [pc, #108]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 800108c:	4313      	orrs	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <HAL_RCC_OscConfig+0x478>)
 8001092:	2201      	movs	r2, #1
 8001094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001096:	f7ff fd05 	bl	8000aa4 <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800109e:	f7ff fd01 	bl	8000aa4 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e05c      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x416>
 80010bc:	e054      	b.n	8001168 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <HAL_RCC_OscConfig+0x478>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fcee 	bl	8000aa4 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010cc:	f7ff fcea 	bl	8000aa4 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e045      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <HAL_RCC_OscConfig+0x470>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f0      	bne.n	80010cc <HAL_RCC_OscConfig+0x444>
 80010ea:	e03d      	b.n	8001168 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d107      	bne.n	8001104 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e038      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40007000 	.word	0x40007000
 8001100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001104:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <HAL_RCC_OscConfig+0x4ec>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d028      	beq.n	8001164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800111c:	429a      	cmp	r2, r3
 800111e:	d121      	bne.n	8001164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800112a:	429a      	cmp	r2, r3
 800112c:	d11a      	bne.n	8001164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001134:	4013      	ands	r3, r2
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800113a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800113c:	4293      	cmp	r3, r2
 800113e:	d111      	bne.n	8001164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800114a:	085b      	lsrs	r3, r3, #1
 800114c:	3b01      	subs	r3, #1
 800114e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001150:	429a      	cmp	r2, r3
 8001152:	d107      	bne.n	8001164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800115e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001160:	429a      	cmp	r2, r3
 8001162:	d001      	beq.n	8001168 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800

08001178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e0cc      	b.n	8001326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800118c:	4b68      	ldr	r3, [pc, #416]	@ (8001330 <HAL_RCC_ClockConfig+0x1b8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 030f 	and.w	r3, r3, #15
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d90c      	bls.n	80011b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119a:	4b65      	ldr	r3, [pc, #404]	@ (8001330 <HAL_RCC_ClockConfig+0x1b8>)
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a2:	4b63      	ldr	r3, [pc, #396]	@ (8001330 <HAL_RCC_ClockConfig+0x1b8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e0b8      	b.n	8001326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d020      	beq.n	8001202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011cc:	4b59      	ldr	r3, [pc, #356]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	4a58      	ldr	r2, [pc, #352]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011e4:	4b53      	ldr	r3, [pc, #332]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4a52      	ldr	r2, [pc, #328]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f0:	4b50      	ldr	r3, [pc, #320]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	494d      	ldr	r1, [pc, #308]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d044      	beq.n	8001298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d107      	bne.n	8001226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	4b47      	ldr	r3, [pc, #284]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d119      	bne.n	8001256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e07f      	b.n	8001326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d003      	beq.n	8001236 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001232:	2b03      	cmp	r3, #3
 8001234:	d107      	bne.n	8001246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001236:	4b3f      	ldr	r3, [pc, #252]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d109      	bne.n	8001256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e06f      	b.n	8001326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001246:	4b3b      	ldr	r3, [pc, #236]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e067      	b.n	8001326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001256:	4b37      	ldr	r3, [pc, #220]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f023 0203 	bic.w	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	4934      	ldr	r1, [pc, #208]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	4313      	orrs	r3, r2
 8001266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001268:	f7ff fc1c 	bl	8000aa4 <HAL_GetTick>
 800126c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126e:	e00a      	b.n	8001286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001270:	f7ff fc18 	bl	8000aa4 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800127e:	4293      	cmp	r3, r2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e04f      	b.n	8001326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001286:	4b2b      	ldr	r3, [pc, #172]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 020c 	and.w	r2, r3, #12
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	429a      	cmp	r2, r3
 8001296:	d1eb      	bne.n	8001270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001298:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <HAL_RCC_ClockConfig+0x1b8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 030f 	and.w	r3, r3, #15
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d20c      	bcs.n	80012c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a6:	4b22      	ldr	r3, [pc, #136]	@ (8001330 <HAL_RCC_ClockConfig+0x1b8>)
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ae:	4b20      	ldr	r3, [pc, #128]	@ (8001330 <HAL_RCC_ClockConfig+0x1b8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d001      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e032      	b.n	8001326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012cc:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	4916      	ldr	r1, [pc, #88]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d009      	beq.n	80012fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012ea:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	490e      	ldr	r1, [pc, #56]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012fe:	f000 f821 	bl	8001344 <HAL_RCC_GetSysClockFreq>
 8001302:	4602      	mov	r2, r0
 8001304:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	490a      	ldr	r1, [pc, #40]	@ (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 8001310:	5ccb      	ldrb	r3, [r1, r3]
 8001312:	fa22 f303 	lsr.w	r3, r2, r3
 8001316:	4a09      	ldr	r2, [pc, #36]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_RCC_ClockConfig+0x1c8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fb90 	bl	8000a44 <HAL_InitTick>

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023c00 	.word	0x40023c00
 8001334:	40023800 	.word	0x40023800
 8001338:	080076f4 	.word	0x080076f4
 800133c:	20000000 	.word	0x20000000
 8001340:	20000004 	.word	0x20000004

08001344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001348:	b090      	sub	sp, #64	@ 0x40
 800134a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800135c:	4b59      	ldr	r3, [pc, #356]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	2b08      	cmp	r3, #8
 8001366:	d00d      	beq.n	8001384 <HAL_RCC_GetSysClockFreq+0x40>
 8001368:	2b08      	cmp	r3, #8
 800136a:	f200 80a1 	bhi.w	80014b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <HAL_RCC_GetSysClockFreq+0x34>
 8001372:	2b04      	cmp	r3, #4
 8001374:	d003      	beq.n	800137e <HAL_RCC_GetSysClockFreq+0x3a>
 8001376:	e09b      	b.n	80014b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001378:	4b53      	ldr	r3, [pc, #332]	@ (80014c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800137a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800137c:	e09b      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800137e:	4b53      	ldr	r3, [pc, #332]	@ (80014cc <HAL_RCC_GetSysClockFreq+0x188>)
 8001380:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001382:	e098      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001384:	4b4f      	ldr	r3, [pc, #316]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800138c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800138e:	4b4d      	ldr	r3, [pc, #308]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d028      	beq.n	80013ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800139a:	4b4a      	ldr	r3, [pc, #296]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	099b      	lsrs	r3, r3, #6
 80013a0:	2200      	movs	r2, #0
 80013a2:	623b      	str	r3, [r7, #32]
 80013a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80013ac:	2100      	movs	r1, #0
 80013ae:	4b47      	ldr	r3, [pc, #284]	@ (80014cc <HAL_RCC_GetSysClockFreq+0x188>)
 80013b0:	fb03 f201 	mul.w	r2, r3, r1
 80013b4:	2300      	movs	r3, #0
 80013b6:	fb00 f303 	mul.w	r3, r0, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	4a43      	ldr	r2, [pc, #268]	@ (80014cc <HAL_RCC_GetSysClockFreq+0x188>)
 80013be:	fba0 1202 	umull	r1, r2, r0, r2
 80013c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80013c4:	460a      	mov	r2, r1
 80013c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80013c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013ca:	4413      	add	r3, r2
 80013cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013d0:	2200      	movs	r2, #0
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	61fa      	str	r2, [r7, #28]
 80013d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80013de:	f7fe ffa7 	bl	8000330 <__aeabi_uldivmod>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4613      	mov	r3, r2
 80013e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013ea:	e053      	b.n	8001494 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ec:	4b35      	ldr	r3, [pc, #212]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	099b      	lsrs	r3, r3, #6
 80013f2:	2200      	movs	r2, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	617a      	str	r2, [r7, #20]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80013fe:	f04f 0b00 	mov.w	fp, #0
 8001402:	4652      	mov	r2, sl
 8001404:	465b      	mov	r3, fp
 8001406:	f04f 0000 	mov.w	r0, #0
 800140a:	f04f 0100 	mov.w	r1, #0
 800140e:	0159      	lsls	r1, r3, #5
 8001410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001414:	0150      	lsls	r0, r2, #5
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	ebb2 080a 	subs.w	r8, r2, sl
 800141e:	eb63 090b 	sbc.w	r9, r3, fp
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	f04f 0300 	mov.w	r3, #0
 800142a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800142e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001432:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001436:	ebb2 0408 	subs.w	r4, r2, r8
 800143a:	eb63 0509 	sbc.w	r5, r3, r9
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	00eb      	lsls	r3, r5, #3
 8001448:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800144c:	00e2      	lsls	r2, r4, #3
 800144e:	4614      	mov	r4, r2
 8001450:	461d      	mov	r5, r3
 8001452:	eb14 030a 	adds.w	r3, r4, sl
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	eb45 030b 	adc.w	r3, r5, fp
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9d7 4500 	ldrd	r4, r5, [r7]
 800146a:	4629      	mov	r1, r5
 800146c:	028b      	lsls	r3, r1, #10
 800146e:	4621      	mov	r1, r4
 8001470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001474:	4621      	mov	r1, r4
 8001476:	028a      	lsls	r2, r1, #10
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800147e:	2200      	movs	r2, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	60fa      	str	r2, [r7, #12]
 8001484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001488:	f7fe ff52 	bl	8000330 <__aeabi_uldivmod>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4613      	mov	r3, r2
 8001492:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001494:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	0c1b      	lsrs	r3, r3, #16
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	3301      	adds	r3, #1
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80014a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80014ae:	e002      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80014b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80014b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3740      	adds	r7, #64	@ 0x40
 80014bc:	46bd      	mov	sp, r7
 80014be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	00f42400 	.word	0x00f42400
 80014cc:	017d7840 	.word	0x017d7840

080014d0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f103 0208 	add.w	r2, r3, #8
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f103 0208 	add.w	r2, r3, #8
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f103 0208 	add.w	r2, r3, #8
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8001504:	f240 1019 	movw	r0, #281	@ 0x119
 8001508:	f004 fcbc 	bl	8005e84 <SEGGER_SYSVIEW_RecordEndCall>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8001522:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8001526:	f004 fcad 	bl	8005e84 <SEGGER_SYSVIEW_RecordEndCall>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001548:	d103      	bne.n	8001552 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e00c      	b.n	800156c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3308      	adds	r3, #8
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	e002      	b.n	8001560 <vListInsert+0x2e>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	429a      	cmp	r2, r3
 800156a:	d2f6      	bcs.n	800155a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8001598:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 800159c:	f004 fc72 	bl	8005e84 <SEGGER_SYSVIEW_RecordEndCall>
}
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6892      	ldr	r2, [r2, #8]
 80015be:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6852      	ldr	r2, [r2, #4]
 80015c8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d103      	bne.n	80015dc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	1e5a      	subs	r2, r3, #1
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f240 101d 	movw	r0, #285	@ 0x11d
 80015f6:	f004 fc81 	bl	8005efc <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001610:	2301      	movs	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10b      	bne.n	8001636 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800161e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001622:	f383 8811 	msr	BASEPRI, r3
 8001626:	f3bf 8f6f 	isb	sy
 800162a:	f3bf 8f4f 	dsb	sy
 800162e:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	e7fd      	b.n	8001632 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d052      	beq.n	80016e2 <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8001640:	2b00      	cmp	r3, #0
 8001642:	d04e      	beq.n	80016e2 <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800164c:	2100      	movs	r1, #0
 800164e:	fba3 2302 	umull	r2, r3, r3, r2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d000      	beq.n	8001658 <xQueueGenericReset+0x52>
 8001656:	2101      	movs	r1, #1
 8001658:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800165a:	2b00      	cmp	r3, #0
 800165c:	d141      	bne.n	80016e2 <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 800165e:	f001 ff09 	bl	8003474 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800166a:	6939      	ldr	r1, [r7, #16]
 800166c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800166e:	fb01 f303 	mul.w	r3, r1, r3
 8001672:	441a      	add	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	2200      	movs	r2, #0
 800167c:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800168e:	3b01      	subs	r3, #1
 8001690:	6939      	ldr	r1, [r7, #16]
 8001692:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	441a      	add	r2, r3
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	22ff      	movs	r2, #255	@ 0xff
 80016a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	22ff      	movs	r2, #255	@ 0xff
 80016aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d109      	bne.n	80016c8 <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00f      	beq.n	80016dc <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	3310      	adds	r3, #16
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 fff1 	bl	80026a8 <xTaskRemoveFromEventList>
 80016c6:	e009      	b.n	80016dc <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	3310      	adds	r3, #16
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff feff 	bl	80014d0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	3324      	adds	r3, #36	@ 0x24
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fefa 	bl	80014d0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80016dc:	f001 fefc 	bl	80034d8 <vPortExitCritical>
 80016e0:	e001      	b.n	80016e6 <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10b      	bne.n	8001704 <xQueueGenericReset+0xfe>
    __asm volatile
 80016ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016f0:	f383 8811 	msr	BASEPRI, r3
 80016f4:	f3bf 8f6f 	isb	sy
 80016f8:	f3bf 8f4f 	dsb	sy
 80016fc:	60bb      	str	r3, [r7, #8]
}
 80016fe:	bf00      	nop
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	4619      	mov	r1, r3
 8001708:	2096      	movs	r0, #150	@ 0x96
 800170a:	f004 fbf7 	bl	8005efc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800170e:	697b      	ldr	r3, [r7, #20]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	@ 0x28
 800171c:	af02      	add	r7, sp, #8
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	4613      	mov	r3, r2
 8001724:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d02e      	beq.n	800178e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001730:	2100      	movs	r1, #0
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	fba3 2302 	umull	r2, r3, r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d000      	beq.n	8001740 <xQueueGenericCreate+0x28>
 800173e:	2101      	movs	r1, #1
 8001740:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001742:	2b00      	cmp	r3, #0
 8001744:	d123      	bne.n	800178e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800174e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8001752:	d81c      	bhi.n	800178e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	fb02 f303 	mul.w	r3, r2, r3
 800175c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	3350      	adds	r3, #80	@ 0x50
 8001762:	4618      	mov	r0, r3
 8001764:	f001 ffb4 	bl	80036d0 <pvPortMalloc>
 8001768:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d01d      	beq.n	80017ac <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3350      	adds	r3, #80	@ 0x50
 8001778:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800177a:	79fa      	ldrb	r2, [r7, #7]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	4613      	mov	r3, r2
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 f81e 	bl	80017c8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800178c:	e00e      	b.n	80017ac <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10b      	bne.n	80017ac <xQueueGenericCreate+0x94>
    __asm volatile
 8001794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001798:	f383 8811 	msr	BASEPRI, r3
 800179c:	f3bf 8f6f 	isb	sy
 80017a0:	f3bf 8f4f 	dsb	sy
 80017a4:	613b      	str	r3, [r7, #16]
}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f004 fd3e 	bl	8006230 <SEGGER_SYSVIEW_ShrinkId>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4619      	mov	r1, r3
 80017b8:	2098      	movs	r0, #152	@ 0x98
 80017ba:	f004 fb9f 	bl	8005efc <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 80017be:	69fb      	ldr	r3, [r7, #28]
    }
 80017c0:	4618      	mov	r0, r3
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d103      	bne.n	80017e4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e002      	b.n	80017ea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80017f6:	2101      	movs	r1, #1
 80017f8:	69b8      	ldr	r0, [r7, #24]
 80017fa:	f7ff ff04 	bl	8001606 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	78fa      	ldrb	r2, [r7, #3]
 8001802:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	@ 0x30
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800181c:	2300      	movs	r3, #0
 800181e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10b      	bne.n	8001842 <xQueueReceive+0x32>
    __asm volatile
 800182a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800182e:	f383 8811 	msr	BASEPRI, r3
 8001832:	f3bf 8f6f 	isb	sy
 8001836:	f3bf 8f4f 	dsb	sy
 800183a:	623b      	str	r3, [r7, #32]
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	e7fd      	b.n	800183e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d103      	bne.n	8001850 <xQueueReceive+0x40>
 8001848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800184a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <xQueueReceive+0x44>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <xQueueReceive+0x46>
 8001854:	2300      	movs	r3, #0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10b      	bne.n	8001872 <xQueueReceive+0x62>
    __asm volatile
 800185a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800185e:	f383 8811 	msr	BASEPRI, r3
 8001862:	f3bf 8f6f 	isb	sy
 8001866:	f3bf 8f4f 	dsb	sy
 800186a:	61fb      	str	r3, [r7, #28]
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	e7fd      	b.n	800186e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001872:	f001 f935 	bl	8002ae0 <xTaskGetSchedulerState>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <xQueueReceive+0x72>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <xQueueReceive+0x76>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <xQueueReceive+0x78>
 8001886:	2300      	movs	r3, #0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10b      	bne.n	80018a4 <xQueueReceive+0x94>
    __asm volatile
 800188c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001890:	f383 8811 	msr	BASEPRI, r3
 8001894:	f3bf 8f6f 	isb	sy
 8001898:	f3bf 8f4f 	dsb	sy
 800189c:	61bb      	str	r3, [r7, #24]
}
 800189e:	bf00      	nop
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80018a4:	f001 fde6 	bl	8003474 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80018a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d018      	beq.n	80018e6 <xQueueReceive+0xd6>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018b8:	f000 f88e 	bl	80019d8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	1e5a      	subs	r2, r3, #1
 80018c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018c2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ce:	3310      	adds	r3, #16
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 fee9 	bl	80026a8 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80018d6:	f001 fdff 	bl	80034d8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80018da:	2101      	movs	r1, #1
 80018dc:	20a4      	movs	r0, #164	@ 0xa4
 80018de:	f004 fb0d 	bl	8005efc <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e071      	b.n	80019ca <xQueueReceive+0x1ba>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d107      	bne.n	80018fc <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80018ec:	f001 fdf4 	bl	80034d8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80018f0:	2100      	movs	r1, #0
 80018f2:	20a4      	movs	r0, #164	@ 0xa4
 80018f4:	f004 fb02 	bl	8005efc <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80018f8:	2300      	movs	r3, #0
 80018fa:	e066      	b.n	80019ca <xQueueReceive+0x1ba>
                }
                else if( xEntryTimeSet == pdFALSE )
 80018fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	4618      	mov	r0, r3
 8001908:	f000 ffae 	bl	8002868 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800190c:	2301      	movs	r3, #1
 800190e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001910:	f001 fde2 	bl	80034d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001914:	f000 fbb2 	bl	800207c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001918:	f001 fdac 	bl	8003474 <vPortEnterCritical>
 800191c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800191e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001922:	b25b      	sxtb	r3, r3
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d103      	bne.n	8001932 <xQueueReceive+0x122>
 800192a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001934:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001938:	b25b      	sxtb	r3, r3
 800193a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193e:	d103      	bne.n	8001948 <xQueueReceive+0x138>
 8001940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001948:	f001 fdc6 	bl	80034d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800194c:	1d3a      	adds	r2, r7, #4
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f000 ff9f 	bl	8002898 <xTaskCheckForTimeOut>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d123      	bne.n	80019a8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001960:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001962:	f000 f8b1 	bl	8001ac8 <prvIsQueueEmpty>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d017      	beq.n	800199c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800196c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800196e:	3324      	adds	r3, #36	@ 0x24
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f000 fe25 	bl	80025c4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800197a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800197c:	f000 f852 	bl	8001a24 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001980:	f000 fb8a 	bl	8002098 <xTaskResumeAll>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d18c      	bne.n	80018a4 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 800198a:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <xQueueReceive+0x1c4>)
 800198c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	f3bf 8f4f 	dsb	sy
 8001996:	f3bf 8f6f 	isb	sy
 800199a:	e783      	b.n	80018a4 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800199c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800199e:	f000 f841 	bl	8001a24 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80019a2:	f000 fb79 	bl	8002098 <xTaskResumeAll>
 80019a6:	e77d      	b.n	80018a4 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80019a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019aa:	f000 f83b 	bl	8001a24 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80019ae:	f000 fb73 	bl	8002098 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80019b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019b4:	f000 f888 	bl	8001ac8 <prvIsQueueEmpty>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f43f af72 	beq.w	80018a4 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80019c0:	2100      	movs	r1, #0
 80019c2:	20a4      	movs	r0, #164	@ 0xa4
 80019c4:	f004 fa9a 	bl	8005efc <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80019c8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3730      	adds	r7, #48	@ 0x30
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000ed04 	.word	0xe000ed04

080019d8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d018      	beq.n	8001a1c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	441a      	add	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d303      	bcc.n	8001a0c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68d9      	ldr	r1, [r3, #12]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	461a      	mov	r2, r3
 8001a16:	6838      	ldr	r0, [r7, #0]
 8001a18:	f005 f855 	bl	8006ac6 <memcpy>
    }
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001a2c:	f001 fd22 	bl	8003474 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001a36:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a38:	e011      	b.n	8001a5e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d012      	beq.n	8001a68 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3324      	adds	r3, #36	@ 0x24
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 fe2e 	bl	80026a8 <xTaskRemoveFromEventList>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001a52:	f000 ff8d 	bl	8002970 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	dce9      	bgt.n	8001a3a <prvUnlockQueue+0x16>
 8001a66:	e000      	b.n	8001a6a <prvUnlockQueue+0x46>
                    break;
 8001a68:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	22ff      	movs	r2, #255	@ 0xff
 8001a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8001a72:	f001 fd31 	bl	80034d8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001a76:	f001 fcfd 	bl	8003474 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001a80:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a82:	e011      	b.n	8001aa8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d012      	beq.n	8001ab2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3310      	adds	r3, #16
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fe09 	bl	80026a8 <xTaskRemoveFromEventList>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001a9c:	f000 ff68 	bl	8002970 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001aa0:	7bbb      	ldrb	r3, [r7, #14]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001aa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	dce9      	bgt.n	8001a84 <prvUnlockQueue+0x60>
 8001ab0:	e000      	b.n	8001ab4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001ab2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	22ff      	movs	r2, #255	@ 0xff
 8001ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8001abc:	f001 fd0c 	bl	80034d8 <vPortExitCritical>
}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001ad0:	f001 fcd0 	bl	8003474 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001adc:	2301      	movs	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e001      	b.n	8001ae6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001ae6:	f001 fcf7 	bl	80034d8 <vPortExitCritical>

    return xReturn;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10b      	bne.n	8001b20 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8001b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b0c:	f383 8811 	msr	BASEPRI, r3
 8001b10:	f3bf 8f6f 	isb	sy
 8001b14:	f3bf 8f4f 	dsb	sy
 8001b18:	60fb      	str	r3, [r7, #12]
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d024      	beq.n	8001b70 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e01e      	b.n	8001b6a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001b2c:	4a18      	ldr	r2, [pc, #96]	@ (8001b90 <vQueueAddToRegistry+0x9c>)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4413      	add	r3, r2
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d105      	bne.n	8001b48 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4a13      	ldr	r2, [pc, #76]	@ (8001b90 <vQueueAddToRegistry+0x9c>)
 8001b42:	4413      	add	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
                    break;
 8001b46:	e013      	b.n	8001b70 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10a      	bne.n	8001b64 <vQueueAddToRegistry+0x70>
 8001b4e:	4a10      	ldr	r2, [pc, #64]	@ (8001b90 <vQueueAddToRegistry+0x9c>)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d104      	bne.n	8001b64 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b90 <vQueueAddToRegistry+0x9c>)
 8001b60:	4413      	add	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b07      	cmp	r3, #7
 8001b6e:	d9dd      	bls.n	8001b2c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8001b82:	20b6      	movs	r0, #182	@ 0xb6
 8001b84:	f004 f97e 	bl	8005e84 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8001b88:	bf00      	nop
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2000009c 	.word	0x2000009c

08001b94 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001ba4:	f001 fc66 	bl	8003474 <vPortEnterCritical>
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d103      	bne.n	8001bbe <vQueueWaitForMessageRestricted+0x2a>
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bca:	d103      	bne.n	8001bd4 <vQueueWaitForMessageRestricted+0x40>
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001bd4:	f001 fc80 	bl	80034d8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d106      	bne.n	8001bee <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3324      	adds	r3, #36	@ 0x24
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	68b9      	ldr	r1, [r7, #8]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 fd13 	bl	8002614 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001bee:	6978      	ldr	r0, [r7, #20]
 8001bf0:	f7ff ff18 	bl	8001a24 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8001bf4:	20b9      	movs	r0, #185	@ 0xb9
 8001bf6:	f004 f945 	bl	8005e84 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b08a      	sub	sp, #40	@ 0x28
 8001c06:	af04      	add	r7, sp, #16
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f001 fd5b 	bl	80036d0 <pvPortMalloc>
 8001c1a:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d013      	beq.n	8001c4a <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001c22:	2058      	movs	r0, #88	@ 0x58
 8001c24:	f001 fd54 	bl	80036d0 <pvPortMalloc>
 8001c28:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001c30:	2258      	movs	r2, #88	@ 0x58
 8001c32:	2100      	movs	r1, #0
 8001c34:	6978      	ldr	r0, [r7, #20]
 8001c36:	f004 fedd 	bl	80069f4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c40:	e005      	b.n	8001c4e <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001c42:	6938      	ldr	r0, [r7, #16]
 8001c44:	f001 fe76 	bl	8003934 <vPortFree>
 8001c48:	e001      	b.n	8001c4e <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00d      	beq.n	8001c70 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c54:	2300      	movs	r3, #0
 8001c56:	9303      	str	r3, [sp, #12]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	9302      	str	r3, [sp, #8]
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f82d 	bl	8001cca <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8001c70:	697b      	ldr	r3, [r7, #20]
    }
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b088      	sub	sp, #32
 8001c7e:	af02      	add	r7, sp, #8
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7ff ffb3 	bl	8001c02 <prvCreateTask>
 8001c9c:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8001ca4:	6938      	ldr	r0, [r7, #16]
 8001ca6:	f000 f8a1 	bl	8001dec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001caa:	2301      	movs	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	e002      	b.n	8001cb6 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb4:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	20c2      	movs	r0, #194	@ 0xc2
 8001cbc:	f004 f91e 	bl	8005efc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8001cc0:	697b      	ldr	r3, [r7, #20]
    }
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b088      	sub	sp, #32
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8001cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cda:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	21a5      	movs	r1, #165	@ 0xa5
 8001ce4:	f004 fe86 	bl	80069f4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8001ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f023 0307 	bic.w	r3, r3, #7
 8001d00:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00b      	beq.n	8001d24 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8001d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d10:	f383 8811 	msr	BASEPRI, r3
 8001d14:	f3bf 8f6f 	isb	sy
 8001d18:	f3bf 8f4f 	dsb	sy
 8001d1c:	617b      	str	r3, [r7, #20]
}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d01e      	beq.n	8001d68 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	e012      	b.n	8001d56 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	4413      	add	r3, r2
 8001d36:	7819      	ldrb	r1, [r3, #0]
 8001d38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3334      	adds	r3, #52	@ 0x34
 8001d40:	460a      	mov	r2, r1
 8001d42:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	4413      	add	r3, r2
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	3301      	adds	r3, #1
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	2b09      	cmp	r3, #9
 8001d5a:	d9e9      	bls.n	8001d30 <prvInitialiseNewTask+0x66>
 8001d5c:	e000      	b.n	8001d60 <prvInitialiseNewTask+0x96>
            {
                break;
 8001d5e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8001d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d90b      	bls.n	8001d86 <prvInitialiseNewTask+0xbc>
    __asm volatile
 8001d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d72:	f383 8811 	msr	BASEPRI, r3
 8001d76:	f3bf 8f6f 	isb	sy
 8001d7a:	f3bf 8f4f 	dsb	sy
 8001d7e:	613b      	str	r3, [r7, #16]
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	e7fd      	b.n	8001d82 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d901      	bls.n	8001d90 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d94:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d9a:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d9e:	3304      	adds	r3, #4
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fbb7 	bl	8001514 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001da8:	3318      	adds	r3, #24
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fbb2 	bl	8001514 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001db4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8001db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db8:	f1c3 0205 	rsb	r2, r3, #5
 8001dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dbe:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dc4:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	68f9      	ldr	r1, [r7, #12]
 8001dca:	69b8      	ldr	r0, [r7, #24]
 8001dcc:	f001 f9d0 	bl	8003170 <pxPortInitialiseStack>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dd4:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8001dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001de0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001de2:	bf00      	nop
 8001de4:	3720      	adds	r7, #32
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8001dec:	b5b0      	push	{r4, r5, r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8001df4:	f001 fb3e 	bl	8003474 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8001df8:	4b48      	ldr	r3, [pc, #288]	@ (8001f1c <prvAddNewTaskToReadyList+0x130>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	4a47      	ldr	r2, [pc, #284]	@ (8001f1c <prvAddNewTaskToReadyList+0x130>)
 8001e00:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8001e02:	4b47      	ldr	r3, [pc, #284]	@ (8001f20 <prvAddNewTaskToReadyList+0x134>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8001e0a:	4a45      	ldr	r2, [pc, #276]	@ (8001f20 <prvAddNewTaskToReadyList+0x134>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e10:	4b42      	ldr	r3, [pc, #264]	@ (8001f1c <prvAddNewTaskToReadyList+0x130>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d110      	bne.n	8001e3a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8001e18:	f000 fdc8 	bl	80029ac <prvInitialiseTaskLists>
 8001e1c:	e00d      	b.n	8001e3a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8001e1e:	4b41      	ldr	r3, [pc, #260]	@ (8001f24 <prvAddNewTaskToReadyList+0x138>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e26:	4b3e      	ldr	r3, [pc, #248]	@ (8001f20 <prvAddNewTaskToReadyList+0x134>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d802      	bhi.n	8001e3a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8001e34:	4a3a      	ldr	r2, [pc, #232]	@ (8001f20 <prvAddNewTaskToReadyList+0x134>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f28 <prvAddNewTaskToReadyList+0x13c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	4a39      	ldr	r2, [pc, #228]	@ (8001f28 <prvAddNewTaskToReadyList+0x13c>)
 8001e42:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001e44:	4b38      	ldr	r3, [pc, #224]	@ (8001f28 <prvAddNewTaskToReadyList+0x13c>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d016      	beq.n	8001e80 <prvAddNewTaskToReadyList+0x94>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f004 f8c5 	bl	8005fe4 <SEGGER_SYSVIEW_OnTaskCreate>
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	461d      	mov	r5, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	461c      	mov	r4, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	1ae3      	subs	r3, r4, r3
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	462b      	mov	r3, r5
 8001e7c:	f001 ff58 	bl	8003d30 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f004 f932 	bl	80060ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	4b26      	ldr	r3, [pc, #152]	@ (8001f2c <prvAddNewTaskToReadyList+0x140>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	4a25      	ldr	r2, [pc, #148]	@ (8001f2c <prvAddNewTaskToReadyList+0x140>)
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e9e:	4924      	ldr	r1, [pc, #144]	@ (8001f30 <prvAddNewTaskToReadyList+0x144>)
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3304      	adds	r3, #4
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	3204      	adds	r2, #4
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	1d1a      	adds	r2, r3, #4
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4a14      	ldr	r2, [pc, #80]	@ (8001f30 <prvAddNewTaskToReadyList+0x144>)
 8001ede:	441a      	add	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	615a      	str	r2, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee8:	4911      	ldr	r1, [pc, #68]	@ (8001f30 <prvAddNewTaskToReadyList+0x144>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001efa:	1c59      	adds	r1, r3, #1
 8001efc:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <prvAddNewTaskToReadyList+0x144>)
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4403      	add	r3, r0
 8001f08:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8001f0a:	f001 fae5 	bl	80034d8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8001f0e:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <prvAddNewTaskToReadyList+0x138>)
 8001f10:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200001b4 	.word	0x200001b4
 8001f20:	200000dc 	.word	0x200000dc
 8001f24:	200001c0 	.word	0x200001c0
 8001f28:	200001d0 	.word	0x200001d0
 8001f2c:	200001bc 	.word	0x200001bc
 8001f30:	200000e0 	.word	0x200000e0

08001f34 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	@ 0x28
 8001f38:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e011      	b.n	8001f6c <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8001f48:	4a1c      	ldr	r2, [pc, #112]	@ (8001fbc <prvCreateIdleTasks+0x88>)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	7819      	ldrb	r1, [r3, #0]
 8001f50:	1d3a      	adds	r2, r7, #4
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	4413      	add	r3, r2
 8001f56:	460a      	mov	r2, r1
 8001f58:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8001f5a:	1d3a      	adds	r2, r7, #4
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	4413      	add	r3, r2
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b09      	cmp	r3, #9
 8001f70:	ddea      	ble.n	8001f48 <prvCreateIdleTasks+0x14>
 8001f72:	e000      	b.n	8001f76 <prvCreateIdleTasks+0x42>
        {
            break;
 8001f74:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	e015      	b.n	8001fa8 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8001f7c:	4b10      	ldr	r3, [pc, #64]	@ (8001fc0 <prvCreateIdleTasks+0x8c>)
 8001f7e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc4 <prvCreateIdleTasks+0x90>)
 8001f86:	4413      	add	r3, r2
 8001f88:	1d39      	adds	r1, r7, #4
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2300      	movs	r3, #0
 8001f92:	2282      	movs	r2, #130	@ 0x82
 8001f94:	6938      	ldr	r0, [r7, #16]
 8001f96:	f7ff fe70 	bl	8001c7a <xTaskCreate>
 8001f9a:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d006      	beq.n	8001fb0 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	dde6      	ble.n	8001f7c <prvCreateIdleTasks+0x48>
 8001fae:	e000      	b.n	8001fb2 <prvCreateIdleTasks+0x7e>
        {
            break;
 8001fb0:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3720      	adds	r7, #32
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	0800761c 	.word	0x0800761c
 8001fc0:	08002989 	.word	0x08002989
 8001fc4:	200001d8 	.word	0x200001d8

08001fc8 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001fce:	f7ff ffb1 	bl	8001f34 <prvCreateIdleTasks>
 8001fd2:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d102      	bne.n	8001fe0 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8001fda:	f000 fe31 	bl	8002c40 <xTimerCreateTimerTask>
 8001fde:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d124      	bne.n	8002030 <vTaskStartScheduler+0x68>
    __asm volatile
 8001fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fea:	f383 8811 	msr	BASEPRI, r3
 8001fee:	f3bf 8f6f 	isb	sy
 8001ff2:	f3bf 8f4f 	dsb	sy
 8001ff6:	60bb      	str	r3, [r7, #8]
}
 8001ff8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <vTaskStartScheduler+0x9c>)
 8001ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8002000:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002002:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <vTaskStartScheduler+0xa0>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002008:	4b18      	ldr	r3, [pc, #96]	@ (800206c <vTaskStartScheduler+0xa4>)
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800200e:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <vTaskStartScheduler+0xa8>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <vTaskStartScheduler+0xac>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d102      	bne.n	8002020 <vTaskStartScheduler+0x58>
 800201a:	f003 ffc7 	bl	8005fac <SEGGER_SYSVIEW_OnIdle>
 800201e:	e004      	b.n	800202a <vTaskStartScheduler+0x62>
 8002020:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <vTaskStartScheduler+0xac>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f004 f81f 	bl	8006068 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800202a:	f001 f933 	bl	8003294 <xPortStartScheduler>
 800202e:	e00f      	b.n	8002050 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002036:	d10b      	bne.n	8002050 <vTaskStartScheduler+0x88>
    __asm volatile
 8002038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800203c:	f383 8811 	msr	BASEPRI, r3
 8002040:	f3bf 8f6f 	isb	sy
 8002044:	f3bf 8f4f 	dsb	sy
 8002048:	607b      	str	r3, [r7, #4]
}
 800204a:	bf00      	nop
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002050:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <vTaskStartScheduler+0xb0>)
 8002052:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002054:	20cd      	movs	r0, #205	@ 0xcd
 8002056:	f003 ff15 	bl	8005e84 <SEGGER_SYSVIEW_RecordEndCall>
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200001d4 	.word	0x200001d4
 8002068:	200001c0 	.word	0x200001c0
 800206c:	200001b8 	.word	0x200001b8
 8002070:	200001d8 	.word	0x200001d8
 8002074:	200000dc 	.word	0x200000dc
 8002078:	2000000c 	.word	0x2000000c

0800207c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002080:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <vTaskSuspendAll+0x18>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	4a03      	ldr	r2, [pc, #12]	@ (8002094 <vTaskSuspendAll+0x18>)
 8002088:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 800208a:	20cf      	movs	r0, #207	@ 0xcf
 800208c:	f003 fefa 	bl	8005e84 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200001dc 	.word	0x200001dc

08002098 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80020a6:	f001 f9e5 	bl	8003474 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80020ae:	4b73      	ldr	r3, [pc, #460]	@ (800227c <xTaskResumeAll+0x1e4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10b      	bne.n	80020ce <xTaskResumeAll+0x36>
    __asm volatile
 80020b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020ba:	f383 8811 	msr	BASEPRI, r3
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f3bf 8f4f 	dsb	sy
 80020c6:	603b      	str	r3, [r7, #0]
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	e7fd      	b.n	80020ca <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80020ce:	4b6b      	ldr	r3, [pc, #428]	@ (800227c <xTaskResumeAll+0x1e4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	4a69      	ldr	r2, [pc, #420]	@ (800227c <xTaskResumeAll+0x1e4>)
 80020d6:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80020d8:	4b68      	ldr	r3, [pc, #416]	@ (800227c <xTaskResumeAll+0x1e4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f040 80c0 	bne.w	8002262 <xTaskResumeAll+0x1ca>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80020e2:	4b67      	ldr	r3, [pc, #412]	@ (8002280 <xTaskResumeAll+0x1e8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80bb 	beq.w	8002262 <xTaskResumeAll+0x1ca>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020ec:	e092      	b.n	8002214 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80020ee:	4b65      	ldr	r3, [pc, #404]	@ (8002284 <xTaskResumeAll+0x1ec>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	6a12      	ldr	r2, [r2, #32]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	69d2      	ldr	r2, [r2, #28]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	3318      	adds	r3, #24
 8002118:	429a      	cmp	r2, r3
 800211a:	d103      	bne.n	8002124 <xTaskResumeAll+0x8c>
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	6a1a      	ldr	r2, [r3, #32]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2200      	movs	r2, #0
 8002128:	629a      	str	r2, [r3, #40]	@ 0x28
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	1e5a      	subs	r2, r3, #1
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	68d2      	ldr	r2, [r2, #12]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	6892      	ldr	r2, [r2, #8]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3304      	adds	r3, #4
 8002156:	429a      	cmp	r2, r3
 8002158:	d103      	bne.n	8002162 <xTaskResumeAll+0xca>
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	2200      	movs	r2, #0
 8002166:	615a      	str	r2, [r3, #20]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1e5a      	subs	r2, r3, #1
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	4618      	mov	r0, r3
 8002176:	f003 ffb9 	bl	80060ec <SEGGER_SYSVIEW_OnTaskStartReady>
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217e:	2201      	movs	r2, #1
 8002180:	409a      	lsls	r2, r3
 8002182:	4b41      	ldr	r3, [pc, #260]	@ (8002288 <xTaskResumeAll+0x1f0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	4a3f      	ldr	r2, [pc, #252]	@ (8002288 <xTaskResumeAll+0x1f0>)
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002190:	493e      	ldr	r1, [pc, #248]	@ (800228c <xTaskResumeAll+0x1f4>)
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	3304      	adds	r3, #4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	60da      	str	r2, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	3204      	adds	r2, #4
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	1d1a      	adds	r2, r3, #4
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4a2f      	ldr	r2, [pc, #188]	@ (800228c <xTaskResumeAll+0x1f4>)
 80021d0:	441a      	add	r2, r3
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	615a      	str	r2, [r3, #20]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021da:	492c      	ldr	r1, [pc, #176]	@ (800228c <xTaskResumeAll+0x1f4>)
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021ec:	1c59      	adds	r1, r3, #1
 80021ee:	4827      	ldr	r0, [pc, #156]	@ (800228c <xTaskResumeAll+0x1f4>)
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4403      	add	r3, r0
 80021fa:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002200:	4b23      	ldr	r3, [pc, #140]	@ (8002290 <xTaskResumeAll+0x1f8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002206:	429a      	cmp	r2, r3
 8002208:	d904      	bls.n	8002214 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800220a:	4a22      	ldr	r2, [pc, #136]	@ (8002294 <xTaskResumeAll+0x1fc>)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	2101      	movs	r1, #1
 8002210:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <xTaskResumeAll+0x1ec>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	f47f af68 	bne.w	80020ee <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002224:	f000 fc40 	bl	8002aa8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002228:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <xTaskResumeAll+0x200>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	61bb      	str	r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d012      	beq.n	800225a <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002234:	f000 f85a 	bl	80022ec <xTaskIncrementTick>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800223e:	4a15      	ldr	r2, [pc, #84]	@ (8002294 <xTaskResumeAll+0x1fc>)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2101      	movs	r1, #1
 8002244:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	3b01      	subs	r3, #1
 800224c:	61bb      	str	r3, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1ef      	bne.n	8002234 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8002254:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <xTaskResumeAll+0x200>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800225a:	4a0e      	ldr	r2, [pc, #56]	@ (8002294 <xTaskResumeAll+0x1fc>)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002262:	f001 f939 	bl	80034d8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	4619      	mov	r1, r3
 800226a:	20d0      	movs	r0, #208	@ 0xd0
 800226c:	f003 fe46 	bl	8005efc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002270:	697b      	ldr	r3, [r7, #20]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200001dc 	.word	0x200001dc
 8002280:	200001b4 	.word	0x200001b4
 8002284:	20000174 	.word	0x20000174
 8002288:	200001bc 	.word	0x200001bc
 800228c:	200000e0 	.word	0x200000e0
 8002290:	200000dc 	.word	0x200000dc
 8002294:	200001c8 	.word	0x200001c8
 8002298:	200001c4 	.word	0x200001c4

0800229c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <xTaskGetTickCount+0x20>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	20d1      	movs	r0, #209	@ 0xd1
 80022ac:	f003 fe26 	bl	8005efc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 80022b0:	687b      	ldr	r3, [r7, #4]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200001b8 	.word	0x200001b8

080022c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80022c6:	f001 f9c1 	bl	800364c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80022ca:	2300      	movs	r3, #0
 80022cc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80022ce:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <xTaskGetTickCountFromISR+0x28>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80022d4:	6839      	ldr	r1, [r7, #0]
 80022d6:	20d2      	movs	r0, #210	@ 0xd2
 80022d8:	f003 fe10 	bl	8005efc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80022dc:	683b      	ldr	r3, [r7, #0]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200001b8 	.word	0x200001b8

080022ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	@ 0x28
 80022f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80022f6:	4b74      	ldr	r3, [pc, #464]	@ (80024c8 <xTaskIncrementTick+0x1dc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 80d4 	bne.w	80024a8 <xTaskIncrementTick+0x1bc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002300:	4b72      	ldr	r3, [pc, #456]	@ (80024cc <xTaskIncrementTick+0x1e0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002308:	4a70      	ldr	r2, [pc, #448]	@ (80024cc <xTaskIncrementTick+0x1e0>)
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d121      	bne.n	8002358 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002314:	4b6e      	ldr	r3, [pc, #440]	@ (80024d0 <xTaskIncrementTick+0x1e4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <xTaskIncrementTick+0x4a>
    __asm volatile
 800231e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002322:	f383 8811 	msr	BASEPRI, r3
 8002326:	f3bf 8f6f 	isb	sy
 800232a:	f3bf 8f4f 	dsb	sy
 800232e:	607b      	str	r3, [r7, #4]
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	e7fd      	b.n	8002332 <xTaskIncrementTick+0x46>
 8002336:	4b66      	ldr	r3, [pc, #408]	@ (80024d0 <xTaskIncrementTick+0x1e4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	61fb      	str	r3, [r7, #28]
 800233c:	4b65      	ldr	r3, [pc, #404]	@ (80024d4 <xTaskIncrementTick+0x1e8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a63      	ldr	r2, [pc, #396]	@ (80024d0 <xTaskIncrementTick+0x1e4>)
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4a63      	ldr	r2, [pc, #396]	@ (80024d4 <xTaskIncrementTick+0x1e8>)
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b63      	ldr	r3, [pc, #396]	@ (80024d8 <xTaskIncrementTick+0x1ec>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	3301      	adds	r3, #1
 8002350:	4a61      	ldr	r2, [pc, #388]	@ (80024d8 <xTaskIncrementTick+0x1ec>)
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	f000 fba8 	bl	8002aa8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002358:	4b60      	ldr	r3, [pc, #384]	@ (80024dc <xTaskIncrementTick+0x1f0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6a3a      	ldr	r2, [r7, #32]
 800235e:	429a      	cmp	r2, r3
 8002360:	f0c0 80a7 	bcc.w	80024b2 <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002364:	4b5a      	ldr	r3, [pc, #360]	@ (80024d0 <xTaskIncrementTick+0x1e4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d104      	bne.n	8002378 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800236e:	4b5b      	ldr	r3, [pc, #364]	@ (80024dc <xTaskIncrementTick+0x1f0>)
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	601a      	str	r2, [r3, #0]
                    break;
 8002376:	e09c      	b.n	80024b2 <xTaskIncrementTick+0x1c6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002378:	4b55      	ldr	r3, [pc, #340]	@ (80024d0 <xTaskIncrementTick+0x1e4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002388:	6a3a      	ldr	r2, [r7, #32]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	429a      	cmp	r2, r3
 800238e:	d203      	bcs.n	8002398 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002390:	4a52      	ldr	r2, [pc, #328]	@ (80024dc <xTaskIncrementTick+0x1f0>)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	6013      	str	r3, [r2, #0]
                        break;
 8002396:	e08c      	b.n	80024b2 <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	68d2      	ldr	r2, [r2, #12]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	6892      	ldr	r2, [r2, #8]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	3304      	adds	r3, #4
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d103      	bne.n	80023c6 <xTaskIncrementTick+0xda>
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2200      	movs	r2, #0
 80023ca:	615a      	str	r2, [r3, #20]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	1e5a      	subs	r2, r3, #1
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d01e      	beq.n	800241c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	6a12      	ldr	r2, [r2, #32]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	69d2      	ldr	r2, [r2, #28]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	3318      	adds	r3, #24
 8002400:	429a      	cmp	r2, r3
 8002402:	d103      	bne.n	800240c <xTaskIncrementTick+0x120>
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	6a1a      	ldr	r2, [r3, #32]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	2200      	movs	r2, #0
 8002410:	629a      	str	r2, [r3, #40]	@ 0x28
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1e5a      	subs	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	4618      	mov	r0, r3
 8002420:	f003 fe64 	bl	80060ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002428:	2201      	movs	r2, #1
 800242a:	409a      	lsls	r2, r3
 800242c:	4b2c      	ldr	r3, [pc, #176]	@ (80024e0 <xTaskIncrementTick+0x1f4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4313      	orrs	r3, r2
 8002432:	4a2b      	ldr	r2, [pc, #172]	@ (80024e0 <xTaskIncrementTick+0x1f4>)
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800243a:	492a      	ldr	r1, [pc, #168]	@ (80024e4 <xTaskIncrementTick+0x1f8>)
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	3304      	adds	r3, #4
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	3204      	adds	r2, #4
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	1d1a      	adds	r2, r3, #4
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4a1a      	ldr	r2, [pc, #104]	@ (80024e4 <xTaskIncrementTick+0x1f8>)
 800247a:	441a      	add	r2, r3
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	615a      	str	r2, [r3, #20]
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002484:	4917      	ldr	r1, [pc, #92]	@ (80024e4 <xTaskIncrementTick+0x1f8>)
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002496:	1c59      	adds	r1, r3, #1
 8002498:	4812      	ldr	r0, [pc, #72]	@ (80024e4 <xTaskIncrementTick+0x1f8>)
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4403      	add	r3, r0
 80024a4:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024a6:	e75d      	b.n	8002364 <xTaskIncrementTick+0x78>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80024a8:	4b0f      	ldr	r3, [pc, #60]	@ (80024e8 <xTaskIncrementTick+0x1fc>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3301      	adds	r3, #1
 80024ae:	4a0e      	ldr	r2, [pc, #56]	@ (80024e8 <xTaskIncrementTick+0x1fc>)
 80024b0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	4619      	mov	r1, r3
 80024b6:	20db      	movs	r0, #219	@ 0xdb
 80024b8:	f003 fd20 	bl	8005efc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3728      	adds	r7, #40	@ 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200001dc 	.word	0x200001dc
 80024cc:	200001b8 	.word	0x200001b8
 80024d0:	2000016c 	.word	0x2000016c
 80024d4:	20000170 	.word	0x20000170
 80024d8:	200001cc 	.word	0x200001cc
 80024dc:	200001d4 	.word	0x200001d4
 80024e0:	200001bc 	.word	0x200001bc
 80024e4:	200000e0 	.word	0x200000e0
 80024e8:	200001c4 	.word	0x200001c4

080024ec <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80024f2:	4b2e      	ldr	r3, [pc, #184]	@ (80025ac <vTaskSwitchContext+0xc0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80024fa:	4b2d      	ldr	r3, [pc, #180]	@ (80025b0 <vTaskSwitchContext+0xc4>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002500:	e04f      	b.n	80025a2 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8002502:	4b2b      	ldr	r3, [pc, #172]	@ (80025b0 <vTaskSwitchContext+0xc4>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002508:	4b2a      	ldr	r3, [pc, #168]	@ (80025b4 <vTaskSwitchContext+0xc8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002516:	7afb      	ldrb	r3, [r7, #11]
 8002518:	f1c3 031f 	rsb	r3, r3, #31
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	4926      	ldr	r1, [pc, #152]	@ (80025b8 <vTaskSwitchContext+0xcc>)
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10b      	bne.n	800254a <vTaskSwitchContext+0x5e>
    __asm volatile
 8002532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002536:	f383 8811 	msr	BASEPRI, r3
 800253a:	f3bf 8f6f 	isb	sy
 800253e:	f3bf 8f4f 	dsb	sy
 8002542:	607b      	str	r3, [r7, #4]
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	e7fd      	b.n	8002546 <vTaskSwitchContext+0x5a>
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4a18      	ldr	r2, [pc, #96]	@ (80025b8 <vTaskSwitchContext+0xcc>)
 8002556:	4413      	add	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	3308      	adds	r3, #8
 800256c:	429a      	cmp	r2, r3
 800256e:	d103      	bne.n	8002578 <vTaskSwitchContext+0x8c>
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	4a0f      	ldr	r2, [pc, #60]	@ (80025bc <vTaskSwitchContext+0xd0>)
 8002580:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8002582:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <vTaskSwitchContext+0xd4>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <vTaskSwitchContext+0xd0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d102      	bne.n	8002594 <vTaskSwitchContext+0xa8>
 800258e:	f003 fd0d 	bl	8005fac <SEGGER_SYSVIEW_OnIdle>
 8002592:	e004      	b.n	800259e <vTaskSwitchContext+0xb2>
 8002594:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <vTaskSwitchContext+0xd0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f003 fd65 	bl	8006068 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800259e:	4b07      	ldr	r3, [pc, #28]	@ (80025bc <vTaskSwitchContext+0xd0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
    }
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200001dc 	.word	0x200001dc
 80025b0:	200001c8 	.word	0x200001c8
 80025b4:	200001bc 	.word	0x200001bc
 80025b8:	200000e0 	.word	0x200000e0
 80025bc:	200000dc 	.word	0x200000dc
 80025c0:	200001d8 	.word	0x200001d8

080025c4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10b      	bne.n	80025ec <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80025d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	60fb      	str	r3, [r7, #12]
}
 80025e6:	bf00      	nop
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80025ec:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <vTaskPlaceOnEventList+0x4c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3318      	adds	r3, #24
 80025f2:	4619      	mov	r1, r3
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7fe ff9c 	bl	8001532 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80025fa:	2101      	movs	r1, #1
 80025fc:	6838      	ldr	r0, [r7, #0]
 80025fe:	f000 fa91 	bl	8002b24 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8002602:	20e1      	movs	r0, #225	@ 0xe1
 8002604:	f003 fc3e 	bl	8005e84 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	200000dc 	.word	0x200000dc

08002614 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10b      	bne.n	800263e <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8002626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	613b      	str	r3, [r7, #16]
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	e7fd      	b.n	800263a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	4b17      	ldr	r3, [pc, #92]	@ (80026a4 <vTaskPlaceOnEventListRestricted+0x90>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	61da      	str	r2, [r3, #28]
 800264c:	4b15      	ldr	r3, [pc, #84]	@ (80026a4 <vTaskPlaceOnEventListRestricted+0x90>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	6892      	ldr	r2, [r2, #8]
 8002654:	621a      	str	r2, [r3, #32]
 8002656:	4b13      	ldr	r3, [pc, #76]	@ (80026a4 <vTaskPlaceOnEventListRestricted+0x90>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	3218      	adds	r2, #24
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <vTaskPlaceOnEventListRestricted+0x90>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f103 0218 	add.w	r2, r3, #24
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	4b0d      	ldr	r3, [pc, #52]	@ (80026a4 <vTaskPlaceOnEventListRestricted+0x90>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	629a      	str	r2, [r3, #40]	@ 0x28
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8002686:	f04f 33ff 	mov.w	r3, #4294967295
 800268a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	68b8      	ldr	r0, [r7, #8]
 8002690:	f000 fa48 	bl	8002b24 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8002694:	20e3      	movs	r0, #227	@ 0xe3
 8002696:	f003 fbf5 	bl	8005e84 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800269a:	bf00      	nop
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	200000dc 	.word	0x200000dc

080026a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	@ 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10b      	bne.n	80026d6 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80026be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	60fb      	str	r3, [r7, #12]
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	e7fd      	b.n	80026d2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	6a3a      	ldr	r2, [r7, #32]
 80026e2:	6a12      	ldr	r2, [r2, #32]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	6a3a      	ldr	r2, [r7, #32]
 80026ec:	69d2      	ldr	r2, [r2, #28]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	3318      	adds	r3, #24
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d103      	bne.n	8002704 <xTaskRemoveFromEventList+0x5c>
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	6a1a      	ldr	r2, [r3, #32]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	2200      	movs	r2, #0
 8002708:	629a      	str	r2, [r3, #40]	@ 0x28
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	1e5a      	subs	r2, r3, #1
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002714:	4b4e      	ldr	r3, [pc, #312]	@ (8002850 <xTaskRemoveFromEventList+0x1a8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d164      	bne.n	80027e6 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	6a3a      	ldr	r2, [r7, #32]
 8002728:	68d2      	ldr	r2, [r2, #12]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	6a3a      	ldr	r2, [r7, #32]
 8002732:	6892      	ldr	r2, [r2, #8]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	3304      	adds	r3, #4
 800273e:	429a      	cmp	r2, r3
 8002740:	d103      	bne.n	800274a <xTaskRemoveFromEventList+0xa2>
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	2200      	movs	r2, #0
 800274e:	615a      	str	r2, [r3, #20]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	1e5a      	subs	r2, r3, #1
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	4618      	mov	r0, r3
 800275e:	f003 fcc5 	bl	80060ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002766:	2201      	movs	r2, #1
 8002768:	409a      	lsls	r2, r3
 800276a:	4b3a      	ldr	r3, [pc, #232]	@ (8002854 <xTaskRemoveFromEventList+0x1ac>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	4a38      	ldr	r2, [pc, #224]	@ (8002854 <xTaskRemoveFromEventList+0x1ac>)
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002778:	4937      	ldr	r1, [pc, #220]	@ (8002858 <xTaskRemoveFromEventList+0x1b0>)
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	3304      	adds	r3, #4
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	60da      	str	r2, [r3, #12]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	6a3a      	ldr	r2, [r7, #32]
 800279e:	3204      	adds	r2, #4
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	1d1a      	adds	r2, r3, #4
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4a28      	ldr	r2, [pc, #160]	@ (8002858 <xTaskRemoveFromEventList+0x1b0>)
 80027b8:	441a      	add	r2, r3
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	615a      	str	r2, [r3, #20]
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027c2:	4925      	ldr	r1, [pc, #148]	@ (8002858 <xTaskRemoveFromEventList+0x1b0>)
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6a3a      	ldr	r2, [r7, #32]
 80027d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80027d4:	1c59      	adds	r1, r3, #1
 80027d6:	4820      	ldr	r0, [pc, #128]	@ (8002858 <xTaskRemoveFromEventList+0x1b0>)
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4403      	add	r3, r0
 80027e2:	6019      	str	r1, [r3, #0]
 80027e4:	e01b      	b.n	800281e <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80027e6:	4b1d      	ldr	r3, [pc, #116]	@ (800285c <xTaskRemoveFromEventList+0x1b4>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	61da      	str	r2, [r3, #28]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	621a      	str	r2, [r3, #32]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	6a3a      	ldr	r2, [r7, #32]
 8002800:	3218      	adds	r2, #24
 8002802:	605a      	str	r2, [r3, #4]
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	f103 0218 	add.w	r2, r3, #24
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	4a12      	ldr	r2, [pc, #72]	@ (800285c <xTaskRemoveFromEventList+0x1b4>)
 8002812:	629a      	str	r2, [r3, #40]	@ 0x28
 8002814:	4b11      	ldr	r3, [pc, #68]	@ (800285c <xTaskRemoveFromEventList+0x1b4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	3301      	adds	r3, #1
 800281a:	4a10      	ldr	r2, [pc, #64]	@ (800285c <xTaskRemoveFromEventList+0x1b4>)
 800281c:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002822:	4b0f      	ldr	r3, [pc, #60]	@ (8002860 <xTaskRemoveFromEventList+0x1b8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002828:	429a      	cmp	r2, r3
 800282a:	d905      	bls.n	8002838 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800282c:	2301      	movs	r3, #1
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002830:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <xTaskRemoveFromEventList+0x1bc>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e001      	b.n	800283c <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	4619      	mov	r1, r3
 8002840:	20e4      	movs	r0, #228	@ 0xe4
 8002842:	f003 fb5b 	bl	8005efc <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002848:	4618      	mov	r0, r3
 800284a:	3728      	adds	r7, #40	@ 0x28
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	200001dc 	.word	0x200001dc
 8002854:	200001bc 	.word	0x200001bc
 8002858:	200000e0 	.word	0x200000e0
 800285c:	20000174 	.word	0x20000174
 8002860:	200000dc 	.word	0x200000dc
 8002864:	200001c8 	.word	0x200001c8

08002868 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002870:	4b07      	ldr	r3, [pc, #28]	@ (8002890 <vTaskInternalSetTimeOutState+0x28>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002878:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <vTaskInternalSetTimeOutState+0x2c>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8002880:	20e7      	movs	r0, #231	@ 0xe7
 8002882:	f003 faff 	bl	8005e84 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200001cc 	.word	0x200001cc
 8002894:	200001b8 	.word	0x200001b8

08002898 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10b      	bne.n	80028c0 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80028a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	613b      	str	r3, [r7, #16]
}
 80028ba:	bf00      	nop
 80028bc:	bf00      	nop
 80028be:	e7fd      	b.n	80028bc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10b      	bne.n	80028de <xTaskCheckForTimeOut+0x46>
    __asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	60fb      	str	r3, [r7, #12]
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	e7fd      	b.n	80028da <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80028de:	f000 fdc9 	bl	8003474 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80028e2:	4b21      	ldr	r3, [pc, #132]	@ (8002968 <xTaskCheckForTimeOut+0xd0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fa:	d102      	bne.n	8002902 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
 8002900:	e026      	b.n	8002950 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4b19      	ldr	r3, [pc, #100]	@ (800296c <xTaskCheckForTimeOut+0xd4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d00a      	beq.n	8002924 <xTaskCheckForTimeOut+0x8c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	429a      	cmp	r2, r3
 8002916:	d305      	bcc.n	8002924 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002918:	2301      	movs	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e015      	b.n	8002950 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	429a      	cmp	r2, r3
 800292c:	d20b      	bcs.n	8002946 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	1ad2      	subs	r2, r2, r3
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ff94 	bl	8002868 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	e004      	b.n	8002950 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800294c:	2301      	movs	r3, #1
 800294e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002950:	f000 fdc2 	bl	80034d8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	4619      	mov	r1, r3
 8002958:	20e8      	movs	r0, #232	@ 0xe8
 800295a:	f003 facf 	bl	8005efc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800295e:	69fb      	ldr	r3, [r7, #28]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3720      	adds	r7, #32
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	200001b8 	.word	0x200001b8
 800296c:	200001cc 	.word	0x200001cc

08002970 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8002974:	4b03      	ldr	r3, [pc, #12]	@ (8002984 <vTaskMissedYield+0x14>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800297a:	20e9      	movs	r0, #233	@ 0xe9
 800297c:	f003 fa82 	bl	8005e84 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}
 8002984:	200001c8 	.word	0x200001c8

08002988 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002990:	f000 f84c 	bl	8002a2c <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8002994:	4b04      	ldr	r3, [pc, #16]	@ (80029a8 <prvIdleTask+0x20>)
 8002996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80029a4:	bf00      	nop
 80029a6:	e7f3      	b.n	8002990 <prvIdleTask+0x8>
 80029a8:	e000ed04 	.word	0xe000ed04

080029ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029b2:	2300      	movs	r3, #0
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	e00c      	b.n	80029d2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4a12      	ldr	r2, [pc, #72]	@ (8002a0c <prvInitialiseTaskLists+0x60>)
 80029c4:	4413      	add	r3, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe fd82 	bl	80014d0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3301      	adds	r3, #1
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d9ef      	bls.n	80029b8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80029d8:	480d      	ldr	r0, [pc, #52]	@ (8002a10 <prvInitialiseTaskLists+0x64>)
 80029da:	f7fe fd79 	bl	80014d0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80029de:	480d      	ldr	r0, [pc, #52]	@ (8002a14 <prvInitialiseTaskLists+0x68>)
 80029e0:	f7fe fd76 	bl	80014d0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80029e4:	480c      	ldr	r0, [pc, #48]	@ (8002a18 <prvInitialiseTaskLists+0x6c>)
 80029e6:	f7fe fd73 	bl	80014d0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80029ea:	480c      	ldr	r0, [pc, #48]	@ (8002a1c <prvInitialiseTaskLists+0x70>)
 80029ec:	f7fe fd70 	bl	80014d0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80029f0:	480b      	ldr	r0, [pc, #44]	@ (8002a20 <prvInitialiseTaskLists+0x74>)
 80029f2:	f7fe fd6d 	bl	80014d0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80029f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <prvInitialiseTaskLists+0x78>)
 80029f8:	4a05      	ldr	r2, [pc, #20]	@ (8002a10 <prvInitialiseTaskLists+0x64>)
 80029fa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80029fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a28 <prvInitialiseTaskLists+0x7c>)
 80029fe:	4a05      	ldr	r2, [pc, #20]	@ (8002a14 <prvInitialiseTaskLists+0x68>)
 8002a00:	601a      	str	r2, [r3, #0]
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200000e0 	.word	0x200000e0
 8002a10:	20000144 	.word	0x20000144
 8002a14:	20000158 	.word	0x20000158
 8002a18:	20000174 	.word	0x20000174
 8002a1c:	20000188 	.word	0x20000188
 8002a20:	200001a0 	.word	0x200001a0
 8002a24:	2000016c 	.word	0x2000016c
 8002a28:	20000170 	.word	0x20000170

08002a2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a32:	e019      	b.n	8002a68 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002a34:	f000 fd1e 	bl	8003474 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002a38:	4b10      	ldr	r3, [pc, #64]	@ (8002a7c <prvCheckTasksWaitingTermination+0x50>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fdaf 	bl	80015a8 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <prvCheckTasksWaitingTermination+0x54>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	4a0b      	ldr	r2, [pc, #44]	@ (8002a80 <prvCheckTasksWaitingTermination+0x54>)
 8002a52:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002a54:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <prvCheckTasksWaitingTermination+0x58>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a84 <prvCheckTasksWaitingTermination+0x58>)
 8002a5c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002a5e:	f000 fd3b 	bl	80034d8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f810 	bl	8002a88 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <prvCheckTasksWaitingTermination+0x58>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1e1      	bne.n	8002a34 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000188 	.word	0x20000188
 8002a80:	200001b4 	.word	0x200001b4
 8002a84:	2000019c 	.word	0x2000019c

08002a88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 ff4d 	bl	8003934 <vPortFree>
            vPortFree( pxTCB );
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 ff4a 	bl	8003934 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002aac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <prvResetNextTaskUnblockTime+0x30>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d104      	bne.n	8002ac0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002ab6:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <prvResetNextTaskUnblockTime+0x34>)
 8002ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8002abc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002abe:	e005      	b.n	8002acc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <prvResetNextTaskUnblockTime+0x30>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a04      	ldr	r2, [pc, #16]	@ (8002adc <prvResetNextTaskUnblockTime+0x34>)
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	2000016c 	.word	0x2000016c
 8002adc:	200001d4 	.word	0x200001d4

08002ae0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <xTaskGetSchedulerState+0x3c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d102      	bne.n	8002af4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002aee:	2301      	movs	r3, #1
 8002af0:	607b      	str	r3, [r7, #4]
 8002af2:	e008      	b.n	8002b06 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002af4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <xTaskGetSchedulerState+0x40>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d102      	bne.n	8002b02 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8002afc:	2302      	movs	r3, #2
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	e001      	b.n	8002b06 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	20f5      	movs	r0, #245	@ 0xf5
 8002b0c:	f003 f9f6 	bl	8005efc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002b10:	687b      	ldr	r3, [r7, #4]
    }
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200001c0 	.word	0x200001c0
 8002b20:	200001dc 	.word	0x200001dc

08002b24 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c24 <prvAddCurrentTaskToDelayedList+0x100>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002b34:	4b3c      	ldr	r3, [pc, #240]	@ (8002c28 <prvAddCurrentTaskToDelayedList+0x104>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8002b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c2c <prvAddCurrentTaskToDelayedList+0x108>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b40:	4b3b      	ldr	r3, [pc, #236]	@ (8002c30 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3304      	adds	r3, #4
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fd2e 	bl	80015a8 <uxListRemove>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10b      	bne.n	8002b6a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002b52:	4b37      	ldr	r3, [pc, #220]	@ (8002c30 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b58:	2201      	movs	r2, #1
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	4b34      	ldr	r3, [pc, #208]	@ (8002c34 <prvAddCurrentTaskToDelayedList+0x110>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4013      	ands	r3, r2
 8002b66:	4a33      	ldr	r2, [pc, #204]	@ (8002c34 <prvAddCurrentTaskToDelayedList+0x110>)
 8002b68:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d124      	bne.n	8002bbc <prvAddCurrentTaskToDelayedList+0x98>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d021      	beq.n	8002bbc <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b78:	4b2f      	ldr	r3, [pc, #188]	@ (8002c38 <prvAddCurrentTaskToDelayedList+0x114>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8002c30 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	4b2a      	ldr	r3, [pc, #168]	@ (8002c30 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	6892      	ldr	r2, [r2, #8]
 8002b8e:	60da      	str	r2, [r3, #12]
 8002b90:	4b27      	ldr	r3, [pc, #156]	@ (8002c30 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	3204      	adds	r2, #4
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	4b24      	ldr	r3, [pc, #144]	@ (8002c30 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	1d1a      	adds	r2, r3, #4
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	4b22      	ldr	r3, [pc, #136]	@ (8002c30 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a23      	ldr	r2, [pc, #140]	@ (8002c38 <prvAddCurrentTaskToDelayedList+0x114>)
 8002bac:	615a      	str	r2, [r3, #20]
 8002bae:	4b22      	ldr	r3, [pc, #136]	@ (8002c38 <prvAddCurrentTaskToDelayedList+0x114>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	4a20      	ldr	r2, [pc, #128]	@ (8002c38 <prvAddCurrentTaskToDelayedList+0x114>)
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002bba:	e02e      	b.n	8002c1a <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c30 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d20d      	bcs.n	8002bf0 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002bd4:	4b16      	ldr	r3, [pc, #88]	@ (8002c30 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2104      	movs	r1, #4
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f003 fac8 	bl	8006170 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002be0:	4b13      	ldr	r3, [pc, #76]	@ (8002c30 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3304      	adds	r3, #4
 8002be6:	4619      	mov	r1, r3
 8002be8:	6978      	ldr	r0, [r7, #20]
 8002bea:	f7fe fca2 	bl	8001532 <vListInsert>
}
 8002bee:	e014      	b.n	8002c1a <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c30 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2104      	movs	r1, #4
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f003 faba 	bl	8006170 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3304      	adds	r3, #4
 8002c02:	4619      	mov	r1, r3
 8002c04:	69b8      	ldr	r0, [r7, #24]
 8002c06:	f7fe fc94 	bl	8001532 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <prvAddCurrentTaskToDelayedList+0x118>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d202      	bcs.n	8002c1a <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8002c14:	4a09      	ldr	r2, [pc, #36]	@ (8002c3c <prvAddCurrentTaskToDelayedList+0x118>)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6013      	str	r3, [r2, #0]
}
 8002c1a:	bf00      	nop
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200001b8 	.word	0x200001b8
 8002c28:	2000016c 	.word	0x2000016c
 8002c2c:	20000170 	.word	0x20000170
 8002c30:	200000dc 	.word	0x200000dc
 8002c34:	200001bc 	.word	0x200001bc
 8002c38:	200001a0 	.word	0x200001a0
 8002c3c:	200001d4 	.word	0x200001d4

08002c40 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002c4a:	f000 fa5b 	bl	8003104 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002c4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ca4 <xTimerCreateTimerTask+0x64>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002c56:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <xTimerCreateTimerTask+0x68>)
 8002c58:	9301      	str	r3, [sp, #4]
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c64:	4911      	ldr	r1, [pc, #68]	@ (8002cac <xTimerCreateTimerTask+0x6c>)
 8002c66:	4812      	ldr	r0, [pc, #72]	@ (8002cb0 <xTimerCreateTimerTask+0x70>)
 8002c68:	f7ff f807 	bl	8001c7a <xTaskCreate>
 8002c6c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10b      	bne.n	8002c8c <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8002c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	603b      	str	r3, [r7, #0]
}
 8002c86:	bf00      	nop
 8002c88:	bf00      	nop
 8002c8a:	e7fd      	b.n	8002c88 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8002c94:	f003 f932 	bl	8005efc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002c98:	687b      	ldr	r3, [r7, #4]
    }
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000210 	.word	0x20000210
 8002ca8:	20000214 	.word	0x20000214
 8002cac:	08007624 	.word	0x08007624
 8002cb0:	08002d59 	.word	0x08002d59

08002cb4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002cc0:	e008      	b.n	8002cd4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	4413      	add	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	699a      	ldr	r2, [r3, #24]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	18d1      	adds	r1, r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f8df 	bl	8002ea4 <prvInsertTimerInActiveList>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1ea      	bne.n	8002cc2 <prvReloadTimer+0xe>
        }
    }
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d02:	4b14      	ldr	r3, [pc, #80]	@ (8002d54 <prvProcessExpiredTimer+0x5c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fe fc49 	bl	80015a8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f7ff ffc3 	bl	8002cb4 <prvReloadTimer>
 8002d2e:	e008      	b.n	8002d42 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	4798      	blx	r3
    }
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000208 	.word	0x20000208

08002d58 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002d60:	f107 0308 	add.w	r3, r7, #8
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 f859 	bl	8002e1c <prvGetNextExpireTime>
 8002d6a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f805 	bl	8002d80 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002d76:	f000 f8d7 	bl	8002f28 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002d7a:	bf00      	nop
 8002d7c:	e7f0      	b.n	8002d60 <prvTimerTask+0x8>
	...

08002d80 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002d8a:	f7ff f977 	bl	800207c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002d8e:	f107 0308 	add.w	r3, r7, #8
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 f866 	bl	8002e64 <prvSampleTimeNow>
 8002d98:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d130      	bne.n	8002e02 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10a      	bne.n	8002dbc <prvProcessTimerOrBlockTask+0x3c>
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d806      	bhi.n	8002dbc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002dae:	f7ff f973 	bl	8002098 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002db2:	68f9      	ldr	r1, [r7, #12]
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff ff9f 	bl	8002cf8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002dba:	e024      	b.n	8002e06 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002dc2:	4b13      	ldr	r3, [pc, #76]	@ (8002e10 <prvProcessTimerOrBlockTask+0x90>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <prvProcessTimerOrBlockTask+0x50>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <prvProcessTimerOrBlockTask+0x52>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e14 <prvProcessTimerOrBlockTask+0x94>)
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	4619      	mov	r1, r3
 8002de2:	f7fe fed7 	bl	8001b94 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002de6:	f7ff f957 	bl	8002098 <xTaskResumeAll>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10a      	bne.n	8002e06 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8002df0:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <prvProcessTimerOrBlockTask+0x98>)
 8002df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	f3bf 8f6f 	isb	sy
    }
 8002e00:	e001      	b.n	8002e06 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002e02:	f7ff f949 	bl	8002098 <xTaskResumeAll>
    }
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	2000020c 	.word	0x2000020c
 8002e14:	20000210 	.word	0x20000210
 8002e18:	e000ed04 	.word	0xe000ed04

08002e1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002e24:	4b0e      	ldr	r3, [pc, #56]	@ (8002e60 <prvGetNextExpireTime+0x44>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <prvGetNextExpireTime+0x16>
 8002e2e:	2201      	movs	r2, #1
 8002e30:	e000      	b.n	8002e34 <prvGetNextExpireTime+0x18>
 8002e32:	2200      	movs	r2, #0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d105      	bne.n	8002e4c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e40:	4b07      	ldr	r3, [pc, #28]	@ (8002e60 <prvGetNextExpireTime+0x44>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	e001      	b.n	8002e50 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002e50:	68fb      	ldr	r3, [r7, #12]
    }
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000208 	.word	0x20000208

08002e64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8002e6c:	f7ff fa16 	bl	800229c <xTaskGetTickCount>
 8002e70:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002e72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <prvSampleTimeNow+0x3c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d205      	bcs.n	8002e88 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002e7c:	f000 f91c 	bl	80030b8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	e002      	b.n	8002e8e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002e8e:	4a04      	ldr	r2, [pc, #16]	@ (8002ea0 <prvSampleTimeNow+0x3c>)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002e94:	68fb      	ldr	r3, [r7, #12]
    }
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000218 	.word	0x20000218

08002ea4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d812      	bhi.n	8002ef0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	1ad2      	subs	r2, r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d302      	bcc.n	8002ede <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	e01b      	b.n	8002f16 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002ede:	4b10      	ldr	r3, [pc, #64]	@ (8002f20 <prvInsertTimerInActiveList+0x7c>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f7fe fb22 	bl	8001532 <vListInsert>
 8002eee:	e012      	b.n	8002f16 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d206      	bcs.n	8002f06 <prvInsertTimerInActiveList+0x62>
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d302      	bcc.n	8002f06 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002f00:	2301      	movs	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	e007      	b.n	8002f16 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002f06:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <prvInsertTimerInActiveList+0x80>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4610      	mov	r0, r2
 8002f12:	f7fe fb0e 	bl	8001532 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002f16:	697b      	ldr	r3, [r7, #20]
    }
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	2000020c 	.word	0x2000020c
 8002f24:	20000208 	.word	0x20000208

08002f28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8002f2e:	f107 0308 	add.w	r3, r7, #8
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002f3a:	e0a9      	b.n	8003090 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f2c0 80a6 	blt.w	8003090 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d004      	beq.n	8002f5a <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	3304      	adds	r3, #4
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe fb27 	bl	80015a8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff81 	bl	8002e64 <prvSampleTimeNow>
 8002f62:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	f200 808e 	bhi.w	800308a <prvProcessReceivedCommands+0x162>
 8002f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f74 <prvProcessReceivedCommands+0x4c>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08002f99 	.word	0x08002f99
 8002f78:	08002f99 	.word	0x08002f99
 8002f7c:	08003001 	.word	0x08003001
 8002f80:	08003015 	.word	0x08003015
 8002f84:	08003061 	.word	0x08003061
 8002f88:	08002f99 	.word	0x08002f99
 8002f8c:	08002f99 	.word	0x08002f99
 8002f90:	08003001 	.word	0x08003001
 8002f94:	08003015 	.word	0x08003015
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	18d1      	adds	r1, r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	69f8      	ldr	r0, [r7, #28]
 8002fb8:	f7ff ff74 	bl	8002ea4 <prvInsertTimerInActiveList>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d065      	beq.n	800308e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d009      	beq.n	8002fe4 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	69f8      	ldr	r0, [r7, #28]
 8002fde:	f7ff fe69 	bl	8002cb4 <prvReloadTimer>
 8002fe2:	e008      	b.n	8002ff6 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002fea:	f023 0301 	bic.w	r3, r3, #1
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	69f8      	ldr	r0, [r7, #28]
 8002ffc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002ffe:	e046      	b.n	800308e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	b2da      	uxtb	r2, r3
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003012:	e03d      	b.n	8003090 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	b2da      	uxtb	r2, r3
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10b      	bne.n	800304c <prvProcessReceivedCommands+0x124>
    __asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	617b      	str	r3, [r7, #20]
}
 8003046:	bf00      	nop
 8003048:	bf00      	nop
 800304a:	e7fd      	b.n	8003048 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	699a      	ldr	r2, [r3, #24]
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	18d1      	adds	r1, r2, r3
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	69f8      	ldr	r0, [r7, #28]
 800305a:	f7ff ff23 	bl	8002ea4 <prvInsertTimerInActiveList>
                        break;
 800305e:	e017      	b.n	8003090 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d103      	bne.n	8003076 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 800306e:	69f8      	ldr	r0, [r7, #28]
 8003070:	f000 fc60 	bl	8003934 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003074:	e00c      	b.n	8003090 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	b2da      	uxtb	r2, r3
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003088:	e002      	b.n	8003090 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 800308a:	bf00      	nop
 800308c:	e000      	b.n	8003090 <prvProcessReceivedCommands+0x168>
                        break;
 800308e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003090:	4b08      	ldr	r3, [pc, #32]	@ (80030b4 <prvProcessReceivedCommands+0x18c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f107 0108 	add.w	r1, r7, #8
 8003098:	2200      	movs	r2, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe fbb8 	bl	8001810 <xQueueReceive>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f47f af4a 	bne.w	8002f3c <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000210 	.word	0x20000210

080030b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80030be:	e009      	b.n	80030d4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030c0:	4b0e      	ldr	r3, [pc, #56]	@ (80030fc <prvSwitchTimerLists+0x44>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80030ca:	f04f 31ff 	mov.w	r1, #4294967295
 80030ce:	6838      	ldr	r0, [r7, #0]
 80030d0:	f7ff fe12 	bl	8002cf8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80030d4:	4b09      	ldr	r3, [pc, #36]	@ (80030fc <prvSwitchTimerLists+0x44>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80030de:	4b07      	ldr	r3, [pc, #28]	@ (80030fc <prvSwitchTimerLists+0x44>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80030e4:	4b06      	ldr	r3, [pc, #24]	@ (8003100 <prvSwitchTimerLists+0x48>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a04      	ldr	r2, [pc, #16]	@ (80030fc <prvSwitchTimerLists+0x44>)
 80030ea:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80030ec:	4a04      	ldr	r2, [pc, #16]	@ (8003100 <prvSwitchTimerLists+0x48>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6013      	str	r3, [r2, #0]
    }
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000208 	.word	0x20000208
 8003100:	2000020c 	.word	0x2000020c

08003104 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003108:	f000 f9b4 	bl	8003474 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800310c:	4b12      	ldr	r3, [pc, #72]	@ (8003158 <prvCheckForValidListAndQueue+0x54>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d11d      	bne.n	8003150 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003114:	4811      	ldr	r0, [pc, #68]	@ (800315c <prvCheckForValidListAndQueue+0x58>)
 8003116:	f7fe f9db 	bl	80014d0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800311a:	4811      	ldr	r0, [pc, #68]	@ (8003160 <prvCheckForValidListAndQueue+0x5c>)
 800311c:	f7fe f9d8 	bl	80014d0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003120:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <prvCheckForValidListAndQueue+0x60>)
 8003122:	4a0e      	ldr	r2, [pc, #56]	@ (800315c <prvCheckForValidListAndQueue+0x58>)
 8003124:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003126:	4b10      	ldr	r3, [pc, #64]	@ (8003168 <prvCheckForValidListAndQueue+0x64>)
 8003128:	4a0d      	ldr	r2, [pc, #52]	@ (8003160 <prvCheckForValidListAndQueue+0x5c>)
 800312a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 800312c:	2200      	movs	r2, #0
 800312e:	210c      	movs	r1, #12
 8003130:	200a      	movs	r0, #10
 8003132:	f7fe faf1 	bl	8001718 <xQueueGenericCreate>
 8003136:	4603      	mov	r3, r0
 8003138:	4a07      	ldr	r2, [pc, #28]	@ (8003158 <prvCheckForValidListAndQueue+0x54>)
 800313a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800313c:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <prvCheckForValidListAndQueue+0x54>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003144:	4b04      	ldr	r3, [pc, #16]	@ (8003158 <prvCheckForValidListAndQueue+0x54>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4908      	ldr	r1, [pc, #32]	@ (800316c <prvCheckForValidListAndQueue+0x68>)
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe fcd2 	bl	8001af4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003150:	f000 f9c2 	bl	80034d8 <vPortExitCritical>
    }
 8003154:	bf00      	nop
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000210 	.word	0x20000210
 800315c:	200001e0 	.word	0x200001e0
 8003160:	200001f4 	.word	0x200001f4
 8003164:	20000208 	.word	0x20000208
 8003168:	2000020c 	.word	0x2000020c
 800316c:	0800762c 	.word	0x0800762c

08003170 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3b04      	subs	r3, #4
 8003180:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003188:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	3b04      	subs	r3, #4
 800318e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f023 0201 	bic.w	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3b04      	subs	r3, #4
 800319e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80031a0:	4a0c      	ldr	r2, [pc, #48]	@ (80031d4 <pxPortInitialiseStack+0x64>)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3b14      	subs	r3, #20
 80031aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3b04      	subs	r3, #4
 80031b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f06f 0202 	mvn.w	r2, #2
 80031be:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3b20      	subs	r3, #32
 80031c4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80031c6:	68fb      	ldr	r3, [r7, #12]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	080031d9 	.word	0x080031d9

080031d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80031e2:	4b13      	ldr	r3, [pc, #76]	@ (8003230 <prvTaskExitError+0x58>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d00b      	beq.n	8003204 <prvTaskExitError+0x2c>
    __asm volatile
 80031ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	60fb      	str	r3, [r7, #12]
}
 80031fe:	bf00      	nop
 8003200:	bf00      	nop
 8003202:	e7fd      	b.n	8003200 <prvTaskExitError+0x28>
    __asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	60bb      	str	r3, [r7, #8]
}
 8003216:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003218:	bf00      	nop
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0fc      	beq.n	800321a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000010 	.word	0x20000010
	...

08003240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003240:	4b07      	ldr	r3, [pc, #28]	@ (8003260 <pxCurrentTCBConst2>)
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	6808      	ldr	r0, [r1, #0]
 8003246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800324a:	f380 8809 	msr	PSP, r0
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f04f 0000 	mov.w	r0, #0
 8003256:	f380 8811 	msr	BASEPRI, r0
 800325a:	4770      	bx	lr
 800325c:	f3af 8000 	nop.w

08003260 <pxCurrentTCBConst2>:
 8003260:	200000dc 	.word	0x200000dc
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop

08003268 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003268:	4808      	ldr	r0, [pc, #32]	@ (800328c <prvPortStartFirstTask+0x24>)
 800326a:	6800      	ldr	r0, [r0, #0]
 800326c:	6800      	ldr	r0, [r0, #0]
 800326e:	f380 8808 	msr	MSP, r0
 8003272:	f04f 0000 	mov.w	r0, #0
 8003276:	f380 8814 	msr	CONTROL, r0
 800327a:	b662      	cpsie	i
 800327c:	b661      	cpsie	f
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	df00      	svc	0
 8003288:	bf00      	nop
 800328a:	0000      	.short	0x0000
 800328c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop

08003294 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08c      	sub	sp, #48	@ 0x30
 8003298:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800329a:	4b69      	ldr	r3, [pc, #420]	@ (8003440 <xPortStartScheduler+0x1ac>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a69      	ldr	r2, [pc, #420]	@ (8003444 <xPortStartScheduler+0x1b0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d10b      	bne.n	80032bc <xPortStartScheduler+0x28>
    __asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032b6:	bf00      	nop
 80032b8:	bf00      	nop
 80032ba:	e7fd      	b.n	80032b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80032bc:	4b60      	ldr	r3, [pc, #384]	@ (8003440 <xPortStartScheduler+0x1ac>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a61      	ldr	r2, [pc, #388]	@ (8003448 <xPortStartScheduler+0x1b4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d10b      	bne.n	80032de <xPortStartScheduler+0x4a>
    __asm volatile
 80032c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	623b      	str	r3, [r7, #32]
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	e7fd      	b.n	80032da <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80032de:	4b5b      	ldr	r3, [pc, #364]	@ (800344c <xPortStartScheduler+0x1b8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80032e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e6:	332c      	adds	r3, #44	@ 0x2c
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a59      	ldr	r2, [pc, #356]	@ (8003450 <xPortStartScheduler+0x1bc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00b      	beq.n	8003308 <xPortStartScheduler+0x74>
    __asm volatile
 80032f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	61fb      	str	r3, [r7, #28]
}
 8003302:	bf00      	nop
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800330a:	3338      	adds	r3, #56	@ 0x38
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a51      	ldr	r2, [pc, #324]	@ (8003454 <xPortStartScheduler+0x1c0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00b      	beq.n	800332c <xPortStartScheduler+0x98>
    __asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	61bb      	str	r3, [r7, #24]
}
 8003326:	bf00      	nop
 8003328:	bf00      	nop
 800332a:	e7fd      	b.n	8003328 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003330:	4b49      	ldr	r3, [pc, #292]	@ (8003458 <xPortStartScheduler+0x1c4>)
 8003332:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800333c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333e:	22ff      	movs	r2, #255	@ 0xff
 8003340:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003352:	b2da      	uxtb	r2, r3
 8003354:	4b41      	ldr	r3, [pc, #260]	@ (800345c <xPortStartScheduler+0x1c8>)
 8003356:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003358:	4b40      	ldr	r3, [pc, #256]	@ (800345c <xPortStartScheduler+0x1c8>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10b      	bne.n	8003378 <xPortStartScheduler+0xe4>
    __asm volatile
 8003360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	617b      	str	r3, [r7, #20]
}
 8003372:	bf00      	nop
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003382:	2b00      	cmp	r3, #0
 8003384:	d013      	beq.n	80033ae <xPortStartScheduler+0x11a>
    __asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	613b      	str	r3, [r7, #16]
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	e7fd      	b.n	800339a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	3301      	adds	r3, #1
 80033a2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b6:	2b80      	cmp	r3, #128	@ 0x80
 80033b8:	d0f1      	beq.n	800339e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d103      	bne.n	80033c8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80033c0:	4b27      	ldr	r3, [pc, #156]	@ (8003460 <xPortStartScheduler+0x1cc>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e004      	b.n	80033d2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f1c3 0307 	rsb	r3, r3, #7
 80033ce:	4a24      	ldr	r2, [pc, #144]	@ (8003460 <xPortStartScheduler+0x1cc>)
 80033d0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033d2:	4b23      	ldr	r3, [pc, #140]	@ (8003460 <xPortStartScheduler+0x1cc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	4a21      	ldr	r2, [pc, #132]	@ (8003460 <xPortStartScheduler+0x1cc>)
 80033da:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033dc:	4b20      	ldr	r3, [pc, #128]	@ (8003460 <xPortStartScheduler+0x1cc>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003460 <xPortStartScheduler+0x1cc>)
 80033e6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ee:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80033f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003464 <xPortStartScheduler+0x1d0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003464 <xPortStartScheduler+0x1d0>)
 80033f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033fa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80033fc:	4b19      	ldr	r3, [pc, #100]	@ (8003464 <xPortStartScheduler+0x1d0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a18      	ldr	r2, [pc, #96]	@ (8003464 <xPortStartScheduler+0x1d0>)
 8003402:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003406:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003408:	4b17      	ldr	r3, [pc, #92]	@ (8003468 <xPortStartScheduler+0x1d4>)
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800340e:	f000 f8ed 	bl	80035ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003412:	4b16      	ldr	r3, [pc, #88]	@ (800346c <xPortStartScheduler+0x1d8>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003418:	f000 f90c 	bl	8003634 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800341c:	4b14      	ldr	r3, [pc, #80]	@ (8003470 <xPortStartScheduler+0x1dc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a13      	ldr	r2, [pc, #76]	@ (8003470 <xPortStartScheduler+0x1dc>)
 8003422:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003426:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003428:	f7ff ff1e 	bl	8003268 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800342c:	f7ff f85e 	bl	80024ec <vTaskSwitchContext>
    prvTaskExitError();
 8003430:	f7ff fed2 	bl	80031d8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3730      	adds	r7, #48	@ 0x30
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	e000ed00 	.word	0xe000ed00
 8003444:	410fc271 	.word	0x410fc271
 8003448:	410fc270 	.word	0x410fc270
 800344c:	e000ed08 	.word	0xe000ed08
 8003450:	08003241 	.word	0x08003241
 8003454:	08003531 	.word	0x08003531
 8003458:	e000e400 	.word	0xe000e400
 800345c:	2000021c 	.word	0x2000021c
 8003460:	20000220 	.word	0x20000220
 8003464:	e000ed20 	.word	0xe000ed20
 8003468:	e000ed1c 	.word	0xe000ed1c
 800346c:	20000010 	.word	0x20000010
 8003470:	e000ef34 	.word	0xe000ef34

08003474 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
    __asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	607b      	str	r3, [r7, #4]
}
 800348c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800348e:	4b10      	ldr	r3, [pc, #64]	@ (80034d0 <vPortEnterCritical+0x5c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	4a0e      	ldr	r2, [pc, #56]	@ (80034d0 <vPortEnterCritical+0x5c>)
 8003496:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003498:	4b0d      	ldr	r3, [pc, #52]	@ (80034d0 <vPortEnterCritical+0x5c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d110      	bne.n	80034c2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80034a0:	4b0c      	ldr	r3, [pc, #48]	@ (80034d4 <vPortEnterCritical+0x60>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <vPortEnterCritical+0x4e>
    __asm volatile
 80034aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	603b      	str	r3, [r7, #0]
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	e7fd      	b.n	80034be <vPortEnterCritical+0x4a>
    }
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000010 	.word	0x20000010
 80034d4:	e000ed04 	.word	0xe000ed04

080034d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80034de:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <vPortExitCritical+0x50>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10b      	bne.n	80034fe <vPortExitCritical+0x26>
    __asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	607b      	str	r3, [r7, #4]
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	e7fd      	b.n	80034fa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80034fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003528 <vPortExitCritical+0x50>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3b01      	subs	r3, #1
 8003504:	4a08      	ldr	r2, [pc, #32]	@ (8003528 <vPortExitCritical+0x50>)
 8003506:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003508:	4b07      	ldr	r3, [pc, #28]	@ (8003528 <vPortExitCritical+0x50>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d105      	bne.n	800351c <vPortExitCritical+0x44>
 8003510:	2300      	movs	r3, #0
 8003512:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800351a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	20000010 	.word	0x20000010
 800352c:	00000000 	.word	0x00000000

08003530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003530:	f3ef 8009 	mrs	r0, PSP
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	4b15      	ldr	r3, [pc, #84]	@ (8003590 <pxCurrentTCBConst>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	f01e 0f10 	tst.w	lr, #16
 8003540:	bf08      	it	eq
 8003542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800354a:	6010      	str	r0, [r2, #0]
 800354c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003550:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003554:	f380 8811 	msr	BASEPRI, r0
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f7fe ffc4 	bl	80024ec <vTaskSwitchContext>
 8003564:	f04f 0000 	mov.w	r0, #0
 8003568:	f380 8811 	msr	BASEPRI, r0
 800356c:	bc09      	pop	{r0, r3}
 800356e:	6819      	ldr	r1, [r3, #0]
 8003570:	6808      	ldr	r0, [r1, #0]
 8003572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003576:	f01e 0f10 	tst.w	lr, #16
 800357a:	bf08      	it	eq
 800357c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003580:	f380 8809 	msr	PSP, r0
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	f3af 8000 	nop.w

08003590 <pxCurrentTCBConst>:
 8003590:	200000dc 	.word	0x200000dc
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003594:	bf00      	nop
 8003596:	bf00      	nop

08003598 <SysTick_Handler>:

/*xPortSysTickHandler() met à jour le compteur de ticks.
Si nécessaire, il déclenche une interruption PendSV pour changer de tâche.*/

void xPortSysTickHandler( void )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
    __asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	607b      	str	r3, [r7, #4]
}
 80035b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80035b2:	f002 fbed 	bl	8005d90 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80035b6:	f7fe fe99 	bl	80022ec <xTaskIncrementTick>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d006      	beq.n	80035ce <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80035c0:	f002 fc44 	bl	8005e4c <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80035c4:	4b08      	ldr	r3, [pc, #32]	@ (80035e8 <SysTick_Handler+0x50>)
 80035c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	e001      	b.n	80035d2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80035ce:	f002 fc21 	bl	8005e14 <SEGGER_SYSVIEW_RecordExitISR>
 80035d2:	2300      	movs	r3, #0
 80035d4:	603b      	str	r3, [r7, #0]
    __asm volatile
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	f383 8811 	msr	BASEPRI, r3
}
 80035dc:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	e000ed04 	.word	0xe000ed04

080035ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80035f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <vPortSetupTimerInterrupt+0x34>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80035f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003624 <vPortSetupTimerInterrupt+0x38>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80035fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003628 <vPortSetupTimerInterrupt+0x3c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a0a      	ldr	r2, [pc, #40]	@ (800362c <vPortSetupTimerInterrupt+0x40>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	099b      	lsrs	r3, r3, #6
 8003608:	4a09      	ldr	r2, [pc, #36]	@ (8003630 <vPortSetupTimerInterrupt+0x44>)
 800360a:	3b01      	subs	r3, #1
 800360c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800360e:	4b04      	ldr	r3, [pc, #16]	@ (8003620 <vPortSetupTimerInterrupt+0x34>)
 8003610:	2207      	movs	r2, #7
 8003612:	601a      	str	r2, [r3, #0]
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	e000e010 	.word	0xe000e010
 8003624:	e000e018 	.word	0xe000e018
 8003628:	20000000 	.word	0x20000000
 800362c:	10624dd3 	.word	0x10624dd3
 8003630:	e000e014 	.word	0xe000e014

08003634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003634:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003644 <vPortEnableVFP+0x10>
 8003638:	6801      	ldr	r1, [r0, #0]
 800363a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800363e:	6001      	str	r1, [r0, #0]
 8003640:	4770      	bx	lr
 8003642:	0000      	.short	0x0000
 8003644:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop

0800364c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003652:	f3ef 8305 	mrs	r3, IPSR
 8003656:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b0f      	cmp	r3, #15
 800365c:	d915      	bls.n	800368a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800365e:	4a18      	ldr	r2, [pc, #96]	@ (80036c0 <vPortValidateInterruptPriority+0x74>)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4413      	add	r3, r2
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003668:	4b16      	ldr	r3, [pc, #88]	@ (80036c4 <vPortValidateInterruptPriority+0x78>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	7afa      	ldrb	r2, [r7, #11]
 800366e:	429a      	cmp	r2, r3
 8003670:	d20b      	bcs.n	800368a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	607b      	str	r3, [r7, #4]
}
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	e7fd      	b.n	8003686 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800368a:	4b0f      	ldr	r3, [pc, #60]	@ (80036c8 <vPortValidateInterruptPriority+0x7c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003692:	4b0e      	ldr	r3, [pc, #56]	@ (80036cc <vPortValidateInterruptPriority+0x80>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d90b      	bls.n	80036b2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	603b      	str	r3, [r7, #0]
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	e7fd      	b.n	80036ae <vPortValidateInterruptPriority+0x62>
    }
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	e000e3f0 	.word	0xe000e3f0
 80036c4:	2000021c 	.word	0x2000021c
 80036c8:	e000ed0c 	.word	0xe000ed0c
 80036cc:	20000220 	.word	0x20000220

080036d0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08e      	sub	sp, #56	@ 0x38
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d022      	beq.n	8003728 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80036e2:	2308      	movs	r3, #8
 80036e4:	43db      	mvns	r3, r3
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d81b      	bhi.n	8003724 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80036ec:	2208      	movs	r2, #8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4413      	add	r3, r2
 80036f2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d014      	beq.n	8003728 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	f1c3 0308 	rsb	r3, r3, #8
 8003708:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800370a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370c:	43db      	mvns	r3, r3
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	429a      	cmp	r2, r3
 8003712:	d804      	bhi.n	800371e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003718:	4413      	add	r3, r2
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	e004      	b.n	8003728 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	e001      	b.n	8003728 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003728:	f7fe fca8 	bl	800207c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800372c:	4b7a      	ldr	r3, [pc, #488]	@ (8003918 <pvPortMalloc+0x248>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8003734:	f000 f978 	bl	8003a28 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	f2c0 80d3 	blt.w	80038e6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80cf 	beq.w	80038e6 <pvPortMalloc+0x216>
 8003748:	4b74      	ldr	r3, [pc, #464]	@ (800391c <pvPortMalloc+0x24c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	429a      	cmp	r2, r3
 8003750:	f200 80c9 	bhi.w	80038e6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003754:	4b72      	ldr	r3, [pc, #456]	@ (8003920 <pvPortMalloc+0x250>)
 8003756:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003758:	4b71      	ldr	r3, [pc, #452]	@ (8003920 <pvPortMalloc+0x250>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800375e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003760:	4a70      	ldr	r2, [pc, #448]	@ (8003924 <pvPortMalloc+0x254>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d305      	bcc.n	8003772 <pvPortMalloc+0xa2>
 8003766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003768:	4a6f      	ldr	r2, [pc, #444]	@ (8003928 <pvPortMalloc+0x258>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d801      	bhi.n	8003772 <pvPortMalloc+0xa2>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <pvPortMalloc+0xa4>
 8003772:	2300      	movs	r3, #0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d129      	bne.n	80037cc <pvPortMalloc+0xfc>
    __asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	623b      	str	r3, [r7, #32]
}
 800378a:	bf00      	nop
 800378c:	bf00      	nop
 800378e:	e7fd      	b.n	800378c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003792:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800379a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379c:	4a61      	ldr	r2, [pc, #388]	@ (8003924 <pvPortMalloc+0x254>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d305      	bcc.n	80037ae <pvPortMalloc+0xde>
 80037a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a4:	4a60      	ldr	r2, [pc, #384]	@ (8003928 <pvPortMalloc+0x258>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d801      	bhi.n	80037ae <pvPortMalloc+0xde>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <pvPortMalloc+0xe0>
 80037ae:	2300      	movs	r3, #0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <pvPortMalloc+0xfc>
    __asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	61fb      	str	r3, [r7, #28]
}
 80037c6:	bf00      	nop
 80037c8:	bf00      	nop
 80037ca:	e7fd      	b.n	80037c8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80037cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d903      	bls.n	80037de <pvPortMalloc+0x10e>
 80037d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1d8      	bne.n	8003790 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80037de:	4b4e      	ldr	r3, [pc, #312]	@ (8003918 <pvPortMalloc+0x248>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d07e      	beq.n	80038e6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80037e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2208      	movs	r2, #8
 80037ee:	4413      	add	r3, r2
 80037f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80037f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003924 <pvPortMalloc+0x254>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d305      	bcc.n	8003806 <pvPortMalloc+0x136>
 80037fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fc:	4a4a      	ldr	r2, [pc, #296]	@ (8003928 <pvPortMalloc+0x258>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d801      	bhi.n	8003806 <pvPortMalloc+0x136>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <pvPortMalloc+0x138>
 8003806:	2300      	movs	r3, #0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <pvPortMalloc+0x154>
    __asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	61bb      	str	r3, [r7, #24]
}
 800381e:	bf00      	nop
 8003820:	bf00      	nop
 8003822:	e7fd      	b.n	8003820 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800382c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	429a      	cmp	r2, r3
 8003834:	d90b      	bls.n	800384e <pvPortMalloc+0x17e>
    __asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	617b      	str	r3, [r7, #20]
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	e7fd      	b.n	800384a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800384e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	1ad2      	subs	r2, r2, r3
 8003856:	2308      	movs	r3, #8
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	429a      	cmp	r2, r3
 800385c:	d924      	bls.n	80038a8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800385e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4413      	add	r3, r2
 8003864:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00b      	beq.n	8003888 <pvPortMalloc+0x1b8>
    __asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	613b      	str	r3, [r7, #16]
}
 8003882:	bf00      	nop
 8003884:	bf00      	nop
 8003886:	e7fd      	b.n	8003884 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	1ad2      	subs	r2, r2, r3
 8003890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003892:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800389a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80038a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038a8:	4b1c      	ldr	r3, [pc, #112]	@ (800391c <pvPortMalloc+0x24c>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	4a1a      	ldr	r2, [pc, #104]	@ (800391c <pvPortMalloc+0x24c>)
 80038b4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038b6:	4b19      	ldr	r3, [pc, #100]	@ (800391c <pvPortMalloc+0x24c>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4b1c      	ldr	r3, [pc, #112]	@ (800392c <pvPortMalloc+0x25c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d203      	bcs.n	80038ca <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038c2:	4b16      	ldr	r3, [pc, #88]	@ (800391c <pvPortMalloc+0x24c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a19      	ldr	r2, [pc, #100]	@ (800392c <pvPortMalloc+0x25c>)
 80038c8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80038ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80038d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80038d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80038dc:	4b14      	ldr	r3, [pc, #80]	@ (8003930 <pvPortMalloc+0x260>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3301      	adds	r3, #1
 80038e2:	4a13      	ldr	r2, [pc, #76]	@ (8003930 <pvPortMalloc+0x260>)
 80038e4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80038e6:	f7fe fbd7 	bl	8002098 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <pvPortMalloc+0x23c>
    __asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	60fb      	str	r3, [r7, #12]
}
 8003906:	bf00      	nop
 8003908:	bf00      	nop
 800390a:	e7fd      	b.n	8003908 <pvPortMalloc+0x238>
    return pvReturn;
 800390c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800390e:	4618      	mov	r0, r3
 8003910:	3738      	adds	r7, #56	@ 0x38
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20012e2c 	.word	0x20012e2c
 800391c:	20012e30 	.word	0x20012e30
 8003920:	20012e24 	.word	0x20012e24
 8003924:	20000224 	.word	0x20000224
 8003928:	20012e23 	.word	0x20012e23
 800392c:	20012e34 	.word	0x20012e34
 8003930:	20012e38 	.word	0x20012e38

08003934 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d064      	beq.n	8003a10 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003946:	2308      	movs	r3, #8
 8003948:	425b      	negs	r3, r3
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	4413      	add	r3, r2
 800394e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	4a30      	ldr	r2, [pc, #192]	@ (8003a18 <vPortFree+0xe4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d305      	bcc.n	8003968 <vPortFree+0x34>
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	4a2f      	ldr	r2, [pc, #188]	@ (8003a1c <vPortFree+0xe8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d801      	bhi.n	8003968 <vPortFree+0x34>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <vPortFree+0x36>
 8003968:	2300      	movs	r3, #0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10b      	bne.n	8003986 <vPortFree+0x52>
    __asm volatile
 800396e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	617b      	str	r3, [r7, #20]
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	e7fd      	b.n	8003982 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	db0b      	blt.n	80039a6 <vPortFree+0x72>
    __asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	613b      	str	r3, [r7, #16]
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	e7fd      	b.n	80039a2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <vPortFree+0x92>
    __asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	60fb      	str	r3, [r7, #12]
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	e7fd      	b.n	80039c2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	0fdb      	lsrs	r3, r3, #31
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01c      	beq.n	8003a10 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d118      	bne.n	8003a10 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80039ea:	f7fe fb47 	bl	800207c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003a20 <vPortFree+0xec>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4413      	add	r3, r2
 80039f8:	4a09      	ldr	r2, [pc, #36]	@ (8003a20 <vPortFree+0xec>)
 80039fa:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039fc:	69b8      	ldr	r0, [r7, #24]
 80039fe:	f000 f86d 	bl	8003adc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003a02:	4b08      	ldr	r3, [pc, #32]	@ (8003a24 <vPortFree+0xf0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3301      	adds	r3, #1
 8003a08:	4a06      	ldr	r2, [pc, #24]	@ (8003a24 <vPortFree+0xf0>)
 8003a0a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003a0c:	f7fe fb44 	bl	8002098 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003a10:	bf00      	nop
 8003a12:	3720      	adds	r7, #32
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000224 	.word	0x20000224
 8003a1c:	20012e23 	.word	0x20012e23
 8003a20:	20012e30 	.word	0x20012e30
 8003a24:	20012e3c 	.word	0x20012e3c

08003a28 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a2e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003a32:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003a34:	4b24      	ldr	r3, [pc, #144]	@ (8003ac8 <prvHeapInit+0xa0>)
 8003a36:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00c      	beq.n	8003a5c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	3307      	adds	r3, #7
 8003a46:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0307 	bic.w	r3, r3, #7
 8003a4e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac8 <prvHeapInit+0xa0>)
 8003a58:	4413      	add	r3, r2
 8003a5a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003acc <prvHeapInit+0xa4>)
 8003a60:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a62:	4b1a      	ldr	r3, [pc, #104]	@ (8003acc <prvHeapInit+0xa4>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003a70:	2208      	movs	r2, #8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f023 0307 	bic.w	r3, r3, #7
 8003a7e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a13      	ldr	r2, [pc, #76]	@ (8003ad0 <prvHeapInit+0xa8>)
 8003a84:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003a86:	4b12      	ldr	r3, [pc, #72]	@ (8003ad0 <prvHeapInit+0xa8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8003a8e:	4b10      	ldr	r3, [pc, #64]	@ (8003ad0 <prvHeapInit+0xa8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	1ad2      	subs	r2, r2, r3
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad0 <prvHeapInit+0xa8>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4a08      	ldr	r2, [pc, #32]	@ (8003ad4 <prvHeapInit+0xac>)
 8003ab2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	4a07      	ldr	r2, [pc, #28]	@ (8003ad8 <prvHeapInit+0xb0>)
 8003aba:	6013      	str	r3, [r2, #0]
}
 8003abc:	bf00      	nop
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	20000224 	.word	0x20000224
 8003acc:	20012e24 	.word	0x20012e24
 8003ad0:	20012e2c 	.word	0x20012e2c
 8003ad4:	20012e34 	.word	0x20012e34
 8003ad8:	20012e30 	.word	0x20012e30

08003adc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003ae4:	4b36      	ldr	r3, [pc, #216]	@ (8003bc0 <prvInsertBlockIntoFreeList+0xe4>)
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	e002      	b.n	8003af0 <prvInsertBlockIntoFreeList+0x14>
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d8f7      	bhi.n	8003aea <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	4a30      	ldr	r2, [pc, #192]	@ (8003bc0 <prvInsertBlockIntoFreeList+0xe4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d018      	beq.n	8003b34 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	4a2f      	ldr	r2, [pc, #188]	@ (8003bc4 <prvInsertBlockIntoFreeList+0xe8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d305      	bcc.n	8003b16 <prvInsertBlockIntoFreeList+0x3a>
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc8 <prvInsertBlockIntoFreeList+0xec>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d801      	bhi.n	8003b16 <prvInsertBlockIntoFreeList+0x3a>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <prvInsertBlockIntoFreeList+0x3c>
 8003b16:	2300      	movs	r3, #0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10b      	bne.n	8003b34 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b20:	f383 8811 	msr	BASEPRI, r3
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	60fb      	str	r3, [r7, #12]
}
 8003b2e:	bf00      	nop
 8003b30:	bf00      	nop
 8003b32:	e7fd      	b.n	8003b30 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4413      	add	r3, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d108      	bne.n	8003b58 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	441a      	add	r2, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	441a      	add	r2, r3
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d118      	bne.n	8003b9e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b16      	ldr	r3, [pc, #88]	@ (8003bcc <prvInsertBlockIntoFreeList+0xf0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d00d      	beq.n	8003b94 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	441a      	add	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e008      	b.n	8003ba6 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003b94:	4b0d      	ldr	r3, [pc, #52]	@ (8003bcc <prvInsertBlockIntoFreeList+0xf0>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	e003      	b.n	8003ba6 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d002      	beq.n	8003bb4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003bb4:	bf00      	nop
 8003bb6:	371c      	adds	r7, #28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	20012e24 	.word	0x20012e24
 8003bc4:	20000224 	.word	0x20000224
 8003bc8:	20012e23 	.word	0x20012e23
 8003bcc:	20012e2c 	.word	0x20012e2c

08003bd0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003bd4:	4803      	ldr	r0, [pc, #12]	@ (8003be4 <_cbSendSystemDesc+0x14>)
 8003bd6:	f002 f885 	bl	8005ce4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003bda:	4803      	ldr	r0, [pc, #12]	@ (8003be8 <_cbSendSystemDesc+0x18>)
 8003bdc:	f002 f882 	bl	8005ce4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003be0:	bf00      	nop
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	08007634 	.word	0x08007634
 8003be8:	08007670 	.word	0x08007670

08003bec <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003bf0:	4b06      	ldr	r3, [pc, #24]	@ (8003c0c <SEGGER_SYSVIEW_Conf+0x20>)
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <SEGGER_SYSVIEW_Conf+0x20>)
 8003bf6:	6819      	ldr	r1, [r3, #0]
 8003bf8:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <SEGGER_SYSVIEW_Conf+0x24>)
 8003bfa:	4a06      	ldr	r2, [pc, #24]	@ (8003c14 <SEGGER_SYSVIEW_Conf+0x28>)
 8003bfc:	f001 fcf6 	bl	80055ec <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003c00:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003c04:	f001 fd36 	bl	8005674 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003c08:	bf00      	nop
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	08003bd1 	.word	0x08003bd1
 8003c14:	08007704 	.word	0x08007704

08003c18 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003c1e:	2300      	movs	r3, #0
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	e033      	b.n	8003c8c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003c24:	491e      	ldr	r1, [pc, #120]	@ (8003ca0 <_cbSendTaskList+0x88>)
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	491a      	ldr	r1, [pc, #104]	@ (8003ca0 <_cbSendTaskList+0x88>)
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	3304      	adds	r3, #4
 8003c44:	6819      	ldr	r1, [r3, #0]
 8003c46:	4c16      	ldr	r4, [pc, #88]	@ (8003ca0 <_cbSendTaskList+0x88>)
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4423      	add	r3, r4
 8003c54:	3308      	adds	r3, #8
 8003c56:	681c      	ldr	r4, [r3, #0]
 8003c58:	4d11      	ldr	r5, [pc, #68]	@ (8003ca0 <_cbSendTaskList+0x88>)
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	442b      	add	r3, r5
 8003c66:	330c      	adds	r3, #12
 8003c68:	681d      	ldr	r5, [r3, #0]
 8003c6a:	4e0d      	ldr	r6, [pc, #52]	@ (8003ca0 <_cbSendTaskList+0x88>)
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4433      	add	r3, r6
 8003c78:	3310      	adds	r3, #16
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	462b      	mov	r3, r5
 8003c80:	4622      	mov	r2, r4
 8003c82:	f000 f8bd 	bl	8003e00 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	607b      	str	r3, [r7, #4]
 8003c8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ca4 <_cbSendTaskList+0x8c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d3c6      	bcc.n	8003c24 <_cbSendTaskList+0xc>
  }
}
 8003c96:	bf00      	nop
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ca0:	20012e40 	.word	0x20012e40
 8003ca4:	20012ee0 	.word	0x20012ee0

08003ca8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003cb0:	f7fe fb06 	bl	80022c0 <xTaskGetTickCountFromISR>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	469a      	mov	sl, r3
 8003cba:	4693      	mov	fp, r2
 8003cbc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	f04f 0a00 	mov.w	sl, #0
 8003ccc:	f04f 0b00 	mov.w	fp, #0
 8003cd0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003cd4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003cd8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003cdc:	4652      	mov	r2, sl
 8003cde:	465b      	mov	r3, fp
 8003ce0:	1a14      	subs	r4, r2, r0
 8003ce2:	eb63 0501 	sbc.w	r5, r3, r1
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	00ab      	lsls	r3, r5, #2
 8003cf0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003cf4:	00a2      	lsls	r2, r4, #2
 8003cf6:	4614      	mov	r4, r2
 8003cf8:	461d      	mov	r5, r3
 8003cfa:	eb14 0800 	adds.w	r8, r4, r0
 8003cfe:	eb45 0901 	adc.w	r9, r5, r1
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d16:	4690      	mov	r8, r2
 8003d18:	4699      	mov	r9, r3
 8003d1a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003d1e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003d22:	4610      	mov	r0, r2
 8003d24:	4619      	mov	r1, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003d30 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003d3e:	2205      	movs	r2, #5
 8003d40:	492b      	ldr	r1, [pc, #172]	@ (8003df0 <SYSVIEW_AddTask+0xc0>)
 8003d42:	68b8      	ldr	r0, [r7, #8]
 8003d44:	f002 fe46 	bl	80069d4 <memcmp>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d04b      	beq.n	8003de6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003d4e:	4b29      	ldr	r3, [pc, #164]	@ (8003df4 <SYSVIEW_AddTask+0xc4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b07      	cmp	r3, #7
 8003d54:	d903      	bls.n	8003d5e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003d56:	4828      	ldr	r0, [pc, #160]	@ (8003df8 <SYSVIEW_AddTask+0xc8>)
 8003d58:	f002 fb74 	bl	8006444 <SEGGER_SYSVIEW_Warn>
    return;
 8003d5c:	e044      	b.n	8003de8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003d5e:	4b25      	ldr	r3, [pc, #148]	@ (8003df4 <SYSVIEW_AddTask+0xc4>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	4926      	ldr	r1, [pc, #152]	@ (8003dfc <SYSVIEW_AddTask+0xcc>)
 8003d64:	4613      	mov	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003d72:	4b20      	ldr	r3, [pc, #128]	@ (8003df4 <SYSVIEW_AddTask+0xc4>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4921      	ldr	r1, [pc, #132]	@ (8003dfc <SYSVIEW_AddTask+0xcc>)
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	3304      	adds	r3, #4
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003d88:	4b1a      	ldr	r3, [pc, #104]	@ (8003df4 <SYSVIEW_AddTask+0xc4>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	491b      	ldr	r1, [pc, #108]	@ (8003dfc <SYSVIEW_AddTask+0xcc>)
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	3308      	adds	r3, #8
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003d9e:	4b15      	ldr	r3, [pc, #84]	@ (8003df4 <SYSVIEW_AddTask+0xc4>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4916      	ldr	r1, [pc, #88]	@ (8003dfc <SYSVIEW_AddTask+0xcc>)
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	330c      	adds	r3, #12
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003db4:	4b0f      	ldr	r3, [pc, #60]	@ (8003df4 <SYSVIEW_AddTask+0xc4>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4910      	ldr	r1, [pc, #64]	@ (8003dfc <SYSVIEW_AddTask+0xcc>)
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	3310      	adds	r3, #16
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003dca:	4b0a      	ldr	r3, [pc, #40]	@ (8003df4 <SYSVIEW_AddTask+0xc4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	4a08      	ldr	r2, [pc, #32]	@ (8003df4 <SYSVIEW_AddTask+0xc4>)
 8003dd2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 f80e 	bl	8003e00 <SYSVIEW_SendTaskInfo>
 8003de4:	e000      	b.n	8003de8 <SYSVIEW_AddTask+0xb8>
    return;
 8003de6:	bf00      	nop

}
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	08007680 	.word	0x08007680
 8003df4:	20012ee0 	.word	0x20012ee0
 8003df8:	08007688 	.word	0x08007688
 8003dfc:	20012e40 	.word	0x20012e40

08003e00 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	@ 0x28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003e0e:	f107 0310 	add.w	r3, r7, #16
 8003e12:	2218      	movs	r2, #24
 8003e14:	2100      	movs	r1, #0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f002 fdec 	bl	80069f4 <memset>
  TaskInfo.TaskID     = TaskID;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2e:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003e30:	f107 0310 	add.w	r3, r7, #16
 8003e34:	4618      	mov	r0, r3
 8003e36:	f001 fe5d 	bl	8005af4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003e3a:	bf00      	nop
 8003e3c:	3728      	adds	r7, #40	@ 0x28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <__NVIC_EnableIRQ>:
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	db0b      	blt.n	8003e6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	f003 021f 	and.w	r2, r3, #31
 8003e5c:	4907      	ldr	r1, [pc, #28]	@ (8003e7c <__NVIC_EnableIRQ+0x38>)
 8003e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	2001      	movs	r0, #1
 8003e66:	fa00 f202 	lsl.w	r2, r0, r2
 8003e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	e000e100 	.word	0xe000e100

08003e80 <__NVIC_SetPriority>:
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	6039      	str	r1, [r7, #0]
 8003e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	db0a      	blt.n	8003eaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	490c      	ldr	r1, [pc, #48]	@ (8003ecc <__NVIC_SetPriority+0x4c>)
 8003e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9e:	0112      	lsls	r2, r2, #4
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003ea8:	e00a      	b.n	8003ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	4908      	ldr	r1, [pc, #32]	@ (8003ed0 <__NVIC_SetPriority+0x50>)
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	3b04      	subs	r3, #4
 8003eb8:	0112      	lsls	r2, r2, #4
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	761a      	strb	r2, [r3, #24]
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	e000e100 	.word	0xe000e100
 8003ed0:	e000ed00 	.word	0xe000ed00

08003ed4 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003eda:	f002 fb0f 	bl	80064fc <SEGGER_SYSVIEW_IsStarted>
 8003ede:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003ee6:	f001 fc89 	bl	80057fc <SEGGER_SYSVIEW_Start>
  }
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003efe:	4b0c      	ldr	r3, [pc, #48]	@ (8003f30 <_cbOnUARTRx+0x3c>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d806      	bhi.n	8003f14 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003f06:	4b0a      	ldr	r3, [pc, #40]	@ (8003f30 <_cbOnUARTRx+0x3c>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	4b08      	ldr	r3, [pc, #32]	@ (8003f30 <_cbOnUARTRx+0x3c>)
 8003f10:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003f12:	e009      	b.n	8003f28 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003f14:	f7ff ffde 	bl	8003ed4 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003f18:	4b05      	ldr	r3, [pc, #20]	@ (8003f30 <_cbOnUARTRx+0x3c>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	1dfb      	adds	r3, r7, #7
 8003f20:	2201      	movs	r2, #1
 8003f22:	4619      	mov	r1, r3
 8003f24:	f000 fbec 	bl	8004700 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003f28:	bf00      	nop
}
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20000014 	.word	0x20000014

08003f34 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003f3c:	4b14      	ldr	r3, [pc, #80]	@ (8003f90 <_cbOnUARTTx+0x5c>)
 8003f3e:	785b      	ldrb	r3, [r3, #1]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d80f      	bhi.n	8003f64 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003f44:	4b12      	ldr	r3, [pc, #72]	@ (8003f90 <_cbOnUARTTx+0x5c>)
 8003f46:	785b      	ldrb	r3, [r3, #1]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b12      	ldr	r3, [pc, #72]	@ (8003f94 <_cbOnUARTTx+0x60>)
 8003f4c:	5c9a      	ldrb	r2, [r3, r2]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003f52:	4b0f      	ldr	r3, [pc, #60]	@ (8003f90 <_cbOnUARTTx+0x5c>)
 8003f54:	785b      	ldrb	r3, [r3, #1]
 8003f56:	3301      	adds	r3, #1
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f90 <_cbOnUARTTx+0x5c>)
 8003f5c:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003f62:	e00f      	b.n	8003f84 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003f64:	4b0a      	ldr	r3, [pc, #40]	@ (8003f90 <_cbOnUARTTx+0x5c>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fa1b 	bl	80043a8 <SEGGER_RTT_ReadUpBufferNoLock>
 8003f72:	4603      	mov	r3, r0
 8003f74:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	da02      	bge.n	8003f82 <_cbOnUARTTx+0x4e>
    r = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	e000      	b.n	8003f84 <_cbOnUARTTx+0x50>
  }
Done:
 8003f82:	bf00      	nop
  return r;
 8003f84:	68fb      	ldr	r3, [r7, #12]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000014 	.word	0x20000014
 8003f94:	0800770c 	.word	0x0800770c

08003f98 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003fa0:	4a04      	ldr	r2, [pc, #16]	@ (8003fb4 <SEGGER_UART_init+0x1c>)
 8003fa2:	4905      	ldr	r1, [pc, #20]	@ (8003fb8 <SEGGER_UART_init+0x20>)
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f863 	bl	8004070 <HIF_UART_Init>
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	08003ef5 	.word	0x08003ef5
 8003fb8:	08003f35 	.word	0x08003f35

08003fbc <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800403c <USART2_IRQHandler+0x80>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d011      	beq.n	8003ff6 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004040 <USART2_IRQHandler+0x84>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 030b 	and.w	r3, r3, #11
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d108      	bne.n	8003ff6 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003fe4:	4b17      	ldr	r3, [pc, #92]	@ (8004044 <USART2_IRQHandler+0x88>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d004      	beq.n	8003ff6 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003fec:	4b15      	ldr	r3, [pc, #84]	@ (8004044 <USART2_IRQHandler+0x88>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	79fa      	ldrb	r2, [r7, #7]
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01a      	beq.n	8004036 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004000:	4b11      	ldr	r3, [pc, #68]	@ (8004048 <USART2_IRQHandler+0x8c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d015      	beq.n	8004034 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004008:	4b0f      	ldr	r3, [pc, #60]	@ (8004048 <USART2_IRQHandler+0x8c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	1dfa      	adds	r2, r7, #7
 800400e:	4610      	mov	r0, r2
 8004010:	4798      	blx	r3
 8004012:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800401a:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <USART2_IRQHandler+0x90>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a0b      	ldr	r2, [pc, #44]	@ (800404c <USART2_IRQHandler+0x90>)
 8004020:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e006      	b.n	8004036 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004028:	4b04      	ldr	r3, [pc, #16]	@ (800403c <USART2_IRQHandler+0x80>)
 800402a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800402c:	79fa      	ldrb	r2, [r7, #7]
 800402e:	4b04      	ldr	r3, [pc, #16]	@ (8004040 <USART2_IRQHandler+0x84>)
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e000      	b.n	8004036 <USART2_IRQHandler+0x7a>
      return;
 8004034:	bf00      	nop
    }
  }
}
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40004400 	.word	0x40004400
 8004040:	40004404 	.word	0x40004404
 8004044:	20012ee4 	.word	0x20012ee4
 8004048:	20012ee8 	.word	0x20012ee8
 800404c:	4000440c 	.word	0x4000440c

08004050 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004054:	4b05      	ldr	r3, [pc, #20]	@ (800406c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a04      	ldr	r2, [pc, #16]	@ (800406c <HIF_UART_EnableTXEInterrupt+0x1c>)
 800405a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800405e:	6013      	str	r3, [r2, #0]
}
 8004060:	bf00      	nop
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	4000440c 	.word	0x4000440c

08004070 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 800407c:	4b2e      	ldr	r3, [pc, #184]	@ (8004138 <HIF_UART_Init+0xc8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a2d      	ldr	r2, [pc, #180]	@ (8004138 <HIF_UART_Init+0xc8>)
 8004082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004086:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004088:	4b2c      	ldr	r3, [pc, #176]	@ (800413c <HIF_UART_Init+0xcc>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a2b      	ldr	r2, [pc, #172]	@ (800413c <HIF_UART_Init+0xcc>)
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004094:	4b2a      	ldr	r3, [pc, #168]	@ (8004140 <HIF_UART_Init+0xd0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040a0:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80040a8:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80040aa:	4a25      	ldr	r2, [pc, #148]	@ (8004140 <HIF_UART_Init+0xd0>)
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80040b0:	4b24      	ldr	r3, [pc, #144]	@ (8004144 <HIF_UART_Init+0xd4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040bc:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80040c4:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80040c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004144 <HIF_UART_Init+0xd4>)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80040cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004148 <HIF_UART_Init+0xd8>)
 80040ce:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 80040d2:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80040d4:	4b1d      	ldr	r3, [pc, #116]	@ (800414c <HIF_UART_Init+0xdc>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80040da:	4b1d      	ldr	r3, [pc, #116]	@ (8004150 <HIF_UART_Init+0xe0>)
 80040dc:	2280      	movs	r2, #128	@ 0x80
 80040de:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80040e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004154 <HIF_UART_Init+0xe4>)
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	3301      	adds	r3, #1
 80040f0:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040fe:	d302      	bcc.n	8004106 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004100:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8004104:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	4a11      	ldr	r2, [pc, #68]	@ (8004158 <HIF_UART_Init+0xe8>)
 8004112:	b29b      	uxth	r3, r3
 8004114:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004116:	4a11      	ldr	r2, [pc, #68]	@ (800415c <HIF_UART_Init+0xec>)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 800411c:	4a10      	ldr	r2, [pc, #64]	@ (8004160 <HIF_UART_Init+0xf0>)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004122:	2106      	movs	r1, #6
 8004124:	2026      	movs	r0, #38	@ 0x26
 8004126:	f7ff feab 	bl	8003e80 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800412a:	2026      	movs	r0, #38	@ 0x26
 800412c:	f7ff fe8a 	bl	8003e44 <__NVIC_EnableIRQ>
}
 8004130:	bf00      	nop
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40023840 	.word	0x40023840
 800413c:	40023830 	.word	0x40023830
 8004140:	40020020 	.word	0x40020020
 8004144:	40020000 	.word	0x40020000
 8004148:	4000440c 	.word	0x4000440c
 800414c:	40004410 	.word	0x40004410
 8004150:	40004414 	.word	0x40004414
 8004154:	0501bd00 	.word	0x0501bd00
 8004158:	40004408 	.word	0x40004408
 800415c:	20012ee4 	.word	0x20012ee4
 8004160:	20012ee8 	.word	0x20012ee8

08004164 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800416a:	4b26      	ldr	r3, [pc, #152]	@ (8004204 <_DoInit+0xa0>)
 800416c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800416e:	22a8      	movs	r2, #168	@ 0xa8
 8004170:	2100      	movs	r1, #0
 8004172:	6838      	ldr	r0, [r7, #0]
 8004174:	f002 fc3e 	bl	80069f4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2203      	movs	r2, #3
 800417c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2203      	movs	r2, #3
 8004182:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	4a20      	ldr	r2, [pc, #128]	@ (8004208 <_DoInit+0xa4>)
 8004188:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	4a1f      	ldr	r2, [pc, #124]	@ (800420c <_DoInit+0xa8>)
 800418e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004196:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2200      	movs	r2, #0
 80041a2:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2200      	movs	r2, #0
 80041a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	4a16      	ldr	r2, [pc, #88]	@ (8004208 <_DoInit+0xa4>)
 80041ae:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	4a17      	ldr	r2, [pc, #92]	@ (8004210 <_DoInit+0xac>)
 80041b4:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2210      	movs	r2, #16
 80041ba:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2200      	movs	r2, #0
 80041c0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2200      	movs	r2, #0
 80041c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2200      	movs	r2, #0
 80041cc:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80041ce:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80041d2:	2300      	movs	r3, #0
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	e00c      	b.n	80041f2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f1c3 030f 	rsb	r3, r3, #15
 80041de:	4a0d      	ldr	r2, [pc, #52]	@ (8004214 <_DoInit+0xb0>)
 80041e0:	5cd1      	ldrb	r1, [r2, r3]
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4413      	add	r3, r2
 80041e8:	460a      	mov	r2, r1
 80041ea:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3301      	adds	r3, #1
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b0f      	cmp	r3, #15
 80041f6:	d9ef      	bls.n	80041d8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80041f8:	f3bf 8f5f 	dmb	sy
}
 80041fc:	bf00      	nop
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20012eec 	.word	0x20012eec
 8004208:	080076d8 	.word	0x080076d8
 800420c:	20012f94 	.word	0x20012f94
 8004210:	20013394 	.word	0x20013394
 8004214:	08007710 	.word	0x08007710

08004218 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	@ 0x28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004224:	2300      	movs	r3, #0
 8004226:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	429a      	cmp	r2, r3
 800423a:	d905      	bls.n	8004248 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	627b      	str	r3, [r7, #36]	@ 0x24
 8004246:	e007      	b.n	8004258 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	69b9      	ldr	r1, [r7, #24]
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	1acb      	subs	r3, r1, r3
 8004252:	4413      	add	r3, r2
 8004254:	3b01      	subs	r3, #1
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004262:	4293      	cmp	r3, r2
 8004264:	bf28      	it	cs
 8004266:	4613      	movcs	r3, r2
 8004268:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800426a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4293      	cmp	r3, r2
 8004270:	bf28      	it	cs
 8004272:	4613      	movcs	r3, r2
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	6978      	ldr	r0, [r7, #20]
 8004286:	f002 fc1e 	bl	8006ac6 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800428a:	6a3a      	ldr	r2, [r7, #32]
 800428c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428e:	4413      	add	r3, r2
 8004290:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	4413      	add	r3, r2
 8004298:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a6:	4413      	add	r3, r2
 80042a8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d101      	bne.n	80042b8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80042b8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1b2      	bne.n	800422e <_WriteBlocking+0x16>
  return NumBytesWritten;
 80042c8:	6a3b      	ldr	r3, [r7, #32]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3728      	adds	r7, #40	@ 0x28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b088      	sub	sp, #32
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d911      	bls.n	800431a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	68b9      	ldr	r1, [r7, #8]
 8004304:	6938      	ldr	r0, [r7, #16]
 8004306:	f002 fbde 	bl	8006ac6 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800430a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	441a      	add	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004318:	e01f      	b.n	800435a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4413      	add	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	6938      	ldr	r0, [r7, #16]
 800432e:	f002 fbca 	bl	8006ac6 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	4413      	add	r3, r2
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4619      	mov	r1, r3
 800434a:	6938      	ldr	r0, [r7, #16]
 800434c:	f002 fbbb 	bl	8006ac6 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004350:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	60da      	str	r2, [r3, #12]
}
 800435a:	bf00      	nop
 800435c:	3720      	adds	r7, #32
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004362:	b480      	push	{r7}
 8004364:	b087      	sub	sp, #28
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	429a      	cmp	r2, r3
 800437c:	d808      	bhi.n	8004390 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad2      	subs	r2, r2, r3
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	4413      	add	r3, r2
 800438a:	3b01      	subs	r3, #1
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	e004      	b.n	800439a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	617b      	str	r3, [r7, #20]
  }
  return r;
 800439a:	697b      	ldr	r3, [r7, #20]
}
 800439c:	4618      	mov	r0, r3
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08c      	sub	sp, #48	@ 0x30
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80043b4:	4b3e      	ldr	r3, [pc, #248]	@ (80044b0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80043b6:	623b      	str	r3, [r7, #32]
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b53      	cmp	r3, #83	@ 0x53
 80043c0:	d001      	beq.n	80043c6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80043c2:	f7ff fecf 	bl	8004164 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	4613      	mov	r3, r2
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	4413      	add	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4a37      	ldr	r2, [pc, #220]	@ (80044b0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80043d4:	4413      	add	r3, r2
 80043d6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80043e8:	2300      	movs	r3, #0
 80043ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80043ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d92b      	bls.n	800444c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4293      	cmp	r3, r2
 8004404:	bf28      	it	cs
 8004406:	4613      	movcs	r3, r2
 8004408:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004410:	4413      	add	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	6939      	ldr	r1, [r7, #16]
 8004418:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800441a:	f002 fb54 	bl	8006ac6 <memcpy>
    NumBytesRead += NumBytesRem;
 800441e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	4413      	add	r3, r2
 8004424:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	4413      	add	r3, r2
 800442c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004436:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	4413      	add	r3, r2
 800443c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004444:	429a      	cmp	r2, r3
 8004446:	d101      	bne.n	800444c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004448:	2300      	movs	r3, #0
 800444a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4293      	cmp	r3, r2
 800445a:	bf28      	it	cs
 800445c:	4613      	movcs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d019      	beq.n	800449a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446c:	4413      	add	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	6939      	ldr	r1, [r7, #16]
 8004474:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004476:	f002 fb26 	bl	8006ac6 <memcpy>
    NumBytesRead += NumBytesRem;
 800447a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	4413      	add	r3, r2
 8004480:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	4413      	add	r3, r2
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004492:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	4413      	add	r3, r2
 8004498:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800449a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044a4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80044a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3730      	adds	r7, #48	@ 0x30
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20012eec 	.word	0x20012eec

080044b4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08c      	sub	sp, #48	@ 0x30
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80044c0:	4b3e      	ldr	r3, [pc, #248]	@ (80045bc <SEGGER_RTT_ReadNoLock+0x108>)
 80044c2:	623b      	str	r3, [r7, #32]
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b53      	cmp	r3, #83	@ 0x53
 80044cc:	d001      	beq.n	80044d2 <SEGGER_RTT_ReadNoLock+0x1e>
 80044ce:	f7ff fe49 	bl	8004164 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4613      	mov	r3, r2
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	4413      	add	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	3360      	adds	r3, #96	@ 0x60
 80044de:	4a37      	ldr	r2, [pc, #220]	@ (80045bc <SEGGER_RTT_ReadNoLock+0x108>)
 80044e0:	4413      	add	r3, r2
 80044e2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80044f4:	2300      	movs	r3, #0
 80044f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80044f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d92b      	bls.n	8004558 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4293      	cmp	r3, r2
 8004510:	bf28      	it	cs
 8004512:	4613      	movcs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451c:	4413      	add	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	6939      	ldr	r1, [r7, #16]
 8004524:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004526:	f002 face 	bl	8006ac6 <memcpy>
    NumBytesRead += NumBytesRem;
 800452a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	4413      	add	r3, r2
 8004530:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	4413      	add	r3, r2
 8004538:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004542:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	4413      	add	r3, r2
 8004548:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004550:	429a      	cmp	r2, r3
 8004552:	d101      	bne.n	8004558 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004554:	2300      	movs	r3, #0
 8004556:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4293      	cmp	r3, r2
 8004566:	bf28      	it	cs
 8004568:	4613      	movcs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d019      	beq.n	80045a6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	4413      	add	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	6939      	ldr	r1, [r7, #16]
 8004580:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004582:	f002 faa0 	bl	8006ac6 <memcpy>
    NumBytesRead += NumBytesRem;
 8004586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	4413      	add	r3, r2
 800458c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800458e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	4413      	add	r3, r2
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800459e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	4413      	add	r3, r2
 80045a4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80045a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045b0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80045b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3730      	adds	r7, #48	@ 0x30
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20012eec 	.word	0x20012eec

080045c0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4613      	mov	r3, r2
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	4413      	add	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	3360      	adds	r3, #96	@ 0x60
 80045dc:	4a1f      	ldr	r2, [pc, #124]	@ (800465c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80045de:	4413      	add	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d029      	beq.n	800463e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d82e      	bhi.n	800464c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d013      	beq.n	800461e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80045f6:	e029      	b.n	800464c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80045f8:	6978      	ldr	r0, [r7, #20]
 80045fa:	f7ff feb2 	bl	8004362 <_GetAvailWriteSpace>
 80045fe:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	429a      	cmp	r2, r3
 8004606:	d202      	bcs.n	800460e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004608:	2300      	movs	r3, #0
 800460a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800460c:	e021      	b.n	8004652 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	69b9      	ldr	r1, [r7, #24]
 8004616:	6978      	ldr	r0, [r7, #20]
 8004618:	f7ff fe5b 	bl	80042d2 <_WriteNoCheck>
    break;
 800461c:	e019      	b.n	8004652 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800461e:	6978      	ldr	r0, [r7, #20]
 8004620:	f7ff fe9f 	bl	8004362 <_GetAvailWriteSpace>
 8004624:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4293      	cmp	r3, r2
 800462c:	bf28      	it	cs
 800462e:	4613      	movcs	r3, r2
 8004630:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	69b9      	ldr	r1, [r7, #24]
 8004636:	6978      	ldr	r0, [r7, #20]
 8004638:	f7ff fe4b 	bl	80042d2 <_WriteNoCheck>
    break;
 800463c:	e009      	b.n	8004652 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	69b9      	ldr	r1, [r7, #24]
 8004642:	6978      	ldr	r0, [r7, #20]
 8004644:	f7ff fde8 	bl	8004218 <_WriteBlocking>
 8004648:	61f8      	str	r0, [r7, #28]
    break;
 800464a:	e002      	b.n	8004652 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800464c:	2300      	movs	r3, #0
 800464e:	61fb      	str	r3, [r7, #28]
    break;
 8004650:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004652:	69fb      	ldr	r3, [r7, #28]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20012eec 	.word	0x20012eec

08004660 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	4613      	mov	r3, r2
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	4413      	add	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4a1f      	ldr	r2, [pc, #124]	@ (80046fc <SEGGER_RTT_WriteNoLock+0x9c>)
 800467e:	4413      	add	r3, r2
 8004680:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d029      	beq.n	80046de <SEGGER_RTT_WriteNoLock+0x7e>
 800468a:	2b02      	cmp	r3, #2
 800468c:	d82e      	bhi.n	80046ec <SEGGER_RTT_WriteNoLock+0x8c>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <SEGGER_RTT_WriteNoLock+0x38>
 8004692:	2b01      	cmp	r3, #1
 8004694:	d013      	beq.n	80046be <SEGGER_RTT_WriteNoLock+0x5e>
 8004696:	e029      	b.n	80046ec <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004698:	6978      	ldr	r0, [r7, #20]
 800469a:	f7ff fe62 	bl	8004362 <_GetAvailWriteSpace>
 800469e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d202      	bcs.n	80046ae <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80046ac:	e021      	b.n	80046f2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	69b9      	ldr	r1, [r7, #24]
 80046b6:	6978      	ldr	r0, [r7, #20]
 80046b8:	f7ff fe0b 	bl	80042d2 <_WriteNoCheck>
    break;
 80046bc:	e019      	b.n	80046f2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80046be:	6978      	ldr	r0, [r7, #20]
 80046c0:	f7ff fe4f 	bl	8004362 <_GetAvailWriteSpace>
 80046c4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4293      	cmp	r3, r2
 80046cc:	bf28      	it	cs
 80046ce:	4613      	movcs	r3, r2
 80046d0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	69b9      	ldr	r1, [r7, #24]
 80046d6:	6978      	ldr	r0, [r7, #20]
 80046d8:	f7ff fdfb 	bl	80042d2 <_WriteNoCheck>
    break;
 80046dc:	e009      	b.n	80046f2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	69b9      	ldr	r1, [r7, #24]
 80046e2:	6978      	ldr	r0, [r7, #20]
 80046e4:	f7ff fd98 	bl	8004218 <_WriteBlocking>
 80046e8:	61f8      	str	r0, [r7, #28]
    break;
 80046ea:	e002      	b.n	80046f2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61fb      	str	r3, [r7, #28]
    break;
 80046f0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80046f2:	69fb      	ldr	r3, [r7, #28]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3720      	adds	r7, #32
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20012eec 	.word	0x20012eec

08004700 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800470c:	4b0e      	ldr	r3, [pc, #56]	@ (8004748 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b53      	cmp	r3, #83	@ 0x53
 8004718:	d001      	beq.n	800471e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800471a:	f7ff fd23 	bl	8004164 <_DoInit>
  SEGGER_RTT_LOCK();
 800471e:	f3ef 8311 	mrs	r3, BASEPRI
 8004722:	f04f 0120 	mov.w	r1, #32
 8004726:	f381 8811 	msr	BASEPRI, r1
 800472a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f7ff ff45 	bl	80045c0 <SEGGER_RTT_WriteDownBufferNoLock>
 8004736:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800473e:	697b      	ldr	r3, [r7, #20]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3720      	adds	r7, #32
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20012eec 	.word	0x20012eec

0800474c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004758:	4b0e      	ldr	r3, [pc, #56]	@ (8004794 <SEGGER_RTT_Write+0x48>)
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b53      	cmp	r3, #83	@ 0x53
 8004764:	d001      	beq.n	800476a <SEGGER_RTT_Write+0x1e>
 8004766:	f7ff fcfd 	bl	8004164 <_DoInit>
  SEGGER_RTT_LOCK();
 800476a:	f3ef 8311 	mrs	r3, BASEPRI
 800476e:	f04f 0120 	mov.w	r1, #32
 8004772:	f381 8811 	msr	BASEPRI, r1
 8004776:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7ff ff6f 	bl	8004660 <SEGGER_RTT_WriteNoLock>
 8004782:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800478a:	697b      	ldr	r3, [r7, #20]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20012eec 	.word	0x20012eec

08004798 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80047a6:	4b3d      	ldr	r3, [pc, #244]	@ (800489c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b53      	cmp	r3, #83	@ 0x53
 80047b2:	d001      	beq.n	80047b8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80047b4:	f7ff fcd6 	bl	8004164 <_DoInit>
  SEGGER_RTT_LOCK();
 80047b8:	f3ef 8311 	mrs	r3, BASEPRI
 80047bc:	f04f 0120 	mov.w	r1, #32
 80047c0:	f381 8811 	msr	BASEPRI, r1
 80047c4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80047c6:	4b35      	ldr	r3, [pc, #212]	@ (800489c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80047c8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80047ce:	6939      	ldr	r1, [r7, #16]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	4613      	mov	r3, r2
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	4413      	add	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	440b      	add	r3, r1
 80047de:	3304      	adds	r3, #4
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d008      	beq.n	80047f8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	3301      	adds	r3, #1
 80047ea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	dbeb      	blt.n	80047ce <SEGGER_RTT_AllocUpBuffer+0x36>
 80047f6:	e000      	b.n	80047fa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80047f8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	429a      	cmp	r2, r3
 8004802:	da3f      	bge.n	8004884 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004804:	6939      	ldr	r1, [r7, #16]
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	4613      	mov	r3, r2
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	4413      	add	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	440b      	add	r3, r1
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004818:	6939      	ldr	r1, [r7, #16]
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	4613      	mov	r3, r2
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	4413      	add	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	440b      	add	r3, r1
 8004828:	3304      	adds	r3, #4
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800482e:	6939      	ldr	r1, [r7, #16]
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	4613      	mov	r3, r2
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	4413      	add	r3, r2
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	440b      	add	r3, r1
 800483c:	3320      	adds	r3, #32
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004842:	6939      	ldr	r1, [r7, #16]
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	4613      	mov	r3, r2
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4413      	add	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	440b      	add	r3, r1
 8004850:	3328      	adds	r3, #40	@ 0x28
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004856:	6939      	ldr	r1, [r7, #16]
 8004858:	69fa      	ldr	r2, [r7, #28]
 800485a:	4613      	mov	r3, r2
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	4413      	add	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	440b      	add	r3, r1
 8004864:	3324      	adds	r3, #36	@ 0x24
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800486a:	6939      	ldr	r1, [r7, #16]
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	4613      	mov	r3, r2
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	4413      	add	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	440b      	add	r3, r1
 8004878:	332c      	adds	r3, #44	@ 0x2c
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800487e:	f3bf 8f5f 	dmb	sy
 8004882:	e002      	b.n	800488a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004884:	f04f 33ff 	mov.w	r3, #4294967295
 8004888:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004890:	69fb      	ldr	r3, [r7, #28]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3720      	adds	r7, #32
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	20012eec 	.word	0x20012eec

080048a0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	@ 0x28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80048ae:	4b21      	ldr	r3, [pc, #132]	@ (8004934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80048b0:	623b      	str	r3, [r7, #32]
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b53      	cmp	r3, #83	@ 0x53
 80048ba:	d001      	beq.n	80048c0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80048bc:	f7ff fc52 	bl	8004164 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80048c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80048c2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d82c      	bhi.n	8004924 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80048ca:	f3ef 8311 	mrs	r3, BASEPRI
 80048ce:	f04f 0120 	mov.w	r1, #32
 80048d2:	f381 8811 	msr	BASEPRI, r1
 80048d6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	3360      	adds	r3, #96	@ 0x60
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	4413      	add	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00e      	beq.n	800490e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2200      	movs	r2, #0
 8004906:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2200      	movs	r2, #0
 800490c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004912:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004914:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800491e:	2300      	movs	r3, #0
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
 8004922:	e002      	b.n	800492a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004924:	f04f 33ff 	mov.w	r3, #4294967295
 8004928:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800492c:	4618      	mov	r0, r3
 800492e:	3728      	adds	r7, #40	@ 0x28
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20012eec 	.word	0x20012eec

08004938 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d105      	bne.n	8004956 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	60fa      	str	r2, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]
 8004954:	e022      	b.n	800499c <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	60fa      	str	r2, [r7, #12]
 8004960:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b80      	cmp	r3, #128	@ 0x80
 8004966:	d90a      	bls.n	800497e <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004968:	2380      	movs	r3, #128	@ 0x80
 800496a:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 800496c:	e007      	b.n	800497e <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	1c53      	adds	r3, r2, #1
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1c59      	adds	r1, r3, #1
 8004978:	60f9      	str	r1, [r7, #12]
 800497a:	7812      	ldrb	r2, [r2, #0]
 800497c:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	1e5a      	subs	r2, r3, #1
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <_EncodeStr+0x58>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1ee      	bne.n	800496e <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	b2da      	uxtb	r2, r3
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 800499c:	68fb      	ldr	r3, [r7, #12]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3307      	adds	r3, #7
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80049ca:	4b34      	ldr	r3, [pc, #208]	@ (8004a9c <_HandleIncomingPacket+0xd8>)
 80049cc:	7e1b      	ldrb	r3, [r3, #24]
 80049ce:	4618      	mov	r0, r3
 80049d0:	1cfb      	adds	r3, r7, #3
 80049d2:	2201      	movs	r2, #1
 80049d4:	4619      	mov	r1, r3
 80049d6:	f7ff fd6d 	bl	80044b4 <SEGGER_RTT_ReadNoLock>
 80049da:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d057      	beq.n	8004a92 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	2b80      	cmp	r3, #128	@ 0x80
 80049e6:	d031      	beq.n	8004a4c <_HandleIncomingPacket+0x88>
 80049e8:	2b80      	cmp	r3, #128	@ 0x80
 80049ea:	dc40      	bgt.n	8004a6e <_HandleIncomingPacket+0xaa>
 80049ec:	2b07      	cmp	r3, #7
 80049ee:	dc15      	bgt.n	8004a1c <_HandleIncomingPacket+0x58>
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	dd3c      	ble.n	8004a6e <_HandleIncomingPacket+0xaa>
 80049f4:	3b01      	subs	r3, #1
 80049f6:	2b06      	cmp	r3, #6
 80049f8:	d839      	bhi.n	8004a6e <_HandleIncomingPacket+0xaa>
 80049fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004a00 <_HandleIncomingPacket+0x3c>)
 80049fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a00:	08004a23 	.word	0x08004a23
 8004a04:	08004a29 	.word	0x08004a29
 8004a08:	08004a2f 	.word	0x08004a2f
 8004a0c:	08004a35 	.word	0x08004a35
 8004a10:	08004a3b 	.word	0x08004a3b
 8004a14:	08004a41 	.word	0x08004a41
 8004a18:	08004a47 	.word	0x08004a47
 8004a1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a1e:	d033      	beq.n	8004a88 <_HandleIncomingPacket+0xc4>
 8004a20:	e025      	b.n	8004a6e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004a22:	f000 feeb 	bl	80057fc <SEGGER_SYSVIEW_Start>
      break;
 8004a26:	e034      	b.n	8004a92 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004a28:	f000 ffa4 	bl	8005974 <SEGGER_SYSVIEW_Stop>
      break;
 8004a2c:	e031      	b.n	8004a92 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004a2e:	f001 f97d 	bl	8005d2c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004a32:	e02e      	b.n	8004a92 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004a34:	f001 f942 	bl	8005cbc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004a38:	e02b      	b.n	8004a92 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004a3a:	f000 ffc1 	bl	80059c0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004a3e:	e028      	b.n	8004a92 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004a40:	f001 fcae 	bl	80063a0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004a44:	e025      	b.n	8004a92 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004a46:	f001 fc8d 	bl	8006364 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004a4a:	e022      	b.n	8004a92 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004a4c:	4b13      	ldr	r3, [pc, #76]	@ (8004a9c <_HandleIncomingPacket+0xd8>)
 8004a4e:	7e1b      	ldrb	r3, [r3, #24]
 8004a50:	4618      	mov	r0, r3
 8004a52:	1cfb      	adds	r3, r7, #3
 8004a54:	2201      	movs	r2, #1
 8004a56:	4619      	mov	r1, r3
 8004a58:	f7ff fd2c 	bl	80044b4 <SEGGER_RTT_ReadNoLock>
 8004a5c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d013      	beq.n	8004a8c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f001 fbf2 	bl	8006250 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004a6c:	e00e      	b.n	8004a8c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	b25b      	sxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	da0c      	bge.n	8004a90 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004a76:	4b09      	ldr	r3, [pc, #36]	@ (8004a9c <_HandleIncomingPacket+0xd8>)
 8004a78:	7e1b      	ldrb	r3, [r3, #24]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	1cfb      	adds	r3, r7, #3
 8004a7e:	2201      	movs	r2, #1
 8004a80:	4619      	mov	r1, r3
 8004a82:	f7ff fd17 	bl	80044b4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004a86:	e003      	b.n	8004a90 <_HandleIncomingPacket+0xcc>
      break;
 8004a88:	bf00      	nop
 8004a8a:	e002      	b.n	8004a92 <_HandleIncomingPacket+0xce>
      break;
 8004a8c:	bf00      	nop
 8004a8e:	e000      	b.n	8004a92 <_HandleIncomingPacket+0xce>
      break;
 8004a90:	bf00      	nop
    }
  }
}
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	200143ac 	.word	0x200143ac

08004aa0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08c      	sub	sp, #48	@ 0x30
 8004aa4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004aaa:	1d3b      	adds	r3, r7, #4
 8004aac:	3301      	adds	r3, #1
 8004aae:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ab4:	4b32      	ldr	r3, [pc, #200]	@ (8004b80 <_TrySendOverflowPacket+0xe0>)
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aba:	e00b      	b.n	8004ad4 <_TrySendOverflowPacket+0x34>
 8004abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac2:	1c59      	adds	r1, r3, #1
 8004ac4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004ac6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad0:	09db      	lsrs	r3, r3, #7
 8004ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ad8:	d8f0      	bhi.n	8004abc <_TrySendOverflowPacket+0x1c>
 8004ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004aea:	4b26      	ldr	r3, [pc, #152]	@ (8004b84 <_TrySendOverflowPacket+0xe4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8004af0:	4b23      	ldr	r3, [pc, #140]	@ (8004b80 <_TrySendOverflowPacket+0xe0>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	623b      	str	r3, [r7, #32]
 8004b02:	e00b      	b.n	8004b1c <_TrySendOverflowPacket+0x7c>
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0a:	1c59      	adds	r1, r3, #1
 8004b0c:	6279      	str	r1, [r7, #36]	@ 0x24
 8004b0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	09db      	lsrs	r3, r3, #7
 8004b1a:	623b      	str	r3, [r7, #32]
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b20:	d8f0      	bhi.n	8004b04 <_TrySendOverflowPacket+0x64>
 8004b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b28:	6a3a      	ldr	r2, [r7, #32]
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b30:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004b32:	4b13      	ldr	r3, [pc, #76]	@ (8004b80 <_TrySendOverflowPacket+0xe0>)
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	4618      	mov	r0, r3
 8004b38:	1d3b      	adds	r3, r7, #4
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	1d3b      	adds	r3, r7, #4
 8004b42:	4619      	mov	r1, r3
 8004b44:	f7fb fb54 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004b4c:	f7ff fa80 	bl	8004050 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d009      	beq.n	8004b6a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004b56:	4a0a      	ldr	r2, [pc, #40]	@ (8004b80 <_TrySendOverflowPacket+0xe0>)
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004b5c:	4b08      	ldr	r3, [pc, #32]	@ (8004b80 <_TrySendOverflowPacket+0xe0>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <_TrySendOverflowPacket+0xe0>)
 8004b66:	701a      	strb	r2, [r3, #0]
 8004b68:	e004      	b.n	8004b74 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004b6a:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <_TrySendOverflowPacket+0xe0>)
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	4a03      	ldr	r2, [pc, #12]	@ (8004b80 <_TrySendOverflowPacket+0xe0>)
 8004b72:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004b74:	693b      	ldr	r3, [r7, #16]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3730      	adds	r7, #48	@ 0x30
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	200143ac 	.word	0x200143ac
 8004b84:	e0001004 	.word	0xe0001004

08004b88 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	@ 0x28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004b94:	4b96      	ldr	r3, [pc, #600]	@ (8004df0 <_SendPacket+0x268>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d010      	beq.n	8004bbe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004b9c:	4b94      	ldr	r3, [pc, #592]	@ (8004df0 <_SendPacket+0x268>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8130 	beq.w	8004e06 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004ba6:	4b92      	ldr	r3, [pc, #584]	@ (8004df0 <_SendPacket+0x268>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d109      	bne.n	8004bc2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004bae:	f7ff ff77 	bl	8004aa0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004bb2:	4b8f      	ldr	r3, [pc, #572]	@ (8004df0 <_SendPacket+0x268>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	f040 8127 	bne.w	8004e0a <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004bbc:	e001      	b.n	8004bc2 <_SendPacket+0x3a>
    goto Send;
 8004bbe:	bf00      	nop
 8004bc0:	e000      	b.n	8004bc4 <_SendPacket+0x3c>
Send:
 8004bc2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b1f      	cmp	r3, #31
 8004bc8:	d809      	bhi.n	8004bde <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004bca:	4b89      	ldr	r3, [pc, #548]	@ (8004df0 <_SendPacket+0x268>)
 8004bcc:	69da      	ldr	r2, [r3, #28]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f040 8118 	bne.w	8004e0e <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b17      	cmp	r3, #23
 8004be2:	d807      	bhi.n	8004bf4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	e0c4      	b.n	8004d7e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c00:	d912      	bls.n	8004c28 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	09da      	lsrs	r2, r3, #7
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	3a01      	subs	r2, #1
 8004c1a:	60fa      	str	r2, [r7, #12]
 8004c1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e006      	b.n	8004c36 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b7e      	cmp	r3, #126	@ 0x7e
 8004c3a:	d807      	bhi.n	8004c4c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e098      	b.n	8004d7e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c52:	d212      	bcs.n	8004c7a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	09da      	lsrs	r2, r3, #7
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	3a01      	subs	r2, #1
 8004c6c:	60fa      	str	r2, [r7, #12]
 8004c6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	701a      	strb	r2, [r3, #0]
 8004c78:	e081      	b.n	8004d7e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c80:	d21d      	bcs.n	8004cbe <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	0b9a      	lsrs	r2, r3, #14
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	09db      	lsrs	r3, r3, #7
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	3a01      	subs	r2, #1
 8004c9c:	60fa      	str	r2, [r7, #12]
 8004c9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	3a01      	subs	r2, #1
 8004cb0:	60fa      	str	r2, [r7, #12]
 8004cb2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	e05f      	b.n	8004d7e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cc4:	d228      	bcs.n	8004d18 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	0d5a      	lsrs	r2, r3, #21
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	0b9b      	lsrs	r3, r3, #14
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	3a01      	subs	r2, #1
 8004ce0:	60fa      	str	r2, [r7, #12]
 8004ce2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	09db      	lsrs	r3, r3, #7
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	3a01      	subs	r2, #1
 8004cf6:	60fa      	str	r2, [r7, #12]
 8004cf8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	3a01      	subs	r2, #1
 8004d0a:	60fa      	str	r2, [r7, #12]
 8004d0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	e032      	b.n	8004d7e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	0f1a      	lsrs	r2, r3, #28
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	0d5b      	lsrs	r3, r3, #21
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	3a01      	subs	r2, #1
 8004d32:	60fa      	str	r2, [r7, #12]
 8004d34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	0b9b      	lsrs	r3, r3, #14
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	3a01      	subs	r2, #1
 8004d48:	60fa      	str	r2, [r7, #12]
 8004d4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	09db      	lsrs	r3, r3, #7
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	3a01      	subs	r2, #1
 8004d5e:	60fa      	str	r2, [r7, #12]
 8004d60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	3a01      	subs	r2, #1
 8004d72:	60fa      	str	r2, [r7, #12]
 8004d74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004df4 <_SendPacket+0x26c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004d84:	4b1a      	ldr	r3, [pc, #104]	@ (8004df0 <_SendPacket+0x268>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	623b      	str	r3, [r7, #32]
 8004d96:	e00b      	b.n	8004db0 <_SendPacket+0x228>
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9e:	1c59      	adds	r1, r3, #1
 8004da0:	6279      	str	r1, [r7, #36]	@ 0x24
 8004da2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	09db      	lsrs	r3, r3, #7
 8004dae:	623b      	str	r3, [r7, #32]
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004db4:	d8f0      	bhi.n	8004d98 <_SendPacket+0x210>
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	627a      	str	r2, [r7, #36]	@ 0x24
 8004dbc:	6a3a      	ldr	r2, [r7, #32]
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004df0 <_SendPacket+0x268>)
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	68f9      	ldr	r1, [r7, #12]
 8004dd6:	f7fb fa0b 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004dda:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004ddc:	f7ff f938 	bl	8004050 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d008      	beq.n	8004df8 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004de6:	4a02      	ldr	r2, [pc, #8]	@ (8004df0 <_SendPacket+0x268>)
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	60d3      	str	r3, [r2, #12]
 8004dec:	e010      	b.n	8004e10 <_SendPacket+0x288>
 8004dee:	bf00      	nop
 8004df0:	200143ac 	.word	0x200143ac
 8004df4:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004df8:	4b19      	ldr	r3, [pc, #100]	@ (8004e60 <_SendPacket+0x2d8>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	4b17      	ldr	r3, [pc, #92]	@ (8004e60 <_SendPacket+0x2d8>)
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	e004      	b.n	8004e10 <_SendPacket+0x288>
    goto SendDone;
 8004e06:	bf00      	nop
 8004e08:	e002      	b.n	8004e10 <_SendPacket+0x288>
      goto SendDone;
 8004e0a:	bf00      	nop
 8004e0c:	e000      	b.n	8004e10 <_SendPacket+0x288>
      goto SendDone;
 8004e0e:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004e10:	4b13      	ldr	r3, [pc, #76]	@ (8004e60 <_SendPacket+0x2d8>)
 8004e12:	7e1b      	ldrb	r3, [r3, #24]
 8004e14:	4619      	mov	r1, r3
 8004e16:	4a13      	ldr	r2, [pc, #76]	@ (8004e64 <_SendPacket+0x2dc>)
 8004e18:	460b      	mov	r3, r1
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	440b      	add	r3, r1
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	4413      	add	r3, r2
 8004e22:	336c      	adds	r3, #108	@ 0x6c
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4b0e      	ldr	r3, [pc, #56]	@ (8004e60 <_SendPacket+0x2d8>)
 8004e28:	7e1b      	ldrb	r3, [r3, #24]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	490d      	ldr	r1, [pc, #52]	@ (8004e64 <_SendPacket+0x2dc>)
 8004e2e:	4603      	mov	r3, r0
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	4403      	add	r3, r0
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	440b      	add	r3, r1
 8004e38:	3370      	adds	r3, #112	@ 0x70
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d00b      	beq.n	8004e58 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004e40:	4b07      	ldr	r3, [pc, #28]	@ (8004e60 <_SendPacket+0x2d8>)
 8004e42:	789b      	ldrb	r3, [r3, #2]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d107      	bne.n	8004e58 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004e48:	4b05      	ldr	r3, [pc, #20]	@ (8004e60 <_SendPacket+0x2d8>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004e4e:	f7ff fdb9 	bl	80049c4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004e52:	4b03      	ldr	r3, [pc, #12]	@ (8004e60 <_SendPacket+0x2d8>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004e58:	bf00      	nop
 8004e5a:	3728      	adds	r7, #40	@ 0x28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	200143ac 	.word	0x200143ac
 8004e64:	20012eec 	.word	0x20012eec

08004e68 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08a      	sub	sp, #40	@ 0x28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	460b      	mov	r3, r1
 8004e72:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	2b80      	cmp	r3, #128	@ 0x80
 8004e80:	d80a      	bhi.n	8004e98 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	1c59      	adds	r1, r3, #1
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6051      	str	r1, [r2, #4]
 8004e8c:	78fa      	ldrb	r2, [r7, #3]
 8004e8e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	2b80      	cmp	r3, #128	@ 0x80
 8004e9e:	d15a      	bne.n	8004f56 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	623b      	str	r3, [r7, #32]
 8004ec0:	e00b      	b.n	8004eda <_StoreChar+0x72>
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	1c59      	adds	r1, r3, #1
 8004eca:	6279      	str	r1, [r7, #36]	@ 0x24
 8004ecc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	09db      	lsrs	r3, r3, #7
 8004ed8:	623b      	str	r3, [r7, #32]
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ede:	d8f0      	bhi.n	8004ec2 <_StoreChar+0x5a>
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ee6:	6a3a      	ldr	r2, [r7, #32]
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	701a      	strb	r2, [r3, #0]
 8004eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eee:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	61fb      	str	r3, [r7, #28]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	e00b      	b.n	8004f12 <_StoreChar+0xaa>
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	1c59      	adds	r1, r3, #1
 8004f02:	61f9      	str	r1, [r7, #28]
 8004f04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	09db      	lsrs	r3, r3, #7
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f16:	d8f0      	bhi.n	8004efa <_StoreChar+0x92>
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	61fa      	str	r2, [r7, #28]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	221a      	movs	r2, #26
 8004f2e:	6939      	ldr	r1, [r7, #16]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff fe29 	bl	8004b88 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff fd35 	bl	80049aa <_PreparePacket>
 8004f40:	4602      	mov	r2, r0
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	611a      	str	r2, [r3, #16]
  }
}
 8004f56:	bf00      	nop
 8004f58:	3728      	adds	r7, #40	@ 0x28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08a      	sub	sp, #40	@ 0x28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004f72:	2301      	movs	r3, #1
 8004f74:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004f76:	2301      	movs	r3, #1
 8004f78:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004f7a:	e007      	b.n	8004f8c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004f7c:	6a3a      	ldr	r2, [r7, #32]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f84:	623b      	str	r3, [r7, #32]
    Width++;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004f8c:	6a3a      	ldr	r2, [r7, #32]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d2f3      	bcs.n	8004f7c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d901      	bls.n	8004fa0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d000      	beq.n	8004fac <_PrintUnsigned+0x4c>
 8004faa:	e01f      	b.n	8004fec <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8004fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d01c      	beq.n	8004fec <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <_PrintUnsigned+0x68>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d102      	bne.n	8004fc8 <_PrintUnsigned+0x68>
        c = '0';
 8004fc2:	2330      	movs	r3, #48	@ 0x30
 8004fc4:	76fb      	strb	r3, [r7, #27]
 8004fc6:	e001      	b.n	8004fcc <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8004fc8:	2320      	movs	r3, #32
 8004fca:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004fcc:	e007      	b.n	8004fde <_PrintUnsigned+0x7e>
        FieldWidth--;
 8004fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8004fd4:	7efb      	ldrb	r3, [r7, #27]
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f7ff ff45 	bl	8004e68 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <_PrintUnsigned+0x8c>
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d3f0      	bcc.n	8004fce <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d903      	bls.n	8004ffa <_PrintUnsigned+0x9a>
      NumDigits--;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	e009      	b.n	800500e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005002:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	429a      	cmp	r2, r3
 800500a:	d200      	bcs.n	800500e <_PrintUnsigned+0xae>
        break;
 800500c:	e005      	b.n	800501a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005018:	e7e8      	b.n	8004fec <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005022:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005028:	fb02 f303 	mul.w	r3, r2, r3
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005032:	4a15      	ldr	r2, [pc, #84]	@ (8005088 <_PrintUnsigned+0x128>)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	4413      	add	r3, r2
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	4619      	mov	r1, r3
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f7ff ff13 	bl	8004e68 <_StoreChar>
    Digit /= Base;
 8005042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	fbb2 f3f3 	udiv	r3, r2, r3
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e3      	bne.n	800501a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d011      	beq.n	8005080 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 800505c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00e      	beq.n	8005080 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005062:	e006      	b.n	8005072 <_PrintUnsigned+0x112>
        FieldWidth--;
 8005064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005066:	3b01      	subs	r3, #1
 8005068:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 800506a:	2120      	movs	r1, #32
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7ff fefb 	bl	8004e68 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <_PrintUnsigned+0x120>
 8005078:	69fa      	ldr	r2, [r7, #28]
 800507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507c:	429a      	cmp	r2, r3
 800507e:	d3f1      	bcc.n	8005064 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005080:	bf00      	nop
 8005082:	3728      	adds	r7, #40	@ 0x28
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	08007730 	.word	0x08007730

0800508c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	bfb8      	it	lt
 80050a0:	425b      	neglt	r3, r3
 80050a2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80050a4:	2301      	movs	r3, #1
 80050a6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80050a8:	e007      	b.n	80050ba <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80050b2:	613b      	str	r3, [r7, #16]
    Width++;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	3301      	adds	r3, #1
 80050b8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	429a      	cmp	r2, r3
 80050c0:	daf3      	bge.n	80050aa <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d901      	bls.n	80050ce <_PrintInt+0x42>
    Width = NumDigits;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <_PrintInt+0x5e>
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	db04      	blt.n	80050e4 <_PrintInt+0x58>
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <_PrintInt+0x5e>
    FieldWidth--;
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <_PrintInt+0x6e>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d016      	beq.n	8005128 <_PrintInt+0x9c>
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d111      	bne.n	8005128 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00e      	beq.n	8005128 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800510a:	e006      	b.n	800511a <_PrintInt+0x8e>
        FieldWidth--;
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	3b01      	subs	r3, #1
 8005110:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005112:	2120      	movs	r1, #32
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f7ff fea7 	bl	8004e68 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <_PrintInt+0x9c>
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	429a      	cmp	r2, r3
 8005126:	d3f1      	bcc.n	800510c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	da07      	bge.n	800513e <_PrintInt+0xb2>
    v = -v;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	425b      	negs	r3, r3
 8005132:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005134:	212d      	movs	r1, #45	@ 0x2d
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f7ff fe96 	bl	8004e68 <_StoreChar>
 800513c:	e008      	b.n	8005150 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005148:	212b      	movs	r1, #43	@ 0x2b
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f7ff fe8c 	bl	8004e68 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d019      	beq.n	800518e <_PrintInt+0x102>
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d114      	bne.n	800518e <_PrintInt+0x102>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d111      	bne.n	800518e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00e      	beq.n	800518e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005170:	e006      	b.n	8005180 <_PrintInt+0xf4>
        FieldWidth--;
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	3b01      	subs	r3, #1
 8005176:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005178:	2130      	movs	r1, #48	@ 0x30
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7ff fe74 	bl	8004e68 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <_PrintInt+0x102>
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	429a      	cmp	r2, r3
 800518c:	d3f1      	bcc.n	8005172 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f7ff fedf 	bl	8004f60 <_PrintUnsigned>
}
 80051a2:	bf00      	nop
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b098      	sub	sp, #96	@ 0x60
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80051b8:	f3ef 8311 	mrs	r3, BASEPRI
 80051bc:	f04f 0120 	mov.w	r1, #32
 80051c0:	f381 8811 	msr	BASEPRI, r1
 80051c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051c6:	48b7      	ldr	r0, [pc, #732]	@ (80054a4 <_VPrintTarget+0x2f8>)
 80051c8:	f7ff fbef 	bl	80049aa <_PreparePacket>
 80051cc:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80051ce:	4bb5      	ldr	r3, [pc, #724]	@ (80054a4 <_VPrintTarget+0x2f8>)
 80051d0:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80051d2:	2300      	movs	r3, #0
 80051d4:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80051d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d8:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	3301      	adds	r3, #1
 80051de:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3301      	adds	r3, #1
 80051f0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80051f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 81a8 	beq.w	800554c <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80051fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005200:	2b25      	cmp	r3, #37	@ 0x25
 8005202:	f040 8195 	bne.w	8005530 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005206:	2300      	movs	r3, #0
 8005208:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800520a:	2301      	movs	r3, #1
 800520c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005216:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800521a:	3b23      	subs	r3, #35	@ 0x23
 800521c:	2b0d      	cmp	r3, #13
 800521e:	d83f      	bhi.n	80052a0 <_VPrintTarget+0xf4>
 8005220:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <_VPrintTarget+0x7c>)
 8005222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005226:	bf00      	nop
 8005228:	08005291 	.word	0x08005291
 800522c:	080052a1 	.word	0x080052a1
 8005230:	080052a1 	.word	0x080052a1
 8005234:	080052a1 	.word	0x080052a1
 8005238:	080052a1 	.word	0x080052a1
 800523c:	080052a1 	.word	0x080052a1
 8005240:	080052a1 	.word	0x080052a1
 8005244:	080052a1 	.word	0x080052a1
 8005248:	08005281 	.word	0x08005281
 800524c:	080052a1 	.word	0x080052a1
 8005250:	08005261 	.word	0x08005261
 8005254:	080052a1 	.word	0x080052a1
 8005258:	080052a1 	.word	0x080052a1
 800525c:	08005271 	.word	0x08005271
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005262:	f043 0301 	orr.w	r3, r3, #1
 8005266:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3301      	adds	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	e01a      	b.n	80052a6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005270:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005272:	f043 0302 	orr.w	r3, r3, #2
 8005276:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3301      	adds	r3, #1
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	e012      	b.n	80052a6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005282:	f043 0304 	orr.w	r3, r3, #4
 8005286:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3301      	adds	r3, #1
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	e00a      	b.n	80052a6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005290:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005292:	f043 0308 	orr.w	r3, r3, #8
 8005296:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	3301      	adds	r3, #1
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	e002      	b.n	80052a6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80052a0:	2300      	movs	r3, #0
 80052a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80052a4:	bf00      	nop
        }
      } while (v);
 80052a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1b0      	bne.n	800520e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80052ac:	2300      	movs	r3, #0
 80052ae:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 80052b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80052be:	d912      	bls.n	80052e6 <_VPrintTarget+0x13a>
 80052c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052c4:	2b39      	cmp	r3, #57	@ 0x39
 80052c6:	d80e      	bhi.n	80052e6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80052ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	461a      	mov	r2, r3
 80052da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052de:	4413      	add	r3, r2
 80052e0:	3b30      	subs	r3, #48	@ 0x30
 80052e2:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 80052e4:	e7e4      	b.n	80052b0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80052e6:	2300      	movs	r3, #0
 80052e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 80052f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80052f8:	d11d      	bne.n	8005336 <_VPrintTarget+0x18a>
        sFormat++;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3301      	adds	r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005308:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800530c:	2b2f      	cmp	r3, #47	@ 0x2f
 800530e:	d912      	bls.n	8005336 <_VPrintTarget+0x18a>
 8005310:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005314:	2b39      	cmp	r3, #57	@ 0x39
 8005316:	d80e      	bhi.n	8005336 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3301      	adds	r3, #1
 800531c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800531e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005320:	4613      	mov	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	461a      	mov	r2, r3
 800532a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800532e:	4413      	add	r3, r2
 8005330:	3b30      	subs	r3, #48	@ 0x30
 8005332:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005334:	e7e4      	b.n	8005300 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800533e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005342:	2b6c      	cmp	r3, #108	@ 0x6c
 8005344:	d003      	beq.n	800534e <_VPrintTarget+0x1a2>
 8005346:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800534a:	2b68      	cmp	r3, #104	@ 0x68
 800534c:	d107      	bne.n	800535e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3301      	adds	r3, #1
 800535a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800535c:	e7ef      	b.n	800533e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800535e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005362:	2b25      	cmp	r3, #37	@ 0x25
 8005364:	f000 80d8 	beq.w	8005518 <_VPrintTarget+0x36c>
 8005368:	2b25      	cmp	r3, #37	@ 0x25
 800536a:	f2c0 80dc 	blt.w	8005526 <_VPrintTarget+0x37a>
 800536e:	2b78      	cmp	r3, #120	@ 0x78
 8005370:	f300 80d9 	bgt.w	8005526 <_VPrintTarget+0x37a>
 8005374:	2b58      	cmp	r3, #88	@ 0x58
 8005376:	f2c0 80d6 	blt.w	8005526 <_VPrintTarget+0x37a>
 800537a:	3b58      	subs	r3, #88	@ 0x58
 800537c:	2b20      	cmp	r3, #32
 800537e:	f200 80d2 	bhi.w	8005526 <_VPrintTarget+0x37a>
 8005382:	a201      	add	r2, pc, #4	@ (adr r2, 8005388 <_VPrintTarget+0x1dc>)
 8005384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005388:	0800547f 	.word	0x0800547f
 800538c:	08005527 	.word	0x08005527
 8005390:	08005527 	.word	0x08005527
 8005394:	08005527 	.word	0x08005527
 8005398:	08005527 	.word	0x08005527
 800539c:	08005527 	.word	0x08005527
 80053a0:	08005527 	.word	0x08005527
 80053a4:	08005527 	.word	0x08005527
 80053a8:	08005527 	.word	0x08005527
 80053ac:	08005527 	.word	0x08005527
 80053b0:	08005527 	.word	0x08005527
 80053b4:	0800540d 	.word	0x0800540d
 80053b8:	08005433 	.word	0x08005433
 80053bc:	08005527 	.word	0x08005527
 80053c0:	08005527 	.word	0x08005527
 80053c4:	08005527 	.word	0x08005527
 80053c8:	08005527 	.word	0x08005527
 80053cc:	08005527 	.word	0x08005527
 80053d0:	08005527 	.word	0x08005527
 80053d4:	08005527 	.word	0x08005527
 80053d8:	08005527 	.word	0x08005527
 80053dc:	08005527 	.word	0x08005527
 80053e0:	08005527 	.word	0x08005527
 80053e4:	08005527 	.word	0x08005527
 80053e8:	080054f3 	.word	0x080054f3
 80053ec:	08005527 	.word	0x08005527
 80053f0:	08005527 	.word	0x08005527
 80053f4:	080054a9 	.word	0x080054a9
 80053f8:	08005527 	.word	0x08005527
 80053fc:	08005459 	.word	0x08005459
 8005400:	08005527 	.word	0x08005527
 8005404:	08005527 	.word	0x08005527
 8005408:	0800547f 	.word	0x0800547f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	1d19      	adds	r1, r3, #4
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6011      	str	r1, [r2, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 800541a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800541c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8005420:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005424:	f107 0310 	add.w	r3, r7, #16
 8005428:	4611      	mov	r1, r2
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff fd1c 	bl	8004e68 <_StoreChar>
        break;
 8005430:	e07a      	b.n	8005528 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	1d19      	adds	r1, r3, #4
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6011      	str	r1, [r2, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005440:	f107 0010 	add.w	r0, r7, #16
 8005444:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800544e:	220a      	movs	r2, #10
 8005450:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005452:	f7ff fe1b 	bl	800508c <_PrintInt>
        break;
 8005456:	e067      	b.n	8005528 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	1d19      	adds	r1, r3, #4
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6011      	str	r1, [r2, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005466:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005468:	f107 0010 	add.w	r0, r7, #16
 800546c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005476:	220a      	movs	r2, #10
 8005478:	f7ff fd72 	bl	8004f60 <_PrintUnsigned>
        break;
 800547c:	e054      	b.n	8005528 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	1d19      	adds	r1, r3, #4
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6011      	str	r1, [r2, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800548c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800548e:	f107 0010 	add.w	r0, r7, #16
 8005492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005494:	9301      	str	r3, [sp, #4]
 8005496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800549c:	2210      	movs	r2, #16
 800549e:	f7ff fd5f 	bl	8004f60 <_PrintUnsigned>
        break;
 80054a2:	e041      	b.n	8005528 <_VPrintTarget+0x37c>
 80054a4:	200143dc 	.word	0x200143dc
      case 's':
        s = va_arg(*pParamList, const char*);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	1d19      	adds	r1, r3, #4
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6011      	str	r1, [r2, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 80054b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <_VPrintTarget+0x314>
          s = "(null)";
 80054bc:	4b4a      	ldr	r3, [pc, #296]	@ (80055e8 <_VPrintTarget+0x43c>)
 80054be:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 80054c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 80054c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054ca:	3301      	adds	r3, #1
 80054cc:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 80054ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80054d6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80054da:	f107 0310 	add.w	r3, r7, #16
 80054de:	4611      	mov	r1, r2
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff fcc1 	bl	8004e68 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80054ea:	d9e9      	bls.n	80054c0 <_VPrintTarget+0x314>
        break;
 80054ec:	e01c      	b.n	8005528 <_VPrintTarget+0x37c>
            break;
 80054ee:	bf00      	nop
        break;
 80054f0:	e01a      	b.n	8005528 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	1d19      	adds	r1, r3, #4
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6011      	str	r1, [r2, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005500:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005502:	f107 0010 	add.w	r0, r7, #16
 8005506:	2300      	movs	r3, #0
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	2308      	movs	r3, #8
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	2308      	movs	r3, #8
 8005510:	2210      	movs	r2, #16
 8005512:	f7ff fd25 	bl	8004f60 <_PrintUnsigned>
        break;
 8005516:	e007      	b.n	8005528 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005518:	f107 0310 	add.w	r3, r7, #16
 800551c:	2125      	movs	r1, #37	@ 0x25
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff fca2 	bl	8004e68 <_StoreChar>
        break;
 8005524:	e000      	b.n	8005528 <_VPrintTarget+0x37c>
      default:
        break;
 8005526:	bf00      	nop
      }
      sFormat++;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3301      	adds	r3, #1
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	e007      	b.n	8005540 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005530:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005534:	f107 0310 	add.w	r3, r7, #16
 8005538:	4611      	mov	r1, r2
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff fc94 	bl	8004e68 <_StoreChar>
    }
  } while (*sFormat);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f47f ae4d 	bne.w	80051e4 <_VPrintTarget+0x38>
 800554a:	e000      	b.n	800554e <_VPrintTarget+0x3a2>
      break;
 800554c:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d041      	beq.n	80055d8 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005554:	6a3a      	ldr	r2, [r7, #32]
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005564:	e00b      	b.n	800557e <_VPrintTarget+0x3d2>
 8005566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005568:	b2da      	uxtb	r2, r3
 800556a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800556c:	1c59      	adds	r1, r3, #1
 800556e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005570:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	701a      	strb	r2, [r3, #0]
 8005578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557a:	09db      	lsrs	r3, r3, #7
 800557c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800557e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005580:	2b7f      	cmp	r3, #127	@ 0x7f
 8005582:	d8f0      	bhi.n	8005566 <_VPrintTarget+0x3ba>
 8005584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800558a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]
 8005590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005592:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	637b      	str	r3, [r7, #52]	@ 0x34
 8005598:	2300      	movs	r3, #0
 800559a:	633b      	str	r3, [r7, #48]	@ 0x30
 800559c:	e00b      	b.n	80055b6 <_VPrintTarget+0x40a>
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a4:	1c59      	adds	r1, r3, #1
 80055a6:	6379      	str	r1, [r7, #52]	@ 0x34
 80055a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	701a      	strb	r2, [r3, #0]
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	09db      	lsrs	r3, r3, #7
 80055b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80055ba:	d8f0      	bhi.n	800559e <_VPrintTarget+0x3f2>
 80055bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	637a      	str	r2, [r7, #52]	@ 0x34
 80055c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	701a      	strb	r2, [r3, #0]
 80055c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ca:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	6979      	ldr	r1, [r7, #20]
 80055d0:	221a      	movs	r2, #26
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff fad8 	bl	8004b88 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80055d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055da:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80055de:	bf00      	nop
 80055e0:	3758      	adds	r7, #88	@ 0x58
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	080076e4 	.word	0x080076e4

080055ec <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80055fa:	2300      	movs	r3, #0
 80055fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005600:	4917      	ldr	r1, [pc, #92]	@ (8005660 <SEGGER_SYSVIEW_Init+0x74>)
 8005602:	4818      	ldr	r0, [pc, #96]	@ (8005664 <SEGGER_SYSVIEW_Init+0x78>)
 8005604:	f7ff f8c8 	bl	8004798 <SEGGER_RTT_AllocUpBuffer>
 8005608:	4603      	mov	r3, r0
 800560a:	b2da      	uxtb	r2, r3
 800560c:	4b16      	ldr	r3, [pc, #88]	@ (8005668 <SEGGER_SYSVIEW_Init+0x7c>)
 800560e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005610:	4b15      	ldr	r3, [pc, #84]	@ (8005668 <SEGGER_SYSVIEW_Init+0x7c>)
 8005612:	785a      	ldrb	r2, [r3, #1]
 8005614:	4b14      	ldr	r3, [pc, #80]	@ (8005668 <SEGGER_SYSVIEW_Init+0x7c>)
 8005616:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005618:	4b13      	ldr	r3, [pc, #76]	@ (8005668 <SEGGER_SYSVIEW_Init+0x7c>)
 800561a:	7e1b      	ldrb	r3, [r3, #24]
 800561c:	4618      	mov	r0, r3
 800561e:	2300      	movs	r3, #0
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	2308      	movs	r3, #8
 8005624:	4a11      	ldr	r2, [pc, #68]	@ (800566c <SEGGER_SYSVIEW_Init+0x80>)
 8005626:	490f      	ldr	r1, [pc, #60]	@ (8005664 <SEGGER_SYSVIEW_Init+0x78>)
 8005628:	f7ff f93a 	bl	80048a0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800562c:	4b0e      	ldr	r3, [pc, #56]	@ (8005668 <SEGGER_SYSVIEW_Init+0x7c>)
 800562e:	2200      	movs	r2, #0
 8005630:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005632:	4b0f      	ldr	r3, [pc, #60]	@ (8005670 <SEGGER_SYSVIEW_Init+0x84>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a0c      	ldr	r2, [pc, #48]	@ (8005668 <SEGGER_SYSVIEW_Init+0x7c>)
 8005638:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800563a:	4a0b      	ldr	r2, [pc, #44]	@ (8005668 <SEGGER_SYSVIEW_Init+0x7c>)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005640:	4a09      	ldr	r2, [pc, #36]	@ (8005668 <SEGGER_SYSVIEW_Init+0x7c>)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005646:	4a08      	ldr	r2, [pc, #32]	@ (8005668 <SEGGER_SYSVIEW_Init+0x7c>)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800564c:	4a06      	ldr	r2, [pc, #24]	@ (8005668 <SEGGER_SYSVIEW_Init+0x7c>)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005652:	4b05      	ldr	r3, [pc, #20]	@ (8005668 <SEGGER_SYSVIEW_Init+0x7c>)
 8005654:	2200      	movs	r2, #0
 8005656:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	200133a4 	.word	0x200133a4
 8005664:	080076ec 	.word	0x080076ec
 8005668:	200143ac 	.word	0x200143ac
 800566c:	200143a4 	.word	0x200143a4
 8005670:	e0001004 	.word	0xe0001004

08005674 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800567c:	4a04      	ldr	r2, [pc, #16]	@ (8005690 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6113      	str	r3, [r2, #16]
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	200143ac 	.word	0x200143ac

08005694 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800569c:	f3ef 8311 	mrs	r3, BASEPRI
 80056a0:	f04f 0120 	mov.w	r1, #32
 80056a4:	f381 8811 	msr	BASEPRI, r1
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	4808      	ldr	r0, [pc, #32]	@ (80056cc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80056ac:	f7ff f97d 	bl	80049aa <_PreparePacket>
 80056b0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	68b9      	ldr	r1, [r7, #8]
 80056b6:	68b8      	ldr	r0, [r7, #8]
 80056b8:	f7ff fa66 	bl	8004b88 <_SendPacket>
  RECORD_END();
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f383 8811 	msr	BASEPRI, r3
}
 80056c2:	bf00      	nop
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	200143dc 	.word	0x200143dc

080056d0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056da:	f3ef 8311 	mrs	r3, BASEPRI
 80056de:	f04f 0120 	mov.w	r1, #32
 80056e2:	f381 8811 	msr	BASEPRI, r1
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	4816      	ldr	r0, [pc, #88]	@ (8005744 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80056ea:	f7ff f95e 	bl	80049aa <_PreparePacket>
 80056ee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	61fb      	str	r3, [r7, #28]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	e00b      	b.n	8005716 <SEGGER_SYSVIEW_RecordU32+0x46>
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	1c59      	adds	r1, r3, #1
 8005706:	61f9      	str	r1, [r7, #28]
 8005708:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	09db      	lsrs	r3, r3, #7
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	2b7f      	cmp	r3, #127	@ 0x7f
 800571a:	d8f0      	bhi.n	80056fe <SEGGER_SYSVIEW_RecordU32+0x2e>
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	61fa      	str	r2, [r7, #28]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	68f9      	ldr	r1, [r7, #12]
 8005730:	6938      	ldr	r0, [r7, #16]
 8005732:	f7ff fa29 	bl	8004b88 <_SendPacket>
  RECORD_END();
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f383 8811 	msr	BASEPRI, r3
}
 800573c:	bf00      	nop
 800573e:	3720      	adds	r7, #32
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	200143dc 	.word	0x200143dc

08005748 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005748:	b580      	push	{r7, lr}
 800574a:	b08c      	sub	sp, #48	@ 0x30
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005754:	f3ef 8311 	mrs	r3, BASEPRI
 8005758:	f04f 0120 	mov.w	r1, #32
 800575c:	f381 8811 	msr	BASEPRI, r1
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	4825      	ldr	r0, [pc, #148]	@ (80057f8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005764:	f7ff f921 	bl	80049aa <_PreparePacket>
 8005768:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005776:	e00b      	b.n	8005790 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577a:	b2da      	uxtb	r2, r3
 800577c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577e:	1c59      	adds	r1, r3, #1
 8005780:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005782:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578c:	09db      	lsrs	r3, r3, #7
 800578e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005792:	2b7f      	cmp	r3, #127	@ 0x7f
 8005794:	d8f0      	bhi.n	8005778 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800579c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	623b      	str	r3, [r7, #32]
 80057ae:	e00b      	b.n	80057c8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b6:	1c59      	adds	r1, r3, #1
 80057b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80057ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	09db      	lsrs	r3, r3, #7
 80057c6:	623b      	str	r3, [r7, #32]
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80057cc:	d8f0      	bhi.n	80057b0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80057d4:	6a3a      	ldr	r2, [r7, #32]
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	6979      	ldr	r1, [r7, #20]
 80057e2:	69b8      	ldr	r0, [r7, #24]
 80057e4:	f7ff f9d0 	bl	8004b88 <_SendPacket>
  RECORD_END();
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f383 8811 	msr	BASEPRI, r3
}
 80057ee:	bf00      	nop
 80057f0:	3730      	adds	r7, #48	@ 0x30
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	200143dc 	.word	0x200143dc

080057fc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08c      	sub	sp, #48	@ 0x30
 8005800:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005802:	4b59      	ldr	r3, [pc, #356]	@ (8005968 <SEGGER_SYSVIEW_Start+0x16c>)
 8005804:	2201      	movs	r2, #1
 8005806:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005808:	f3ef 8311 	mrs	r3, BASEPRI
 800580c:	f04f 0120 	mov.w	r1, #32
 8005810:	f381 8811 	msr	BASEPRI, r1
 8005814:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005816:	4b54      	ldr	r3, [pc, #336]	@ (8005968 <SEGGER_SYSVIEW_Start+0x16c>)
 8005818:	785b      	ldrb	r3, [r3, #1]
 800581a:	220a      	movs	r2, #10
 800581c:	4953      	ldr	r1, [pc, #332]	@ (800596c <SEGGER_SYSVIEW_Start+0x170>)
 800581e:	4618      	mov	r0, r3
 8005820:	f7fa fce6 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800582a:	f7fe fc11 	bl	8004050 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800582e:	200a      	movs	r0, #10
 8005830:	f7ff ff30 	bl	8005694 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005834:	f3ef 8311 	mrs	r3, BASEPRI
 8005838:	f04f 0120 	mov.w	r1, #32
 800583c:	f381 8811 	msr	BASEPRI, r1
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	484b      	ldr	r0, [pc, #300]	@ (8005970 <SEGGER_SYSVIEW_Start+0x174>)
 8005844:	f7ff f8b1 	bl	80049aa <_PreparePacket>
 8005848:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005852:	4b45      	ldr	r3, [pc, #276]	@ (8005968 <SEGGER_SYSVIEW_Start+0x16c>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005858:	e00b      	b.n	8005872 <SEGGER_SYSVIEW_Start+0x76>
 800585a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585c:	b2da      	uxtb	r2, r3
 800585e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005860:	1c59      	adds	r1, r3, #1
 8005862:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005864:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586e:	09db      	lsrs	r3, r3, #7
 8005870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005874:	2b7f      	cmp	r3, #127	@ 0x7f
 8005876:	d8f0      	bhi.n	800585a <SEGGER_SYSVIEW_Start+0x5e>
 8005878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800587e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005886:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	627b      	str	r3, [r7, #36]	@ 0x24
 800588c:	4b36      	ldr	r3, [pc, #216]	@ (8005968 <SEGGER_SYSVIEW_Start+0x16c>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	623b      	str	r3, [r7, #32]
 8005892:	e00b      	b.n	80058ac <SEGGER_SYSVIEW_Start+0xb0>
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	b2da      	uxtb	r2, r3
 8005898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589a:	1c59      	adds	r1, r3, #1
 800589c:	6279      	str	r1, [r7, #36]	@ 0x24
 800589e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	09db      	lsrs	r3, r3, #7
 80058aa:	623b      	str	r3, [r7, #32]
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80058b0:	d8f0      	bhi.n	8005894 <SEGGER_SYSVIEW_Start+0x98>
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80058b8:	6a3a      	ldr	r2, [r7, #32]
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	61fb      	str	r3, [r7, #28]
 80058c6:	4b28      	ldr	r3, [pc, #160]	@ (8005968 <SEGGER_SYSVIEW_Start+0x16c>)
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	61bb      	str	r3, [r7, #24]
 80058cc:	e00b      	b.n	80058e6 <SEGGER_SYSVIEW_Start+0xea>
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	1c59      	adds	r1, r3, #1
 80058d6:	61f9      	str	r1, [r7, #28]
 80058d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	09db      	lsrs	r3, r3, #7
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80058ea:	d8f0      	bhi.n	80058ce <SEGGER_SYSVIEW_Start+0xd2>
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	61fa      	str	r2, [r7, #28]
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	2300      	movs	r3, #0
 8005902:	613b      	str	r3, [r7, #16]
 8005904:	e00b      	b.n	800591e <SEGGER_SYSVIEW_Start+0x122>
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	b2da      	uxtb	r2, r3
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	1c59      	adds	r1, r3, #1
 800590e:	6179      	str	r1, [r7, #20]
 8005910:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	09db      	lsrs	r3, r3, #7
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	2b7f      	cmp	r3, #127	@ 0x7f
 8005922:	d8f0      	bhi.n	8005906 <SEGGER_SYSVIEW_Start+0x10a>
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	617a      	str	r2, [r7, #20]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005934:	2218      	movs	r2, #24
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff f925 	bl	8004b88 <_SendPacket>
      RECORD_END();
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005944:	4b08      	ldr	r3, [pc, #32]	@ (8005968 <SEGGER_SYSVIEW_Start+0x16c>)
 8005946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800594c:	4b06      	ldr	r3, [pc, #24]	@ (8005968 <SEGGER_SYSVIEW_Start+0x16c>)
 800594e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005950:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005952:	f000 f9eb 	bl	8005d2c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005956:	f000 f9b1 	bl	8005cbc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800595a:	f000 fd21 	bl	80063a0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800595e:	bf00      	nop
 8005960:	3730      	adds	r7, #48	@ 0x30
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	200143ac 	.word	0x200143ac
 800596c:	08007724 	.word	0x08007724
 8005970:	200143dc 	.word	0x200143dc

08005974 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800597a:	f3ef 8311 	mrs	r3, BASEPRI
 800597e:	f04f 0120 	mov.w	r1, #32
 8005982:	f381 8811 	msr	BASEPRI, r1
 8005986:	607b      	str	r3, [r7, #4]
 8005988:	480b      	ldr	r0, [pc, #44]	@ (80059b8 <SEGGER_SYSVIEW_Stop+0x44>)
 800598a:	f7ff f80e 	bl	80049aa <_PreparePacket>
 800598e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005990:	4b0a      	ldr	r3, [pc, #40]	@ (80059bc <SEGGER_SYSVIEW_Stop+0x48>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d007      	beq.n	80059a8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005998:	220b      	movs	r2, #11
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	6838      	ldr	r0, [r7, #0]
 800599e:	f7ff f8f3 	bl	8004b88 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80059a2:	4b06      	ldr	r3, [pc, #24]	@ (80059bc <SEGGER_SYSVIEW_Stop+0x48>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f383 8811 	msr	BASEPRI, r3
}
 80059ae:	bf00      	nop
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	200143dc 	.word	0x200143dc
 80059bc:	200143ac 	.word	0x200143ac

080059c0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08c      	sub	sp, #48	@ 0x30
 80059c4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80059c6:	f3ef 8311 	mrs	r3, BASEPRI
 80059ca:	f04f 0120 	mov.w	r1, #32
 80059ce:	f381 8811 	msr	BASEPRI, r1
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	4845      	ldr	r0, [pc, #276]	@ (8005aec <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80059d6:	f7fe ffe8 	bl	80049aa <_PreparePacket>
 80059da:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059e4:	4b42      	ldr	r3, [pc, #264]	@ (8005af0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ea:	e00b      	b.n	8005a04 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80059ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f2:	1c59      	adds	r1, r3, #1
 80059f4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80059f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a00:	09db      	lsrs	r3, r3, #7
 8005a02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a06:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a08:	d8f0      	bhi.n	80059ec <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a18:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a1e:	4b34      	ldr	r3, [pc, #208]	@ (8005af0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	623b      	str	r3, [r7, #32]
 8005a24:	e00b      	b.n	8005a3e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	1c59      	adds	r1, r3, #1
 8005a2e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	09db      	lsrs	r3, r3, #7
 8005a3c:	623b      	str	r3, [r7, #32]
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a42:	d8f0      	bhi.n	8005a26 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a4a:	6a3a      	ldr	r2, [r7, #32]
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	61fb      	str	r3, [r7, #28]
 8005a58:	4b25      	ldr	r3, [pc, #148]	@ (8005af0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	e00b      	b.n	8005a78 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	1c59      	adds	r1, r3, #1
 8005a68:	61f9      	str	r1, [r7, #28]
 8005a6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	09db      	lsrs	r3, r3, #7
 8005a76:	61bb      	str	r3, [r7, #24]
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a7c:	d8f0      	bhi.n	8005a60 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	61fa      	str	r2, [r7, #28]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	2300      	movs	r3, #0
 8005a94:	613b      	str	r3, [r7, #16]
 8005a96:	e00b      	b.n	8005ab0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	1c59      	adds	r1, r3, #1
 8005aa0:	6179      	str	r1, [r7, #20]
 8005aa2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	09db      	lsrs	r3, r3, #7
 8005aae:	613b      	str	r3, [r7, #16]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ab4:	d8f0      	bhi.n	8005a98 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	617a      	str	r2, [r7, #20]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ac6:	2218      	movs	r2, #24
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	68b8      	ldr	r0, [r7, #8]
 8005acc:	f7ff f85c 	bl	8004b88 <_SendPacket>
  RECORD_END();
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ad6:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005ade:	4b04      	ldr	r3, [pc, #16]	@ (8005af0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae2:	4798      	blx	r3
  }
}
 8005ae4:	bf00      	nop
 8005ae6:	3730      	adds	r7, #48	@ 0x30
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	200143dc 	.word	0x200143dc
 8005af0:	200143ac 	.word	0x200143ac

08005af4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b092      	sub	sp, #72	@ 0x48
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005afc:	f3ef 8311 	mrs	r3, BASEPRI
 8005b00:	f04f 0120 	mov.w	r1, #32
 8005b04:	f381 8811 	msr	BASEPRI, r1
 8005b08:	617b      	str	r3, [r7, #20]
 8005b0a:	486a      	ldr	r0, [pc, #424]	@ (8005cb4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005b0c:	f7fe ff4d 	bl	80049aa <_PreparePacket>
 8005b10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b66      	ldr	r3, [pc, #408]	@ (8005cb8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b26:	e00b      	b.n	8005b40 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b2e:	1c59      	adds	r1, r3, #1
 8005b30:	6479      	str	r1, [r7, #68]	@ 0x44
 8005b32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]
 8005b3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b3c:	09db      	lsrs	r3, r3, #7
 8005b3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b42:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b44:	d8f0      	bhi.n	8005b28 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b60:	e00b      	b.n	8005b7a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b68:	1c59      	adds	r1, r3, #1
 8005b6a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005b6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	701a      	strb	r2, [r3, #0]
 8005b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b76:	09db      	lsrs	r3, r3, #7
 8005b78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b7e:	d8f0      	bhi.n	8005b62 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b8e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	4619      	mov	r1, r3
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f7fe fecd 	bl	8004938 <_EncodeStr>
 8005b9e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005ba0:	2209      	movs	r2, #9
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	6938      	ldr	r0, [r7, #16]
 8005ba6:	f7fe ffef 	bl	8004b88 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	4b40      	ldr	r3, [pc, #256]	@ (8005cb8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bbe:	e00b      	b.n	8005bd8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc6:	1c59      	adds	r1, r3, #1
 8005bc8:	6379      	str	r1, [r7, #52]	@ 0x34
 8005bca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	09db      	lsrs	r3, r3, #7
 8005bd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bda:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bdc:	d8f0      	bhi.n	8005bc0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	637a      	str	r2, [r7, #52]	@ 0x34
 8005be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bf8:	e00b      	b.n	8005c12 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c00:	1c59      	adds	r1, r3, #1
 8005c02:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005c04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0e:	09db      	lsrs	r3, r3, #7
 8005c10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c14:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c16:	d8f0      	bhi.n	8005bfa <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c26:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	623b      	str	r3, [r7, #32]
 8005c32:	e00b      	b.n	8005c4c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3a:	1c59      	adds	r1, r3, #1
 8005c3c:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c3e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	09db      	lsrs	r3, r3, #7
 8005c4a:	623b      	str	r3, [r7, #32]
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c50:	d8f0      	bhi.n	8005c34 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c58:	6a3a      	ldr	r2, [r7, #32]
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	61fb      	str	r3, [r7, #28]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	e00b      	b.n	8005c86 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	1c59      	adds	r1, r3, #1
 8005c76:	61f9      	str	r1, [r7, #28]
 8005c78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	701a      	strb	r2, [r3, #0]
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	09db      	lsrs	r3, r3, #7
 8005c84:	61bb      	str	r3, [r7, #24]
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c8a:	d8f0      	bhi.n	8005c6e <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	61fa      	str	r2, [r7, #28]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	701a      	strb	r2, [r3, #0]
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005c9c:	2215      	movs	r2, #21
 8005c9e:	68f9      	ldr	r1, [r7, #12]
 8005ca0:	6938      	ldr	r0, [r7, #16]
 8005ca2:	f7fe ff71 	bl	8004b88 <_SendPacket>
  RECORD_END();
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f383 8811 	msr	BASEPRI, r3
}
 8005cac:	bf00      	nop
 8005cae:	3748      	adds	r7, #72	@ 0x48
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	200143dc 	.word	0x200143dc
 8005cb8:	200143ac 	.word	0x200143ac

08005cbc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005cc0:	4b07      	ldr	r3, [pc, #28]	@ (8005ce0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d008      	beq.n	8005cda <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005cc8:	4b05      	ldr	r3, [pc, #20]	@ (8005ce0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005cd2:	4b03      	ldr	r3, [pc, #12]	@ (8005ce0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4798      	blx	r3
  }
}
 8005cda:	bf00      	nop
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	200143ac 	.word	0x200143ac

08005ce4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cec:	f3ef 8311 	mrs	r3, BASEPRI
 8005cf0:	f04f 0120 	mov.w	r1, #32
 8005cf4:	f381 8811 	msr	BASEPRI, r1
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	480b      	ldr	r0, [pc, #44]	@ (8005d28 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005cfc:	f7fe fe55 	bl	80049aa <_PreparePacket>
 8005d00:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d02:	2280      	movs	r2, #128	@ 0x80
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	6938      	ldr	r0, [r7, #16]
 8005d08:	f7fe fe16 	bl	8004938 <_EncodeStr>
 8005d0c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005d0e:	220e      	movs	r2, #14
 8005d10:	68f9      	ldr	r1, [r7, #12]
 8005d12:	6938      	ldr	r0, [r7, #16]
 8005d14:	f7fe ff38 	bl	8004b88 <_SendPacket>
  RECORD_END();
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f383 8811 	msr	BASEPRI, r3
}
 8005d1e:	bf00      	nop
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	200143dc 	.word	0x200143dc

08005d2c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005d32:	4b15      	ldr	r3, [pc, #84]	@ (8005d88 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d01a      	beq.n	8005d70 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005d3a:	4b13      	ldr	r3, [pc, #76]	@ (8005d88 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d015      	beq.n	8005d70 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005d44:	4b10      	ldr	r3, [pc, #64]	@ (8005d88 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4798      	blx	r3
 8005d4c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d50:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005d52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d56:	f04f 0200 	mov.w	r2, #0
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	000a      	movs	r2, r1
 8005d60:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d62:	4613      	mov	r3, r2
 8005d64:	461a      	mov	r2, r3
 8005d66:	4621      	mov	r1, r4
 8005d68:	200d      	movs	r0, #13
 8005d6a:	f7ff fced 	bl	8005748 <SEGGER_SYSVIEW_RecordU32x2>
 8005d6e:	e006      	b.n	8005d7e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005d70:	4b06      	ldr	r3, [pc, #24]	@ (8005d8c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4619      	mov	r1, r3
 8005d76:	200c      	movs	r0, #12
 8005d78:	f7ff fcaa 	bl	80056d0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005d7c:	bf00      	nop
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd90      	pop	{r4, r7, pc}
 8005d86:	bf00      	nop
 8005d88:	200143ac 	.word	0x200143ac
 8005d8c:	e0001004 	.word	0xe0001004

08005d90 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d96:	f3ef 8311 	mrs	r3, BASEPRI
 8005d9a:	f04f 0120 	mov.w	r1, #32
 8005d9e:	f381 8811 	msr	BASEPRI, r1
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	4819      	ldr	r0, [pc, #100]	@ (8005e0c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005da6:	f7fe fe00 	bl	80049aa <_PreparePacket>
 8005daa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005db0:	4b17      	ldr	r3, [pc, #92]	@ (8005e10 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	613b      	str	r3, [r7, #16]
 8005dc2:	e00b      	b.n	8005ddc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	1c59      	adds	r1, r3, #1
 8005dcc:	6179      	str	r1, [r7, #20]
 8005dce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	09db      	lsrs	r3, r3, #7
 8005dda:	613b      	str	r3, [r7, #16]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b7f      	cmp	r3, #127	@ 0x7f
 8005de0:	d8f0      	bhi.n	8005dc4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	617a      	str	r2, [r7, #20]
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005df2:	2202      	movs	r2, #2
 8005df4:	6879      	ldr	r1, [r7, #4]
 8005df6:	68b8      	ldr	r0, [r7, #8]
 8005df8:	f7fe fec6 	bl	8004b88 <_SendPacket>
  RECORD_END();
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f383 8811 	msr	BASEPRI, r3
}
 8005e02:	bf00      	nop
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	200143dc 	.word	0x200143dc
 8005e10:	e000ed04 	.word	0xe000ed04

08005e14 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e1a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e1e:	f04f 0120 	mov.w	r1, #32
 8005e22:	f381 8811 	msr	BASEPRI, r1
 8005e26:	607b      	str	r3, [r7, #4]
 8005e28:	4807      	ldr	r0, [pc, #28]	@ (8005e48 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005e2a:	f7fe fdbe 	bl	80049aa <_PreparePacket>
 8005e2e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005e30:	2203      	movs	r2, #3
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6838      	ldr	r0, [r7, #0]
 8005e36:	f7fe fea7 	bl	8004b88 <_SendPacket>
  RECORD_END();
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f383 8811 	msr	BASEPRI, r3
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	200143dc 	.word	0x200143dc

08005e4c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e52:	f3ef 8311 	mrs	r3, BASEPRI
 8005e56:	f04f 0120 	mov.w	r1, #32
 8005e5a:	f381 8811 	msr	BASEPRI, r1
 8005e5e:	607b      	str	r3, [r7, #4]
 8005e60:	4807      	ldr	r0, [pc, #28]	@ (8005e80 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005e62:	f7fe fda2 	bl	80049aa <_PreparePacket>
 8005e66:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005e68:	2212      	movs	r2, #18
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6838      	ldr	r0, [r7, #0]
 8005e6e:	f7fe fe8b 	bl	8004b88 <_SendPacket>
  RECORD_END();
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f383 8811 	msr	BASEPRI, r3
}
 8005e78:	bf00      	nop
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	200143dc 	.word	0x200143dc

08005e84 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e8c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e90:	f04f 0120 	mov.w	r1, #32
 8005e94:	f381 8811 	msr	BASEPRI, r1
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	4817      	ldr	r0, [pc, #92]	@ (8005ef8 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8005e9c:	f7fe fd85 	bl	80049aa <_PreparePacket>
 8005ea0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	61fb      	str	r3, [r7, #28]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	e00b      	b.n	8005ec8 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	1c59      	adds	r1, r3, #1
 8005eb8:	61f9      	str	r1, [r7, #28]
 8005eba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	09db      	lsrs	r3, r3, #7
 8005ec6:	61bb      	str	r3, [r7, #24]
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ecc:	d8f0      	bhi.n	8005eb0 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	61fa      	str	r2, [r7, #28]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005ede:	221c      	movs	r2, #28
 8005ee0:	68f9      	ldr	r1, [r7, #12]
 8005ee2:	6938      	ldr	r0, [r7, #16]
 8005ee4:	f7fe fe50 	bl	8004b88 <_SendPacket>
  RECORD_END();
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f383 8811 	msr	BASEPRI, r3
}
 8005eee:	bf00      	nop
 8005ef0:	3720      	adds	r7, #32
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	200143dc 	.word	0x200143dc

08005efc <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08a      	sub	sp, #40	@ 0x28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f06:	f3ef 8311 	mrs	r3, BASEPRI
 8005f0a:	f04f 0120 	mov.w	r1, #32
 8005f0e:	f381 8811 	msr	BASEPRI, r1
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	4824      	ldr	r0, [pc, #144]	@ (8005fa8 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8005f16:	f7fe fd48 	bl	80049aa <_PreparePacket>
 8005f1a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	623b      	str	r3, [r7, #32]
 8005f28:	e00b      	b.n	8005f42 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	1c59      	adds	r1, r3, #1
 8005f32:	6279      	str	r1, [r7, #36]	@ 0x24
 8005f34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	09db      	lsrs	r3, r3, #7
 8005f40:	623b      	str	r3, [r7, #32]
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f46:	d8f0      	bhi.n	8005f2a <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8005f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f4e:	6a3a      	ldr	r2, [r7, #32]
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f56:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	61fb      	str	r3, [r7, #28]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	61bb      	str	r3, [r7, #24]
 8005f60:	e00b      	b.n	8005f7a <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	1c59      	adds	r1, r3, #1
 8005f6a:	61f9      	str	r1, [r7, #28]
 8005f6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	09db      	lsrs	r3, r3, #7
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f7e:	d8f0      	bhi.n	8005f62 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	61fa      	str	r2, [r7, #28]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	701a      	strb	r2, [r3, #0]
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005f90:	221c      	movs	r2, #28
 8005f92:	68f9      	ldr	r1, [r7, #12]
 8005f94:	6938      	ldr	r0, [r7, #16]
 8005f96:	f7fe fdf7 	bl	8004b88 <_SendPacket>
  RECORD_END();
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f383 8811 	msr	BASEPRI, r3
}
 8005fa0:	bf00      	nop
 8005fa2:	3728      	adds	r7, #40	@ 0x28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	200143dc 	.word	0x200143dc

08005fac <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fb2:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb6:	f04f 0120 	mov.w	r1, #32
 8005fba:	f381 8811 	msr	BASEPRI, r1
 8005fbe:	607b      	str	r3, [r7, #4]
 8005fc0:	4807      	ldr	r0, [pc, #28]	@ (8005fe0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005fc2:	f7fe fcf2 	bl	80049aa <_PreparePacket>
 8005fc6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005fc8:	2211      	movs	r2, #17
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	6838      	ldr	r0, [r7, #0]
 8005fce:	f7fe fddb 	bl	8004b88 <_SendPacket>
  RECORD_END();
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f383 8811 	msr	BASEPRI, r3
}
 8005fd8:	bf00      	nop
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	200143dc 	.word	0x200143dc

08005fe4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fec:	f3ef 8311 	mrs	r3, BASEPRI
 8005ff0:	f04f 0120 	mov.w	r1, #32
 8005ff4:	f381 8811 	msr	BASEPRI, r1
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	4819      	ldr	r0, [pc, #100]	@ (8006060 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005ffc:	f7fe fcd5 	bl	80049aa <_PreparePacket>
 8006000:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006006:	4b17      	ldr	r3, [pc, #92]	@ (8006064 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	61fb      	str	r3, [r7, #28]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	61bb      	str	r3, [r7, #24]
 8006018:	e00b      	b.n	8006032 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	b2da      	uxtb	r2, r3
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	1c59      	adds	r1, r3, #1
 8006022:	61f9      	str	r1, [r7, #28]
 8006024:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	701a      	strb	r2, [r3, #0]
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	09db      	lsrs	r3, r3, #7
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	2b7f      	cmp	r3, #127	@ 0x7f
 8006036:	d8f0      	bhi.n	800601a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	61fa      	str	r2, [r7, #28]
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006048:	2208      	movs	r2, #8
 800604a:	68f9      	ldr	r1, [r7, #12]
 800604c:	6938      	ldr	r0, [r7, #16]
 800604e:	f7fe fd9b 	bl	8004b88 <_SendPacket>
  RECORD_END();
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f383 8811 	msr	BASEPRI, r3
}
 8006058:	bf00      	nop
 800605a:	3720      	adds	r7, #32
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	200143dc 	.word	0x200143dc
 8006064:	200143ac 	.word	0x200143ac

08006068 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006070:	f3ef 8311 	mrs	r3, BASEPRI
 8006074:	f04f 0120 	mov.w	r1, #32
 8006078:	f381 8811 	msr	BASEPRI, r1
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	4819      	ldr	r0, [pc, #100]	@ (80060e4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006080:	f7fe fc93 	bl	80049aa <_PreparePacket>
 8006084:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800608a:	4b17      	ldr	r3, [pc, #92]	@ (80060e8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	61fb      	str	r3, [r7, #28]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	61bb      	str	r3, [r7, #24]
 800609c:	e00b      	b.n	80060b6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	1c59      	adds	r1, r3, #1
 80060a6:	61f9      	str	r1, [r7, #28]
 80060a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	09db      	lsrs	r3, r3, #7
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80060ba:	d8f0      	bhi.n	800609e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	1c5a      	adds	r2, r3, #1
 80060c0:	61fa      	str	r2, [r7, #28]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	b2d2      	uxtb	r2, r2
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80060cc:	2204      	movs	r2, #4
 80060ce:	68f9      	ldr	r1, [r7, #12]
 80060d0:	6938      	ldr	r0, [r7, #16]
 80060d2:	f7fe fd59 	bl	8004b88 <_SendPacket>
  RECORD_END();
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f383 8811 	msr	BASEPRI, r3
}
 80060dc:	bf00      	nop
 80060de:	3720      	adds	r7, #32
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	200143dc 	.word	0x200143dc
 80060e8:	200143ac 	.word	0x200143ac

080060ec <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b088      	sub	sp, #32
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060f4:	f3ef 8311 	mrs	r3, BASEPRI
 80060f8:	f04f 0120 	mov.w	r1, #32
 80060fc:	f381 8811 	msr	BASEPRI, r1
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	4819      	ldr	r0, [pc, #100]	@ (8006168 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006104:	f7fe fc51 	bl	80049aa <_PreparePacket>
 8006108:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800610e:	4b17      	ldr	r3, [pc, #92]	@ (800616c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	61fb      	str	r3, [r7, #28]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	61bb      	str	r3, [r7, #24]
 8006120:	e00b      	b.n	800613a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	b2da      	uxtb	r2, r3
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	1c59      	adds	r1, r3, #1
 800612a:	61f9      	str	r1, [r7, #28]
 800612c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	701a      	strb	r2, [r3, #0]
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	09db      	lsrs	r3, r3, #7
 8006138:	61bb      	str	r3, [r7, #24]
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	2b7f      	cmp	r3, #127	@ 0x7f
 800613e:	d8f0      	bhi.n	8006122 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	61fa      	str	r2, [r7, #28]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	701a      	strb	r2, [r3, #0]
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006150:	2206      	movs	r2, #6
 8006152:	68f9      	ldr	r1, [r7, #12]
 8006154:	6938      	ldr	r0, [r7, #16]
 8006156:	f7fe fd17 	bl	8004b88 <_SendPacket>
  RECORD_END();
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f383 8811 	msr	BASEPRI, r3
}
 8006160:	bf00      	nop
 8006162:	3720      	adds	r7, #32
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	200143dc 	.word	0x200143dc
 800616c:	200143ac 	.word	0x200143ac

08006170 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	@ 0x28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800617a:	f3ef 8311 	mrs	r3, BASEPRI
 800617e:	f04f 0120 	mov.w	r1, #32
 8006182:	f381 8811 	msr	BASEPRI, r1
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	4827      	ldr	r0, [pc, #156]	@ (8006228 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800618a:	f7fe fc0e 	bl	80049aa <_PreparePacket>
 800618e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006194:	4b25      	ldr	r3, [pc, #148]	@ (800622c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	623b      	str	r3, [r7, #32]
 80061a6:	e00b      	b.n	80061c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	1c59      	adds	r1, r3, #1
 80061b0:	6279      	str	r1, [r7, #36]	@ 0x24
 80061b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	09db      	lsrs	r3, r3, #7
 80061be:	623b      	str	r3, [r7, #32]
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80061c4:	d8f0      	bhi.n	80061a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80061c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80061cc:	6a3a      	ldr	r2, [r7, #32]
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	61fb      	str	r3, [r7, #28]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	e00b      	b.n	80061f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	1c59      	adds	r1, r3, #1
 80061e8:	61f9      	str	r1, [r7, #28]
 80061ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	09db      	lsrs	r3, r3, #7
 80061f6:	61bb      	str	r3, [r7, #24]
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80061fc:	d8f0      	bhi.n	80061e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	61fa      	str	r2, [r7, #28]
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800620e:	2207      	movs	r2, #7
 8006210:	68f9      	ldr	r1, [r7, #12]
 8006212:	6938      	ldr	r0, [r7, #16]
 8006214:	f7fe fcb8 	bl	8004b88 <_SendPacket>
  RECORD_END();
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f383 8811 	msr	BASEPRI, r3
}
 800621e:	bf00      	nop
 8006220:	3728      	adds	r7, #40	@ 0x28
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	200143dc 	.word	0x200143dc
 800622c:	200143ac 	.word	0x200143ac

08006230 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006238:	4b04      	ldr	r3, [pc, #16]	@ (800624c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	1ad3      	subs	r3, r2, r3
}
 8006240:	4618      	mov	r0, r3
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	200143ac 	.word	0x200143ac

08006250 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006250:	b580      	push	{r7, lr}
 8006252:	b08c      	sub	sp, #48	@ 0x30
 8006254:	af00      	add	r7, sp, #0
 8006256:	4603      	mov	r3, r0
 8006258:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800625a:	4b40      	ldr	r3, [pc, #256]	@ (800635c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d077      	beq.n	8006352 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006262:	4b3e      	ldr	r3, [pc, #248]	@ (800635c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006268:	2300      	movs	r3, #0
 800626a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800626c:	e008      	b.n	8006280 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800626e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d007      	beq.n	800628a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800627a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627c:	3301      	adds	r3, #1
 800627e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006284:	429a      	cmp	r2, r3
 8006286:	d3f2      	bcc.n	800626e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006288:	e000      	b.n	800628c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800628a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800628c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d055      	beq.n	800633e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006292:	f3ef 8311 	mrs	r3, BASEPRI
 8006296:	f04f 0120 	mov.w	r1, #32
 800629a:	f381 8811 	msr	BASEPRI, r1
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	482f      	ldr	r0, [pc, #188]	@ (8006360 <SEGGER_SYSVIEW_SendModule+0x110>)
 80062a2:	f7fe fb82 	bl	80049aa <_PreparePacket>
 80062a6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80062b0:	79fb      	ldrb	r3, [r7, #7]
 80062b2:	623b      	str	r3, [r7, #32]
 80062b4:	e00b      	b.n	80062ce <SEGGER_SYSVIEW_SendModule+0x7e>
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	1c59      	adds	r1, r3, #1
 80062be:	6279      	str	r1, [r7, #36]	@ 0x24
 80062c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	701a      	strb	r2, [r3, #0]
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	09db      	lsrs	r3, r3, #7
 80062cc:	623b      	str	r3, [r7, #32]
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80062d2:	d8f0      	bhi.n	80062b6 <SEGGER_SYSVIEW_SendModule+0x66>
 80062d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80062da:	6a3a      	ldr	r2, [r7, #32]
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	61fb      	str	r3, [r7, #28]
 80062e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	61bb      	str	r3, [r7, #24]
 80062ee:	e00b      	b.n	8006308 <SEGGER_SYSVIEW_SendModule+0xb8>
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	1c59      	adds	r1, r3, #1
 80062f8:	61f9      	str	r1, [r7, #28]
 80062fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	09db      	lsrs	r3, r3, #7
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	2b7f      	cmp	r3, #127	@ 0x7f
 800630c:	d8f0      	bhi.n	80062f0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	61fa      	str	r2, [r7, #28]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800631e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2280      	movs	r2, #128	@ 0x80
 8006324:	4619      	mov	r1, r3
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f7fe fb06 	bl	8004938 <_EncodeStr>
 800632c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800632e:	2216      	movs	r2, #22
 8006330:	68f9      	ldr	r1, [r7, #12]
 8006332:	6938      	ldr	r0, [r7, #16]
 8006334:	f7fe fc28 	bl	8004b88 <_SendPacket>
      RECORD_END();
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800633e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d006      	beq.n	8006352 <SEGGER_SYSVIEW_SendModule+0x102>
 8006344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800634c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	4798      	blx	r3
    }
  }
}
 8006352:	bf00      	nop
 8006354:	3730      	adds	r7, #48	@ 0x30
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	200143d4 	.word	0x200143d4
 8006360:	200143dc 	.word	0x200143dc

08006364 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800636a:	4b0c      	ldr	r3, [pc, #48]	@ (800639c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00f      	beq.n	8006392 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006372:	4b0a      	ldr	r3, [pc, #40]	@ (800639c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f2      	bne.n	8006378 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006392:	bf00      	nop
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	200143d4 	.word	0x200143d4

080063a0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80063a6:	f3ef 8311 	mrs	r3, BASEPRI
 80063aa:	f04f 0120 	mov.w	r1, #32
 80063ae:	f381 8811 	msr	BASEPRI, r1
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	4817      	ldr	r0, [pc, #92]	@ (8006414 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80063b6:	f7fe faf8 	bl	80049aa <_PreparePacket>
 80063ba:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	4b14      	ldr	r3, [pc, #80]	@ (8006418 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	e00b      	b.n	80063e4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	1c59      	adds	r1, r3, #1
 80063d4:	6179      	str	r1, [r7, #20]
 80063d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	09db      	lsrs	r3, r3, #7
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80063e8:	d8f0      	bhi.n	80063cc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	617a      	str	r2, [r7, #20]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80063fa:	221b      	movs	r2, #27
 80063fc:	6879      	ldr	r1, [r7, #4]
 80063fe:	68b8      	ldr	r0, [r7, #8]
 8006400:	f7fe fbc2 	bl	8004b88 <_SendPacket>
  RECORD_END();
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f383 8811 	msr	BASEPRI, r3
}
 800640a:	bf00      	nop
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	200143dc 	.word	0x200143dc
 8006418:	200143d8 	.word	0x200143d8

0800641c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800641c:	b40f      	push	{r0, r1, r2, r3}
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006424:	f107 0314 	add.w	r3, r7, #20
 8006428:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800642a:	1d3b      	adds	r3, r7, #4
 800642c:	461a      	mov	r2, r3
 800642e:	2100      	movs	r1, #0
 8006430:	6938      	ldr	r0, [r7, #16]
 8006432:	f7fe febb 	bl	80051ac <_VPrintTarget>
  va_end(ParamList);
}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006440:	b004      	add	sp, #16
 8006442:	4770      	bx	lr

08006444 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	@ 0x28
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800644c:	f3ef 8311 	mrs	r3, BASEPRI
 8006450:	f04f 0120 	mov.w	r1, #32
 8006454:	f381 8811 	msr	BASEPRI, r1
 8006458:	617b      	str	r3, [r7, #20]
 800645a:	4827      	ldr	r0, [pc, #156]	@ (80064f8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800645c:	f7fe faa5 	bl	80049aa <_PreparePacket>
 8006460:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006462:	2280      	movs	r2, #128	@ 0x80
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	6938      	ldr	r0, [r7, #16]
 8006468:	f7fe fa66 	bl	8004938 <_EncodeStr>
 800646c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	627b      	str	r3, [r7, #36]	@ 0x24
 8006472:	2301      	movs	r3, #1
 8006474:	623b      	str	r3, [r7, #32]
 8006476:	e00b      	b.n	8006490 <SEGGER_SYSVIEW_Warn+0x4c>
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	b2da      	uxtb	r2, r3
 800647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647e:	1c59      	adds	r1, r3, #1
 8006480:	6279      	str	r1, [r7, #36]	@ 0x24
 8006482:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	09db      	lsrs	r3, r3, #7
 800648e:	623b      	str	r3, [r7, #32]
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	2b7f      	cmp	r3, #127	@ 0x7f
 8006494:	d8f0      	bhi.n	8006478 <SEGGER_SYSVIEW_Warn+0x34>
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	627a      	str	r2, [r7, #36]	@ 0x24
 800649c:	6a3a      	ldr	r2, [r7, #32]
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	2300      	movs	r3, #0
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	e00b      	b.n	80064c8 <SEGGER_SYSVIEW_Warn+0x84>
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	1c59      	adds	r1, r3, #1
 80064b8:	61f9      	str	r1, [r7, #28]
 80064ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	09db      	lsrs	r3, r3, #7
 80064c6:	61bb      	str	r3, [r7, #24]
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80064cc:	d8f0      	bhi.n	80064b0 <SEGGER_SYSVIEW_Warn+0x6c>
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	61fa      	str	r2, [r7, #28]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80064de:	221a      	movs	r2, #26
 80064e0:	68f9      	ldr	r1, [r7, #12]
 80064e2:	6938      	ldr	r0, [r7, #16]
 80064e4:	f7fe fb50 	bl	8004b88 <_SendPacket>
  RECORD_END();
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f383 8811 	msr	BASEPRI, r3
}
 80064ee:	bf00      	nop
 80064f0:	3728      	adds	r7, #40	@ 0x28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	200143dc 	.word	0x200143dc

080064fc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006500:	4b13      	ldr	r3, [pc, #76]	@ (8006550 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006502:	7e1b      	ldrb	r3, [r3, #24]
 8006504:	4619      	mov	r1, r3
 8006506:	4a13      	ldr	r2, [pc, #76]	@ (8006554 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006508:	460b      	mov	r3, r1
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	440b      	add	r3, r1
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	4413      	add	r3, r2
 8006512:	336c      	adds	r3, #108	@ 0x6c
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4b0e      	ldr	r3, [pc, #56]	@ (8006550 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006518:	7e1b      	ldrb	r3, [r3, #24]
 800651a:	4618      	mov	r0, r3
 800651c:	490d      	ldr	r1, [pc, #52]	@ (8006554 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800651e:	4603      	mov	r3, r0
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	4403      	add	r3, r0
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	440b      	add	r3, r1
 8006528:	3370      	adds	r3, #112	@ 0x70
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	429a      	cmp	r2, r3
 800652e:	d00b      	beq.n	8006548 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006530:	4b07      	ldr	r3, [pc, #28]	@ (8006550 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006532:	789b      	ldrb	r3, [r3, #2]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d107      	bne.n	8006548 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006538:	4b05      	ldr	r3, [pc, #20]	@ (8006550 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800653a:	2201      	movs	r2, #1
 800653c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800653e:	f7fe fa41 	bl	80049c4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006542:	4b03      	ldr	r3, [pc, #12]	@ (8006550 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006544:	2200      	movs	r2, #0
 8006546:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006548:	4b01      	ldr	r3, [pc, #4]	@ (8006550 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800654a:	781b      	ldrb	r3, [r3, #0]
}
 800654c:	4618      	mov	r0, r3
 800654e:	bd80      	pop	{r7, pc}
 8006550:	200143ac 	.word	0x200143ac
 8006554:	20012eec 	.word	0x20012eec

08006558 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	2000      	movs	r0, #0
 800656c:	f7fe f8ee 	bl	800474c <SEGGER_RTT_Write>
  return len;
 8006570:	683b      	ldr	r3, [r7, #0]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
	...

0800657c <std>:
 800657c:	2300      	movs	r3, #0
 800657e:	b510      	push	{r4, lr}
 8006580:	4604      	mov	r4, r0
 8006582:	e9c0 3300 	strd	r3, r3, [r0]
 8006586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800658a:	6083      	str	r3, [r0, #8]
 800658c:	8181      	strh	r1, [r0, #12]
 800658e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006590:	81c2      	strh	r2, [r0, #14]
 8006592:	6183      	str	r3, [r0, #24]
 8006594:	4619      	mov	r1, r3
 8006596:	2208      	movs	r2, #8
 8006598:	305c      	adds	r0, #92	@ 0x5c
 800659a:	f000 fa2b 	bl	80069f4 <memset>
 800659e:	4b0d      	ldr	r3, [pc, #52]	@ (80065d4 <std+0x58>)
 80065a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80065a2:	4b0d      	ldr	r3, [pc, #52]	@ (80065d8 <std+0x5c>)
 80065a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80065a6:	4b0d      	ldr	r3, [pc, #52]	@ (80065dc <std+0x60>)
 80065a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065aa:	4b0d      	ldr	r3, [pc, #52]	@ (80065e0 <std+0x64>)
 80065ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80065ae:	4b0d      	ldr	r3, [pc, #52]	@ (80065e4 <std+0x68>)
 80065b0:	6224      	str	r4, [r4, #32]
 80065b2:	429c      	cmp	r4, r3
 80065b4:	d006      	beq.n	80065c4 <std+0x48>
 80065b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065ba:	4294      	cmp	r4, r2
 80065bc:	d002      	beq.n	80065c4 <std+0x48>
 80065be:	33d0      	adds	r3, #208	@ 0xd0
 80065c0:	429c      	cmp	r4, r3
 80065c2:	d105      	bne.n	80065d0 <std+0x54>
 80065c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065cc:	f000 ba78 	b.w	8006ac0 <__retarget_lock_init_recursive>
 80065d0:	bd10      	pop	{r4, pc}
 80065d2:	bf00      	nop
 80065d4:	08006825 	.word	0x08006825
 80065d8:	08006847 	.word	0x08006847
 80065dc:	0800687f 	.word	0x0800687f
 80065e0:	080068a3 	.word	0x080068a3
 80065e4:	200144c0 	.word	0x200144c0

080065e8 <stdio_exit_handler>:
 80065e8:	4a02      	ldr	r2, [pc, #8]	@ (80065f4 <stdio_exit_handler+0xc>)
 80065ea:	4903      	ldr	r1, [pc, #12]	@ (80065f8 <stdio_exit_handler+0x10>)
 80065ec:	4803      	ldr	r0, [pc, #12]	@ (80065fc <stdio_exit_handler+0x14>)
 80065ee:	f000 b869 	b.w	80066c4 <_fwalk_sglue>
 80065f2:	bf00      	nop
 80065f4:	2000001c 	.word	0x2000001c
 80065f8:	080073a9 	.word	0x080073a9
 80065fc:	2000002c 	.word	0x2000002c

08006600 <cleanup_stdio>:
 8006600:	6841      	ldr	r1, [r0, #4]
 8006602:	4b0c      	ldr	r3, [pc, #48]	@ (8006634 <cleanup_stdio+0x34>)
 8006604:	4299      	cmp	r1, r3
 8006606:	b510      	push	{r4, lr}
 8006608:	4604      	mov	r4, r0
 800660a:	d001      	beq.n	8006610 <cleanup_stdio+0x10>
 800660c:	f000 fecc 	bl	80073a8 <_fflush_r>
 8006610:	68a1      	ldr	r1, [r4, #8]
 8006612:	4b09      	ldr	r3, [pc, #36]	@ (8006638 <cleanup_stdio+0x38>)
 8006614:	4299      	cmp	r1, r3
 8006616:	d002      	beq.n	800661e <cleanup_stdio+0x1e>
 8006618:	4620      	mov	r0, r4
 800661a:	f000 fec5 	bl	80073a8 <_fflush_r>
 800661e:	68e1      	ldr	r1, [r4, #12]
 8006620:	4b06      	ldr	r3, [pc, #24]	@ (800663c <cleanup_stdio+0x3c>)
 8006622:	4299      	cmp	r1, r3
 8006624:	d004      	beq.n	8006630 <cleanup_stdio+0x30>
 8006626:	4620      	mov	r0, r4
 8006628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800662c:	f000 bebc 	b.w	80073a8 <_fflush_r>
 8006630:	bd10      	pop	{r4, pc}
 8006632:	bf00      	nop
 8006634:	200144c0 	.word	0x200144c0
 8006638:	20014528 	.word	0x20014528
 800663c:	20014590 	.word	0x20014590

08006640 <global_stdio_init.part.0>:
 8006640:	b510      	push	{r4, lr}
 8006642:	4b0b      	ldr	r3, [pc, #44]	@ (8006670 <global_stdio_init.part.0+0x30>)
 8006644:	4c0b      	ldr	r4, [pc, #44]	@ (8006674 <global_stdio_init.part.0+0x34>)
 8006646:	4a0c      	ldr	r2, [pc, #48]	@ (8006678 <global_stdio_init.part.0+0x38>)
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	4620      	mov	r0, r4
 800664c:	2200      	movs	r2, #0
 800664e:	2104      	movs	r1, #4
 8006650:	f7ff ff94 	bl	800657c <std>
 8006654:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006658:	2201      	movs	r2, #1
 800665a:	2109      	movs	r1, #9
 800665c:	f7ff ff8e 	bl	800657c <std>
 8006660:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006664:	2202      	movs	r2, #2
 8006666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800666a:	2112      	movs	r1, #18
 800666c:	f7ff bf86 	b.w	800657c <std>
 8006670:	200145f8 	.word	0x200145f8
 8006674:	200144c0 	.word	0x200144c0
 8006678:	080065e9 	.word	0x080065e9

0800667c <__sfp_lock_acquire>:
 800667c:	4801      	ldr	r0, [pc, #4]	@ (8006684 <__sfp_lock_acquire+0x8>)
 800667e:	f000 ba20 	b.w	8006ac2 <__retarget_lock_acquire_recursive>
 8006682:	bf00      	nop
 8006684:	20014601 	.word	0x20014601

08006688 <__sfp_lock_release>:
 8006688:	4801      	ldr	r0, [pc, #4]	@ (8006690 <__sfp_lock_release+0x8>)
 800668a:	f000 ba1b 	b.w	8006ac4 <__retarget_lock_release_recursive>
 800668e:	bf00      	nop
 8006690:	20014601 	.word	0x20014601

08006694 <__sinit>:
 8006694:	b510      	push	{r4, lr}
 8006696:	4604      	mov	r4, r0
 8006698:	f7ff fff0 	bl	800667c <__sfp_lock_acquire>
 800669c:	6a23      	ldr	r3, [r4, #32]
 800669e:	b11b      	cbz	r3, 80066a8 <__sinit+0x14>
 80066a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a4:	f7ff bff0 	b.w	8006688 <__sfp_lock_release>
 80066a8:	4b04      	ldr	r3, [pc, #16]	@ (80066bc <__sinit+0x28>)
 80066aa:	6223      	str	r3, [r4, #32]
 80066ac:	4b04      	ldr	r3, [pc, #16]	@ (80066c0 <__sinit+0x2c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1f5      	bne.n	80066a0 <__sinit+0xc>
 80066b4:	f7ff ffc4 	bl	8006640 <global_stdio_init.part.0>
 80066b8:	e7f2      	b.n	80066a0 <__sinit+0xc>
 80066ba:	bf00      	nop
 80066bc:	08006601 	.word	0x08006601
 80066c0:	200145f8 	.word	0x200145f8

080066c4 <_fwalk_sglue>:
 80066c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c8:	4607      	mov	r7, r0
 80066ca:	4688      	mov	r8, r1
 80066cc:	4614      	mov	r4, r2
 80066ce:	2600      	movs	r6, #0
 80066d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066d4:	f1b9 0901 	subs.w	r9, r9, #1
 80066d8:	d505      	bpl.n	80066e6 <_fwalk_sglue+0x22>
 80066da:	6824      	ldr	r4, [r4, #0]
 80066dc:	2c00      	cmp	r4, #0
 80066de:	d1f7      	bne.n	80066d0 <_fwalk_sglue+0xc>
 80066e0:	4630      	mov	r0, r6
 80066e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e6:	89ab      	ldrh	r3, [r5, #12]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d907      	bls.n	80066fc <_fwalk_sglue+0x38>
 80066ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066f0:	3301      	adds	r3, #1
 80066f2:	d003      	beq.n	80066fc <_fwalk_sglue+0x38>
 80066f4:	4629      	mov	r1, r5
 80066f6:	4638      	mov	r0, r7
 80066f8:	47c0      	blx	r8
 80066fa:	4306      	orrs	r6, r0
 80066fc:	3568      	adds	r5, #104	@ 0x68
 80066fe:	e7e9      	b.n	80066d4 <_fwalk_sglue+0x10>

08006700 <_puts_r>:
 8006700:	6a03      	ldr	r3, [r0, #32]
 8006702:	b570      	push	{r4, r5, r6, lr}
 8006704:	6884      	ldr	r4, [r0, #8]
 8006706:	4605      	mov	r5, r0
 8006708:	460e      	mov	r6, r1
 800670a:	b90b      	cbnz	r3, 8006710 <_puts_r+0x10>
 800670c:	f7ff ffc2 	bl	8006694 <__sinit>
 8006710:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006712:	07db      	lsls	r3, r3, #31
 8006714:	d405      	bmi.n	8006722 <_puts_r+0x22>
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	0598      	lsls	r0, r3, #22
 800671a:	d402      	bmi.n	8006722 <_puts_r+0x22>
 800671c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800671e:	f000 f9d0 	bl	8006ac2 <__retarget_lock_acquire_recursive>
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	0719      	lsls	r1, r3, #28
 8006726:	d502      	bpl.n	800672e <_puts_r+0x2e>
 8006728:	6923      	ldr	r3, [r4, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d135      	bne.n	800679a <_puts_r+0x9a>
 800672e:	4621      	mov	r1, r4
 8006730:	4628      	mov	r0, r5
 8006732:	f000 f8f9 	bl	8006928 <__swsetup_r>
 8006736:	b380      	cbz	r0, 800679a <_puts_r+0x9a>
 8006738:	f04f 35ff 	mov.w	r5, #4294967295
 800673c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800673e:	07da      	lsls	r2, r3, #31
 8006740:	d405      	bmi.n	800674e <_puts_r+0x4e>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	059b      	lsls	r3, r3, #22
 8006746:	d402      	bmi.n	800674e <_puts_r+0x4e>
 8006748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800674a:	f000 f9bb 	bl	8006ac4 <__retarget_lock_release_recursive>
 800674e:	4628      	mov	r0, r5
 8006750:	bd70      	pop	{r4, r5, r6, pc}
 8006752:	2b00      	cmp	r3, #0
 8006754:	da04      	bge.n	8006760 <_puts_r+0x60>
 8006756:	69a2      	ldr	r2, [r4, #24]
 8006758:	429a      	cmp	r2, r3
 800675a:	dc17      	bgt.n	800678c <_puts_r+0x8c>
 800675c:	290a      	cmp	r1, #10
 800675e:	d015      	beq.n	800678c <_puts_r+0x8c>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	6022      	str	r2, [r4, #0]
 8006766:	7019      	strb	r1, [r3, #0]
 8006768:	68a3      	ldr	r3, [r4, #8]
 800676a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800676e:	3b01      	subs	r3, #1
 8006770:	60a3      	str	r3, [r4, #8]
 8006772:	2900      	cmp	r1, #0
 8006774:	d1ed      	bne.n	8006752 <_puts_r+0x52>
 8006776:	2b00      	cmp	r3, #0
 8006778:	da11      	bge.n	800679e <_puts_r+0x9e>
 800677a:	4622      	mov	r2, r4
 800677c:	210a      	movs	r1, #10
 800677e:	4628      	mov	r0, r5
 8006780:	f000 f893 	bl	80068aa <__swbuf_r>
 8006784:	3001      	adds	r0, #1
 8006786:	d0d7      	beq.n	8006738 <_puts_r+0x38>
 8006788:	250a      	movs	r5, #10
 800678a:	e7d7      	b.n	800673c <_puts_r+0x3c>
 800678c:	4622      	mov	r2, r4
 800678e:	4628      	mov	r0, r5
 8006790:	f000 f88b 	bl	80068aa <__swbuf_r>
 8006794:	3001      	adds	r0, #1
 8006796:	d1e7      	bne.n	8006768 <_puts_r+0x68>
 8006798:	e7ce      	b.n	8006738 <_puts_r+0x38>
 800679a:	3e01      	subs	r6, #1
 800679c:	e7e4      	b.n	8006768 <_puts_r+0x68>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	6022      	str	r2, [r4, #0]
 80067a4:	220a      	movs	r2, #10
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e7ee      	b.n	8006788 <_puts_r+0x88>
	...

080067ac <puts>:
 80067ac:	4b02      	ldr	r3, [pc, #8]	@ (80067b8 <puts+0xc>)
 80067ae:	4601      	mov	r1, r0
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	f7ff bfa5 	b.w	8006700 <_puts_r>
 80067b6:	bf00      	nop
 80067b8:	20000028 	.word	0x20000028

080067bc <sniprintf>:
 80067bc:	b40c      	push	{r2, r3}
 80067be:	b530      	push	{r4, r5, lr}
 80067c0:	4b17      	ldr	r3, [pc, #92]	@ (8006820 <sniprintf+0x64>)
 80067c2:	1e0c      	subs	r4, r1, #0
 80067c4:	681d      	ldr	r5, [r3, #0]
 80067c6:	b09d      	sub	sp, #116	@ 0x74
 80067c8:	da08      	bge.n	80067dc <sniprintf+0x20>
 80067ca:	238b      	movs	r3, #139	@ 0x8b
 80067cc:	602b      	str	r3, [r5, #0]
 80067ce:	f04f 30ff 	mov.w	r0, #4294967295
 80067d2:	b01d      	add	sp, #116	@ 0x74
 80067d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067d8:	b002      	add	sp, #8
 80067da:	4770      	bx	lr
 80067dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80067e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80067e4:	bf14      	ite	ne
 80067e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80067ea:	4623      	moveq	r3, r4
 80067ec:	9304      	str	r3, [sp, #16]
 80067ee:	9307      	str	r3, [sp, #28]
 80067f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067f4:	9002      	str	r0, [sp, #8]
 80067f6:	9006      	str	r0, [sp, #24]
 80067f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80067fc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80067fe:	ab21      	add	r3, sp, #132	@ 0x84
 8006800:	a902      	add	r1, sp, #8
 8006802:	4628      	mov	r0, r5
 8006804:	9301      	str	r3, [sp, #4]
 8006806:	f000 fac1 	bl	8006d8c <_svfiprintf_r>
 800680a:	1c43      	adds	r3, r0, #1
 800680c:	bfbc      	itt	lt
 800680e:	238b      	movlt	r3, #139	@ 0x8b
 8006810:	602b      	strlt	r3, [r5, #0]
 8006812:	2c00      	cmp	r4, #0
 8006814:	d0dd      	beq.n	80067d2 <sniprintf+0x16>
 8006816:	9b02      	ldr	r3, [sp, #8]
 8006818:	2200      	movs	r2, #0
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	e7d9      	b.n	80067d2 <sniprintf+0x16>
 800681e:	bf00      	nop
 8006820:	20000028 	.word	0x20000028

08006824 <__sread>:
 8006824:	b510      	push	{r4, lr}
 8006826:	460c      	mov	r4, r1
 8006828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800682c:	f000 f90c 	bl	8006a48 <_read_r>
 8006830:	2800      	cmp	r0, #0
 8006832:	bfab      	itete	ge
 8006834:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006836:	89a3      	ldrhlt	r3, [r4, #12]
 8006838:	181b      	addge	r3, r3, r0
 800683a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800683e:	bfac      	ite	ge
 8006840:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006842:	81a3      	strhlt	r3, [r4, #12]
 8006844:	bd10      	pop	{r4, pc}

08006846 <__swrite>:
 8006846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800684a:	461f      	mov	r7, r3
 800684c:	898b      	ldrh	r3, [r1, #12]
 800684e:	05db      	lsls	r3, r3, #23
 8006850:	4605      	mov	r5, r0
 8006852:	460c      	mov	r4, r1
 8006854:	4616      	mov	r6, r2
 8006856:	d505      	bpl.n	8006864 <__swrite+0x1e>
 8006858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800685c:	2302      	movs	r3, #2
 800685e:	2200      	movs	r2, #0
 8006860:	f000 f8e0 	bl	8006a24 <_lseek_r>
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800686a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800686e:	81a3      	strh	r3, [r4, #12]
 8006870:	4632      	mov	r2, r6
 8006872:	463b      	mov	r3, r7
 8006874:	4628      	mov	r0, r5
 8006876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800687a:	f7ff be6d 	b.w	8006558 <_write_r>

0800687e <__sseek>:
 800687e:	b510      	push	{r4, lr}
 8006880:	460c      	mov	r4, r1
 8006882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006886:	f000 f8cd 	bl	8006a24 <_lseek_r>
 800688a:	1c43      	adds	r3, r0, #1
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	bf15      	itete	ne
 8006890:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006892:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006896:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800689a:	81a3      	strheq	r3, [r4, #12]
 800689c:	bf18      	it	ne
 800689e:	81a3      	strhne	r3, [r4, #12]
 80068a0:	bd10      	pop	{r4, pc}

080068a2 <__sclose>:
 80068a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a6:	f000 b8ad 	b.w	8006a04 <_close_r>

080068aa <__swbuf_r>:
 80068aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ac:	460e      	mov	r6, r1
 80068ae:	4614      	mov	r4, r2
 80068b0:	4605      	mov	r5, r0
 80068b2:	b118      	cbz	r0, 80068bc <__swbuf_r+0x12>
 80068b4:	6a03      	ldr	r3, [r0, #32]
 80068b6:	b90b      	cbnz	r3, 80068bc <__swbuf_r+0x12>
 80068b8:	f7ff feec 	bl	8006694 <__sinit>
 80068bc:	69a3      	ldr	r3, [r4, #24]
 80068be:	60a3      	str	r3, [r4, #8]
 80068c0:	89a3      	ldrh	r3, [r4, #12]
 80068c2:	071a      	lsls	r2, r3, #28
 80068c4:	d501      	bpl.n	80068ca <__swbuf_r+0x20>
 80068c6:	6923      	ldr	r3, [r4, #16]
 80068c8:	b943      	cbnz	r3, 80068dc <__swbuf_r+0x32>
 80068ca:	4621      	mov	r1, r4
 80068cc:	4628      	mov	r0, r5
 80068ce:	f000 f82b 	bl	8006928 <__swsetup_r>
 80068d2:	b118      	cbz	r0, 80068dc <__swbuf_r+0x32>
 80068d4:	f04f 37ff 	mov.w	r7, #4294967295
 80068d8:	4638      	mov	r0, r7
 80068da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	6922      	ldr	r2, [r4, #16]
 80068e0:	1a98      	subs	r0, r3, r2
 80068e2:	6963      	ldr	r3, [r4, #20]
 80068e4:	b2f6      	uxtb	r6, r6
 80068e6:	4283      	cmp	r3, r0
 80068e8:	4637      	mov	r7, r6
 80068ea:	dc05      	bgt.n	80068f8 <__swbuf_r+0x4e>
 80068ec:	4621      	mov	r1, r4
 80068ee:	4628      	mov	r0, r5
 80068f0:	f000 fd5a 	bl	80073a8 <_fflush_r>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d1ed      	bne.n	80068d4 <__swbuf_r+0x2a>
 80068f8:	68a3      	ldr	r3, [r4, #8]
 80068fa:	3b01      	subs	r3, #1
 80068fc:	60a3      	str	r3, [r4, #8]
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	6022      	str	r2, [r4, #0]
 8006904:	701e      	strb	r6, [r3, #0]
 8006906:	6962      	ldr	r2, [r4, #20]
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	429a      	cmp	r2, r3
 800690c:	d004      	beq.n	8006918 <__swbuf_r+0x6e>
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	07db      	lsls	r3, r3, #31
 8006912:	d5e1      	bpl.n	80068d8 <__swbuf_r+0x2e>
 8006914:	2e0a      	cmp	r6, #10
 8006916:	d1df      	bne.n	80068d8 <__swbuf_r+0x2e>
 8006918:	4621      	mov	r1, r4
 800691a:	4628      	mov	r0, r5
 800691c:	f000 fd44 	bl	80073a8 <_fflush_r>
 8006920:	2800      	cmp	r0, #0
 8006922:	d0d9      	beq.n	80068d8 <__swbuf_r+0x2e>
 8006924:	e7d6      	b.n	80068d4 <__swbuf_r+0x2a>
	...

08006928 <__swsetup_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4b29      	ldr	r3, [pc, #164]	@ (80069d0 <__swsetup_r+0xa8>)
 800692c:	4605      	mov	r5, r0
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	460c      	mov	r4, r1
 8006932:	b118      	cbz	r0, 800693c <__swsetup_r+0x14>
 8006934:	6a03      	ldr	r3, [r0, #32]
 8006936:	b90b      	cbnz	r3, 800693c <__swsetup_r+0x14>
 8006938:	f7ff feac 	bl	8006694 <__sinit>
 800693c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006940:	0719      	lsls	r1, r3, #28
 8006942:	d422      	bmi.n	800698a <__swsetup_r+0x62>
 8006944:	06da      	lsls	r2, r3, #27
 8006946:	d407      	bmi.n	8006958 <__swsetup_r+0x30>
 8006948:	2209      	movs	r2, #9
 800694a:	602a      	str	r2, [r5, #0]
 800694c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006950:	81a3      	strh	r3, [r4, #12]
 8006952:	f04f 30ff 	mov.w	r0, #4294967295
 8006956:	e033      	b.n	80069c0 <__swsetup_r+0x98>
 8006958:	0758      	lsls	r0, r3, #29
 800695a:	d512      	bpl.n	8006982 <__swsetup_r+0x5a>
 800695c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800695e:	b141      	cbz	r1, 8006972 <__swsetup_r+0x4a>
 8006960:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006964:	4299      	cmp	r1, r3
 8006966:	d002      	beq.n	800696e <__swsetup_r+0x46>
 8006968:	4628      	mov	r0, r5
 800696a:	f000 f8bb 	bl	8006ae4 <_free_r>
 800696e:	2300      	movs	r3, #0
 8006970:	6363      	str	r3, [r4, #52]	@ 0x34
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006978:	81a3      	strh	r3, [r4, #12]
 800697a:	2300      	movs	r3, #0
 800697c:	6063      	str	r3, [r4, #4]
 800697e:	6923      	ldr	r3, [r4, #16]
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	89a3      	ldrh	r3, [r4, #12]
 8006984:	f043 0308 	orr.w	r3, r3, #8
 8006988:	81a3      	strh	r3, [r4, #12]
 800698a:	6923      	ldr	r3, [r4, #16]
 800698c:	b94b      	cbnz	r3, 80069a2 <__swsetup_r+0x7a>
 800698e:	89a3      	ldrh	r3, [r4, #12]
 8006990:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006998:	d003      	beq.n	80069a2 <__swsetup_r+0x7a>
 800699a:	4621      	mov	r1, r4
 800699c:	4628      	mov	r0, r5
 800699e:	f000 fd51 	bl	8007444 <__smakebuf_r>
 80069a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069a6:	f013 0201 	ands.w	r2, r3, #1
 80069aa:	d00a      	beq.n	80069c2 <__swsetup_r+0x9a>
 80069ac:	2200      	movs	r2, #0
 80069ae:	60a2      	str	r2, [r4, #8]
 80069b0:	6962      	ldr	r2, [r4, #20]
 80069b2:	4252      	negs	r2, r2
 80069b4:	61a2      	str	r2, [r4, #24]
 80069b6:	6922      	ldr	r2, [r4, #16]
 80069b8:	b942      	cbnz	r2, 80069cc <__swsetup_r+0xa4>
 80069ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80069be:	d1c5      	bne.n	800694c <__swsetup_r+0x24>
 80069c0:	bd38      	pop	{r3, r4, r5, pc}
 80069c2:	0799      	lsls	r1, r3, #30
 80069c4:	bf58      	it	pl
 80069c6:	6962      	ldrpl	r2, [r4, #20]
 80069c8:	60a2      	str	r2, [r4, #8]
 80069ca:	e7f4      	b.n	80069b6 <__swsetup_r+0x8e>
 80069cc:	2000      	movs	r0, #0
 80069ce:	e7f7      	b.n	80069c0 <__swsetup_r+0x98>
 80069d0:	20000028 	.word	0x20000028

080069d4 <memcmp>:
 80069d4:	b510      	push	{r4, lr}
 80069d6:	3901      	subs	r1, #1
 80069d8:	4402      	add	r2, r0
 80069da:	4290      	cmp	r0, r2
 80069dc:	d101      	bne.n	80069e2 <memcmp+0xe>
 80069de:	2000      	movs	r0, #0
 80069e0:	e005      	b.n	80069ee <memcmp+0x1a>
 80069e2:	7803      	ldrb	r3, [r0, #0]
 80069e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80069e8:	42a3      	cmp	r3, r4
 80069ea:	d001      	beq.n	80069f0 <memcmp+0x1c>
 80069ec:	1b18      	subs	r0, r3, r4
 80069ee:	bd10      	pop	{r4, pc}
 80069f0:	3001      	adds	r0, #1
 80069f2:	e7f2      	b.n	80069da <memcmp+0x6>

080069f4 <memset>:
 80069f4:	4402      	add	r2, r0
 80069f6:	4603      	mov	r3, r0
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d100      	bne.n	80069fe <memset+0xa>
 80069fc:	4770      	bx	lr
 80069fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006a02:	e7f9      	b.n	80069f8 <memset+0x4>

08006a04 <_close_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	4d06      	ldr	r5, [pc, #24]	@ (8006a20 <_close_r+0x1c>)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	602b      	str	r3, [r5, #0]
 8006a10:	f7f9 ff4f 	bl	80008b2 <_close>
 8006a14:	1c43      	adds	r3, r0, #1
 8006a16:	d102      	bne.n	8006a1e <_close_r+0x1a>
 8006a18:	682b      	ldr	r3, [r5, #0]
 8006a1a:	b103      	cbz	r3, 8006a1e <_close_r+0x1a>
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	bd38      	pop	{r3, r4, r5, pc}
 8006a20:	200145fc 	.word	0x200145fc

08006a24 <_lseek_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	4d07      	ldr	r5, [pc, #28]	@ (8006a44 <_lseek_r+0x20>)
 8006a28:	4604      	mov	r4, r0
 8006a2a:	4608      	mov	r0, r1
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	2200      	movs	r2, #0
 8006a30:	602a      	str	r2, [r5, #0]
 8006a32:	461a      	mov	r2, r3
 8006a34:	f7f9 ff64 	bl	8000900 <_lseek>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d102      	bne.n	8006a42 <_lseek_r+0x1e>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	b103      	cbz	r3, 8006a42 <_lseek_r+0x1e>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	200145fc 	.word	0x200145fc

08006a48 <_read_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	4d07      	ldr	r5, [pc, #28]	@ (8006a68 <_read_r+0x20>)
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	4608      	mov	r0, r1
 8006a50:	4611      	mov	r1, r2
 8006a52:	2200      	movs	r2, #0
 8006a54:	602a      	str	r2, [r5, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	f7f9 ff0e 	bl	8000878 <_read>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d102      	bne.n	8006a66 <_read_r+0x1e>
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	b103      	cbz	r3, 8006a66 <_read_r+0x1e>
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	200145fc 	.word	0x200145fc

08006a6c <__errno>:
 8006a6c:	4b01      	ldr	r3, [pc, #4]	@ (8006a74 <__errno+0x8>)
 8006a6e:	6818      	ldr	r0, [r3, #0]
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20000028 	.word	0x20000028

08006a78 <__libc_init_array>:
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	4d0d      	ldr	r5, [pc, #52]	@ (8006ab0 <__libc_init_array+0x38>)
 8006a7c:	4c0d      	ldr	r4, [pc, #52]	@ (8006ab4 <__libc_init_array+0x3c>)
 8006a7e:	1b64      	subs	r4, r4, r5
 8006a80:	10a4      	asrs	r4, r4, #2
 8006a82:	2600      	movs	r6, #0
 8006a84:	42a6      	cmp	r6, r4
 8006a86:	d109      	bne.n	8006a9c <__libc_init_array+0x24>
 8006a88:	4d0b      	ldr	r5, [pc, #44]	@ (8006ab8 <__libc_init_array+0x40>)
 8006a8a:	4c0c      	ldr	r4, [pc, #48]	@ (8006abc <__libc_init_array+0x44>)
 8006a8c:	f000 fd98 	bl	80075c0 <_init>
 8006a90:	1b64      	subs	r4, r4, r5
 8006a92:	10a4      	asrs	r4, r4, #2
 8006a94:	2600      	movs	r6, #0
 8006a96:	42a6      	cmp	r6, r4
 8006a98:	d105      	bne.n	8006aa6 <__libc_init_array+0x2e>
 8006a9a:	bd70      	pop	{r4, r5, r6, pc}
 8006a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa0:	4798      	blx	r3
 8006aa2:	3601      	adds	r6, #1
 8006aa4:	e7ee      	b.n	8006a84 <__libc_init_array+0xc>
 8006aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aaa:	4798      	blx	r3
 8006aac:	3601      	adds	r6, #1
 8006aae:	e7f2      	b.n	8006a96 <__libc_init_array+0x1e>
 8006ab0:	0800777c 	.word	0x0800777c
 8006ab4:	0800777c 	.word	0x0800777c
 8006ab8:	0800777c 	.word	0x0800777c
 8006abc:	08007780 	.word	0x08007780

08006ac0 <__retarget_lock_init_recursive>:
 8006ac0:	4770      	bx	lr

08006ac2 <__retarget_lock_acquire_recursive>:
 8006ac2:	4770      	bx	lr

08006ac4 <__retarget_lock_release_recursive>:
 8006ac4:	4770      	bx	lr

08006ac6 <memcpy>:
 8006ac6:	440a      	add	r2, r1
 8006ac8:	4291      	cmp	r1, r2
 8006aca:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ace:	d100      	bne.n	8006ad2 <memcpy+0xc>
 8006ad0:	4770      	bx	lr
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ad8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006adc:	4291      	cmp	r1, r2
 8006ade:	d1f9      	bne.n	8006ad4 <memcpy+0xe>
 8006ae0:	bd10      	pop	{r4, pc}
	...

08006ae4 <_free_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	2900      	cmp	r1, #0
 8006aea:	d041      	beq.n	8006b70 <_free_r+0x8c>
 8006aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006af0:	1f0c      	subs	r4, r1, #4
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	bfb8      	it	lt
 8006af6:	18e4      	addlt	r4, r4, r3
 8006af8:	f000 f8e0 	bl	8006cbc <__malloc_lock>
 8006afc:	4a1d      	ldr	r2, [pc, #116]	@ (8006b74 <_free_r+0x90>)
 8006afe:	6813      	ldr	r3, [r2, #0]
 8006b00:	b933      	cbnz	r3, 8006b10 <_free_r+0x2c>
 8006b02:	6063      	str	r3, [r4, #4]
 8006b04:	6014      	str	r4, [r2, #0]
 8006b06:	4628      	mov	r0, r5
 8006b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b0c:	f000 b8dc 	b.w	8006cc8 <__malloc_unlock>
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	d908      	bls.n	8006b26 <_free_r+0x42>
 8006b14:	6820      	ldr	r0, [r4, #0]
 8006b16:	1821      	adds	r1, r4, r0
 8006b18:	428b      	cmp	r3, r1
 8006b1a:	bf01      	itttt	eq
 8006b1c:	6819      	ldreq	r1, [r3, #0]
 8006b1e:	685b      	ldreq	r3, [r3, #4]
 8006b20:	1809      	addeq	r1, r1, r0
 8006b22:	6021      	streq	r1, [r4, #0]
 8006b24:	e7ed      	b.n	8006b02 <_free_r+0x1e>
 8006b26:	461a      	mov	r2, r3
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	b10b      	cbz	r3, 8006b30 <_free_r+0x4c>
 8006b2c:	42a3      	cmp	r3, r4
 8006b2e:	d9fa      	bls.n	8006b26 <_free_r+0x42>
 8006b30:	6811      	ldr	r1, [r2, #0]
 8006b32:	1850      	adds	r0, r2, r1
 8006b34:	42a0      	cmp	r0, r4
 8006b36:	d10b      	bne.n	8006b50 <_free_r+0x6c>
 8006b38:	6820      	ldr	r0, [r4, #0]
 8006b3a:	4401      	add	r1, r0
 8006b3c:	1850      	adds	r0, r2, r1
 8006b3e:	4283      	cmp	r3, r0
 8006b40:	6011      	str	r1, [r2, #0]
 8006b42:	d1e0      	bne.n	8006b06 <_free_r+0x22>
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	6053      	str	r3, [r2, #4]
 8006b4a:	4408      	add	r0, r1
 8006b4c:	6010      	str	r0, [r2, #0]
 8006b4e:	e7da      	b.n	8006b06 <_free_r+0x22>
 8006b50:	d902      	bls.n	8006b58 <_free_r+0x74>
 8006b52:	230c      	movs	r3, #12
 8006b54:	602b      	str	r3, [r5, #0]
 8006b56:	e7d6      	b.n	8006b06 <_free_r+0x22>
 8006b58:	6820      	ldr	r0, [r4, #0]
 8006b5a:	1821      	adds	r1, r4, r0
 8006b5c:	428b      	cmp	r3, r1
 8006b5e:	bf04      	itt	eq
 8006b60:	6819      	ldreq	r1, [r3, #0]
 8006b62:	685b      	ldreq	r3, [r3, #4]
 8006b64:	6063      	str	r3, [r4, #4]
 8006b66:	bf04      	itt	eq
 8006b68:	1809      	addeq	r1, r1, r0
 8006b6a:	6021      	streq	r1, [r4, #0]
 8006b6c:	6054      	str	r4, [r2, #4]
 8006b6e:	e7ca      	b.n	8006b06 <_free_r+0x22>
 8006b70:	bd38      	pop	{r3, r4, r5, pc}
 8006b72:	bf00      	nop
 8006b74:	20014608 	.word	0x20014608

08006b78 <sbrk_aligned>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	4e0f      	ldr	r6, [pc, #60]	@ (8006bb8 <sbrk_aligned+0x40>)
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	6831      	ldr	r1, [r6, #0]
 8006b80:	4605      	mov	r5, r0
 8006b82:	b911      	cbnz	r1, 8006b8a <sbrk_aligned+0x12>
 8006b84:	f000 fcd6 	bl	8007534 <_sbrk_r>
 8006b88:	6030      	str	r0, [r6, #0]
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	f000 fcd1 	bl	8007534 <_sbrk_r>
 8006b92:	1c43      	adds	r3, r0, #1
 8006b94:	d103      	bne.n	8006b9e <sbrk_aligned+0x26>
 8006b96:	f04f 34ff 	mov.w	r4, #4294967295
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	bd70      	pop	{r4, r5, r6, pc}
 8006b9e:	1cc4      	adds	r4, r0, #3
 8006ba0:	f024 0403 	bic.w	r4, r4, #3
 8006ba4:	42a0      	cmp	r0, r4
 8006ba6:	d0f8      	beq.n	8006b9a <sbrk_aligned+0x22>
 8006ba8:	1a21      	subs	r1, r4, r0
 8006baa:	4628      	mov	r0, r5
 8006bac:	f000 fcc2 	bl	8007534 <_sbrk_r>
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	d1f2      	bne.n	8006b9a <sbrk_aligned+0x22>
 8006bb4:	e7ef      	b.n	8006b96 <sbrk_aligned+0x1e>
 8006bb6:	bf00      	nop
 8006bb8:	20014604 	.word	0x20014604

08006bbc <_malloc_r>:
 8006bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc0:	1ccd      	adds	r5, r1, #3
 8006bc2:	f025 0503 	bic.w	r5, r5, #3
 8006bc6:	3508      	adds	r5, #8
 8006bc8:	2d0c      	cmp	r5, #12
 8006bca:	bf38      	it	cc
 8006bcc:	250c      	movcc	r5, #12
 8006bce:	2d00      	cmp	r5, #0
 8006bd0:	4606      	mov	r6, r0
 8006bd2:	db01      	blt.n	8006bd8 <_malloc_r+0x1c>
 8006bd4:	42a9      	cmp	r1, r5
 8006bd6:	d904      	bls.n	8006be2 <_malloc_r+0x26>
 8006bd8:	230c      	movs	r3, #12
 8006bda:	6033      	str	r3, [r6, #0]
 8006bdc:	2000      	movs	r0, #0
 8006bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006be2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006cb8 <_malloc_r+0xfc>
 8006be6:	f000 f869 	bl	8006cbc <__malloc_lock>
 8006bea:	f8d8 3000 	ldr.w	r3, [r8]
 8006bee:	461c      	mov	r4, r3
 8006bf0:	bb44      	cbnz	r4, 8006c44 <_malloc_r+0x88>
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	f7ff ffbf 	bl	8006b78 <sbrk_aligned>
 8006bfa:	1c43      	adds	r3, r0, #1
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	d158      	bne.n	8006cb2 <_malloc_r+0xf6>
 8006c00:	f8d8 4000 	ldr.w	r4, [r8]
 8006c04:	4627      	mov	r7, r4
 8006c06:	2f00      	cmp	r7, #0
 8006c08:	d143      	bne.n	8006c92 <_malloc_r+0xd6>
 8006c0a:	2c00      	cmp	r4, #0
 8006c0c:	d04b      	beq.n	8006ca6 <_malloc_r+0xea>
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	4639      	mov	r1, r7
 8006c12:	4630      	mov	r0, r6
 8006c14:	eb04 0903 	add.w	r9, r4, r3
 8006c18:	f000 fc8c 	bl	8007534 <_sbrk_r>
 8006c1c:	4581      	cmp	r9, r0
 8006c1e:	d142      	bne.n	8006ca6 <_malloc_r+0xea>
 8006c20:	6821      	ldr	r1, [r4, #0]
 8006c22:	1a6d      	subs	r5, r5, r1
 8006c24:	4629      	mov	r1, r5
 8006c26:	4630      	mov	r0, r6
 8006c28:	f7ff ffa6 	bl	8006b78 <sbrk_aligned>
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	d03a      	beq.n	8006ca6 <_malloc_r+0xea>
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	442b      	add	r3, r5
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	f8d8 3000 	ldr.w	r3, [r8]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	bb62      	cbnz	r2, 8006c98 <_malloc_r+0xdc>
 8006c3e:	f8c8 7000 	str.w	r7, [r8]
 8006c42:	e00f      	b.n	8006c64 <_malloc_r+0xa8>
 8006c44:	6822      	ldr	r2, [r4, #0]
 8006c46:	1b52      	subs	r2, r2, r5
 8006c48:	d420      	bmi.n	8006c8c <_malloc_r+0xd0>
 8006c4a:	2a0b      	cmp	r2, #11
 8006c4c:	d917      	bls.n	8006c7e <_malloc_r+0xc2>
 8006c4e:	1961      	adds	r1, r4, r5
 8006c50:	42a3      	cmp	r3, r4
 8006c52:	6025      	str	r5, [r4, #0]
 8006c54:	bf18      	it	ne
 8006c56:	6059      	strne	r1, [r3, #4]
 8006c58:	6863      	ldr	r3, [r4, #4]
 8006c5a:	bf08      	it	eq
 8006c5c:	f8c8 1000 	streq.w	r1, [r8]
 8006c60:	5162      	str	r2, [r4, r5]
 8006c62:	604b      	str	r3, [r1, #4]
 8006c64:	4630      	mov	r0, r6
 8006c66:	f000 f82f 	bl	8006cc8 <__malloc_unlock>
 8006c6a:	f104 000b 	add.w	r0, r4, #11
 8006c6e:	1d23      	adds	r3, r4, #4
 8006c70:	f020 0007 	bic.w	r0, r0, #7
 8006c74:	1ac2      	subs	r2, r0, r3
 8006c76:	bf1c      	itt	ne
 8006c78:	1a1b      	subne	r3, r3, r0
 8006c7a:	50a3      	strne	r3, [r4, r2]
 8006c7c:	e7af      	b.n	8006bde <_malloc_r+0x22>
 8006c7e:	6862      	ldr	r2, [r4, #4]
 8006c80:	42a3      	cmp	r3, r4
 8006c82:	bf0c      	ite	eq
 8006c84:	f8c8 2000 	streq.w	r2, [r8]
 8006c88:	605a      	strne	r2, [r3, #4]
 8006c8a:	e7eb      	b.n	8006c64 <_malloc_r+0xa8>
 8006c8c:	4623      	mov	r3, r4
 8006c8e:	6864      	ldr	r4, [r4, #4]
 8006c90:	e7ae      	b.n	8006bf0 <_malloc_r+0x34>
 8006c92:	463c      	mov	r4, r7
 8006c94:	687f      	ldr	r7, [r7, #4]
 8006c96:	e7b6      	b.n	8006c06 <_malloc_r+0x4a>
 8006c98:	461a      	mov	r2, r3
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	42a3      	cmp	r3, r4
 8006c9e:	d1fb      	bne.n	8006c98 <_malloc_r+0xdc>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	6053      	str	r3, [r2, #4]
 8006ca4:	e7de      	b.n	8006c64 <_malloc_r+0xa8>
 8006ca6:	230c      	movs	r3, #12
 8006ca8:	6033      	str	r3, [r6, #0]
 8006caa:	4630      	mov	r0, r6
 8006cac:	f000 f80c 	bl	8006cc8 <__malloc_unlock>
 8006cb0:	e794      	b.n	8006bdc <_malloc_r+0x20>
 8006cb2:	6005      	str	r5, [r0, #0]
 8006cb4:	e7d6      	b.n	8006c64 <_malloc_r+0xa8>
 8006cb6:	bf00      	nop
 8006cb8:	20014608 	.word	0x20014608

08006cbc <__malloc_lock>:
 8006cbc:	4801      	ldr	r0, [pc, #4]	@ (8006cc4 <__malloc_lock+0x8>)
 8006cbe:	f7ff bf00 	b.w	8006ac2 <__retarget_lock_acquire_recursive>
 8006cc2:	bf00      	nop
 8006cc4:	20014600 	.word	0x20014600

08006cc8 <__malloc_unlock>:
 8006cc8:	4801      	ldr	r0, [pc, #4]	@ (8006cd0 <__malloc_unlock+0x8>)
 8006cca:	f7ff befb 	b.w	8006ac4 <__retarget_lock_release_recursive>
 8006cce:	bf00      	nop
 8006cd0:	20014600 	.word	0x20014600

08006cd4 <__ssputs_r>:
 8006cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd8:	688e      	ldr	r6, [r1, #8]
 8006cda:	461f      	mov	r7, r3
 8006cdc:	42be      	cmp	r6, r7
 8006cde:	680b      	ldr	r3, [r1, #0]
 8006ce0:	4682      	mov	sl, r0
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	4690      	mov	r8, r2
 8006ce6:	d82d      	bhi.n	8006d44 <__ssputs_r+0x70>
 8006ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006cf0:	d026      	beq.n	8006d40 <__ssputs_r+0x6c>
 8006cf2:	6965      	ldr	r5, [r4, #20]
 8006cf4:	6909      	ldr	r1, [r1, #16]
 8006cf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cfa:	eba3 0901 	sub.w	r9, r3, r1
 8006cfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d02:	1c7b      	adds	r3, r7, #1
 8006d04:	444b      	add	r3, r9
 8006d06:	106d      	asrs	r5, r5, #1
 8006d08:	429d      	cmp	r5, r3
 8006d0a:	bf38      	it	cc
 8006d0c:	461d      	movcc	r5, r3
 8006d0e:	0553      	lsls	r3, r2, #21
 8006d10:	d527      	bpl.n	8006d62 <__ssputs_r+0x8e>
 8006d12:	4629      	mov	r1, r5
 8006d14:	f7ff ff52 	bl	8006bbc <_malloc_r>
 8006d18:	4606      	mov	r6, r0
 8006d1a:	b360      	cbz	r0, 8006d76 <__ssputs_r+0xa2>
 8006d1c:	6921      	ldr	r1, [r4, #16]
 8006d1e:	464a      	mov	r2, r9
 8006d20:	f7ff fed1 	bl	8006ac6 <memcpy>
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d2e:	81a3      	strh	r3, [r4, #12]
 8006d30:	6126      	str	r6, [r4, #16]
 8006d32:	6165      	str	r5, [r4, #20]
 8006d34:	444e      	add	r6, r9
 8006d36:	eba5 0509 	sub.w	r5, r5, r9
 8006d3a:	6026      	str	r6, [r4, #0]
 8006d3c:	60a5      	str	r5, [r4, #8]
 8006d3e:	463e      	mov	r6, r7
 8006d40:	42be      	cmp	r6, r7
 8006d42:	d900      	bls.n	8006d46 <__ssputs_r+0x72>
 8006d44:	463e      	mov	r6, r7
 8006d46:	6820      	ldr	r0, [r4, #0]
 8006d48:	4632      	mov	r2, r6
 8006d4a:	4641      	mov	r1, r8
 8006d4c:	f000 fbb6 	bl	80074bc <memmove>
 8006d50:	68a3      	ldr	r3, [r4, #8]
 8006d52:	1b9b      	subs	r3, r3, r6
 8006d54:	60a3      	str	r3, [r4, #8]
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	4433      	add	r3, r6
 8006d5a:	6023      	str	r3, [r4, #0]
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d62:	462a      	mov	r2, r5
 8006d64:	f000 fbf6 	bl	8007554 <_realloc_r>
 8006d68:	4606      	mov	r6, r0
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d1e0      	bne.n	8006d30 <__ssputs_r+0x5c>
 8006d6e:	6921      	ldr	r1, [r4, #16]
 8006d70:	4650      	mov	r0, sl
 8006d72:	f7ff feb7 	bl	8006ae4 <_free_r>
 8006d76:	230c      	movs	r3, #12
 8006d78:	f8ca 3000 	str.w	r3, [sl]
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d82:	81a3      	strh	r3, [r4, #12]
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	e7e9      	b.n	8006d5e <__ssputs_r+0x8a>
	...

08006d8c <_svfiprintf_r>:
 8006d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d90:	4698      	mov	r8, r3
 8006d92:	898b      	ldrh	r3, [r1, #12]
 8006d94:	061b      	lsls	r3, r3, #24
 8006d96:	b09d      	sub	sp, #116	@ 0x74
 8006d98:	4607      	mov	r7, r0
 8006d9a:	460d      	mov	r5, r1
 8006d9c:	4614      	mov	r4, r2
 8006d9e:	d510      	bpl.n	8006dc2 <_svfiprintf_r+0x36>
 8006da0:	690b      	ldr	r3, [r1, #16]
 8006da2:	b973      	cbnz	r3, 8006dc2 <_svfiprintf_r+0x36>
 8006da4:	2140      	movs	r1, #64	@ 0x40
 8006da6:	f7ff ff09 	bl	8006bbc <_malloc_r>
 8006daa:	6028      	str	r0, [r5, #0]
 8006dac:	6128      	str	r0, [r5, #16]
 8006dae:	b930      	cbnz	r0, 8006dbe <_svfiprintf_r+0x32>
 8006db0:	230c      	movs	r3, #12
 8006db2:	603b      	str	r3, [r7, #0]
 8006db4:	f04f 30ff 	mov.w	r0, #4294967295
 8006db8:	b01d      	add	sp, #116	@ 0x74
 8006dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbe:	2340      	movs	r3, #64	@ 0x40
 8006dc0:	616b      	str	r3, [r5, #20]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dc6:	2320      	movs	r3, #32
 8006dc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006dcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dd0:	2330      	movs	r3, #48	@ 0x30
 8006dd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006f70 <_svfiprintf_r+0x1e4>
 8006dd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006dda:	f04f 0901 	mov.w	r9, #1
 8006dde:	4623      	mov	r3, r4
 8006de0:	469a      	mov	sl, r3
 8006de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006de6:	b10a      	cbz	r2, 8006dec <_svfiprintf_r+0x60>
 8006de8:	2a25      	cmp	r2, #37	@ 0x25
 8006dea:	d1f9      	bne.n	8006de0 <_svfiprintf_r+0x54>
 8006dec:	ebba 0b04 	subs.w	fp, sl, r4
 8006df0:	d00b      	beq.n	8006e0a <_svfiprintf_r+0x7e>
 8006df2:	465b      	mov	r3, fp
 8006df4:	4622      	mov	r2, r4
 8006df6:	4629      	mov	r1, r5
 8006df8:	4638      	mov	r0, r7
 8006dfa:	f7ff ff6b 	bl	8006cd4 <__ssputs_r>
 8006dfe:	3001      	adds	r0, #1
 8006e00:	f000 80a7 	beq.w	8006f52 <_svfiprintf_r+0x1c6>
 8006e04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e06:	445a      	add	r2, fp
 8006e08:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 809f 	beq.w	8006f52 <_svfiprintf_r+0x1c6>
 8006e14:	2300      	movs	r3, #0
 8006e16:	f04f 32ff 	mov.w	r2, #4294967295
 8006e1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e1e:	f10a 0a01 	add.w	sl, sl, #1
 8006e22:	9304      	str	r3, [sp, #16]
 8006e24:	9307      	str	r3, [sp, #28]
 8006e26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e2c:	4654      	mov	r4, sl
 8006e2e:	2205      	movs	r2, #5
 8006e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e34:	484e      	ldr	r0, [pc, #312]	@ (8006f70 <_svfiprintf_r+0x1e4>)
 8006e36:	f7f9 fa2b 	bl	8000290 <memchr>
 8006e3a:	9a04      	ldr	r2, [sp, #16]
 8006e3c:	b9d8      	cbnz	r0, 8006e76 <_svfiprintf_r+0xea>
 8006e3e:	06d0      	lsls	r0, r2, #27
 8006e40:	bf44      	itt	mi
 8006e42:	2320      	movmi	r3, #32
 8006e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e48:	0711      	lsls	r1, r2, #28
 8006e4a:	bf44      	itt	mi
 8006e4c:	232b      	movmi	r3, #43	@ 0x2b
 8006e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e52:	f89a 3000 	ldrb.w	r3, [sl]
 8006e56:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e58:	d015      	beq.n	8006e86 <_svfiprintf_r+0xfa>
 8006e5a:	9a07      	ldr	r2, [sp, #28]
 8006e5c:	4654      	mov	r4, sl
 8006e5e:	2000      	movs	r0, #0
 8006e60:	f04f 0c0a 	mov.w	ip, #10
 8006e64:	4621      	mov	r1, r4
 8006e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e6a:	3b30      	subs	r3, #48	@ 0x30
 8006e6c:	2b09      	cmp	r3, #9
 8006e6e:	d94b      	bls.n	8006f08 <_svfiprintf_r+0x17c>
 8006e70:	b1b0      	cbz	r0, 8006ea0 <_svfiprintf_r+0x114>
 8006e72:	9207      	str	r2, [sp, #28]
 8006e74:	e014      	b.n	8006ea0 <_svfiprintf_r+0x114>
 8006e76:	eba0 0308 	sub.w	r3, r0, r8
 8006e7a:	fa09 f303 	lsl.w	r3, r9, r3
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	9304      	str	r3, [sp, #16]
 8006e82:	46a2      	mov	sl, r4
 8006e84:	e7d2      	b.n	8006e2c <_svfiprintf_r+0xa0>
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	1d19      	adds	r1, r3, #4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	9103      	str	r1, [sp, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	bfbb      	ittet	lt
 8006e92:	425b      	neglt	r3, r3
 8006e94:	f042 0202 	orrlt.w	r2, r2, #2
 8006e98:	9307      	strge	r3, [sp, #28]
 8006e9a:	9307      	strlt	r3, [sp, #28]
 8006e9c:	bfb8      	it	lt
 8006e9e:	9204      	strlt	r2, [sp, #16]
 8006ea0:	7823      	ldrb	r3, [r4, #0]
 8006ea2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ea4:	d10a      	bne.n	8006ebc <_svfiprintf_r+0x130>
 8006ea6:	7863      	ldrb	r3, [r4, #1]
 8006ea8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006eaa:	d132      	bne.n	8006f12 <_svfiprintf_r+0x186>
 8006eac:	9b03      	ldr	r3, [sp, #12]
 8006eae:	1d1a      	adds	r2, r3, #4
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	9203      	str	r2, [sp, #12]
 8006eb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006eb8:	3402      	adds	r4, #2
 8006eba:	9305      	str	r3, [sp, #20]
 8006ebc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f80 <_svfiprintf_r+0x1f4>
 8006ec0:	7821      	ldrb	r1, [r4, #0]
 8006ec2:	2203      	movs	r2, #3
 8006ec4:	4650      	mov	r0, sl
 8006ec6:	f7f9 f9e3 	bl	8000290 <memchr>
 8006eca:	b138      	cbz	r0, 8006edc <_svfiprintf_r+0x150>
 8006ecc:	9b04      	ldr	r3, [sp, #16]
 8006ece:	eba0 000a 	sub.w	r0, r0, sl
 8006ed2:	2240      	movs	r2, #64	@ 0x40
 8006ed4:	4082      	lsls	r2, r0
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	3401      	adds	r4, #1
 8006eda:	9304      	str	r3, [sp, #16]
 8006edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ee0:	4824      	ldr	r0, [pc, #144]	@ (8006f74 <_svfiprintf_r+0x1e8>)
 8006ee2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ee6:	2206      	movs	r2, #6
 8006ee8:	f7f9 f9d2 	bl	8000290 <memchr>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d036      	beq.n	8006f5e <_svfiprintf_r+0x1d2>
 8006ef0:	4b21      	ldr	r3, [pc, #132]	@ (8006f78 <_svfiprintf_r+0x1ec>)
 8006ef2:	bb1b      	cbnz	r3, 8006f3c <_svfiprintf_r+0x1b0>
 8006ef4:	9b03      	ldr	r3, [sp, #12]
 8006ef6:	3307      	adds	r3, #7
 8006ef8:	f023 0307 	bic.w	r3, r3, #7
 8006efc:	3308      	adds	r3, #8
 8006efe:	9303      	str	r3, [sp, #12]
 8006f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f02:	4433      	add	r3, r6
 8006f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f06:	e76a      	b.n	8006dde <_svfiprintf_r+0x52>
 8006f08:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f0c:	460c      	mov	r4, r1
 8006f0e:	2001      	movs	r0, #1
 8006f10:	e7a8      	b.n	8006e64 <_svfiprintf_r+0xd8>
 8006f12:	2300      	movs	r3, #0
 8006f14:	3401      	adds	r4, #1
 8006f16:	9305      	str	r3, [sp, #20]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	f04f 0c0a 	mov.w	ip, #10
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f24:	3a30      	subs	r2, #48	@ 0x30
 8006f26:	2a09      	cmp	r2, #9
 8006f28:	d903      	bls.n	8006f32 <_svfiprintf_r+0x1a6>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0c6      	beq.n	8006ebc <_svfiprintf_r+0x130>
 8006f2e:	9105      	str	r1, [sp, #20]
 8006f30:	e7c4      	b.n	8006ebc <_svfiprintf_r+0x130>
 8006f32:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f36:	4604      	mov	r4, r0
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e7f0      	b.n	8006f1e <_svfiprintf_r+0x192>
 8006f3c:	ab03      	add	r3, sp, #12
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	462a      	mov	r2, r5
 8006f42:	4b0e      	ldr	r3, [pc, #56]	@ (8006f7c <_svfiprintf_r+0x1f0>)
 8006f44:	a904      	add	r1, sp, #16
 8006f46:	4638      	mov	r0, r7
 8006f48:	f3af 8000 	nop.w
 8006f4c:	1c42      	adds	r2, r0, #1
 8006f4e:	4606      	mov	r6, r0
 8006f50:	d1d6      	bne.n	8006f00 <_svfiprintf_r+0x174>
 8006f52:	89ab      	ldrh	r3, [r5, #12]
 8006f54:	065b      	lsls	r3, r3, #25
 8006f56:	f53f af2d 	bmi.w	8006db4 <_svfiprintf_r+0x28>
 8006f5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f5c:	e72c      	b.n	8006db8 <_svfiprintf_r+0x2c>
 8006f5e:	ab03      	add	r3, sp, #12
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	462a      	mov	r2, r5
 8006f64:	4b05      	ldr	r3, [pc, #20]	@ (8006f7c <_svfiprintf_r+0x1f0>)
 8006f66:	a904      	add	r1, sp, #16
 8006f68:	4638      	mov	r0, r7
 8006f6a:	f000 f879 	bl	8007060 <_printf_i>
 8006f6e:	e7ed      	b.n	8006f4c <_svfiprintf_r+0x1c0>
 8006f70:	08007740 	.word	0x08007740
 8006f74:	0800774a 	.word	0x0800774a
 8006f78:	00000000 	.word	0x00000000
 8006f7c:	08006cd5 	.word	0x08006cd5
 8006f80:	08007746 	.word	0x08007746

08006f84 <_printf_common>:
 8006f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f88:	4616      	mov	r6, r2
 8006f8a:	4698      	mov	r8, r3
 8006f8c:	688a      	ldr	r2, [r1, #8]
 8006f8e:	690b      	ldr	r3, [r1, #16]
 8006f90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f94:	4293      	cmp	r3, r2
 8006f96:	bfb8      	it	lt
 8006f98:	4613      	movlt	r3, r2
 8006f9a:	6033      	str	r3, [r6, #0]
 8006f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	b10a      	cbz	r2, 8006faa <_printf_common+0x26>
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	6033      	str	r3, [r6, #0]
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	0699      	lsls	r1, r3, #26
 8006fae:	bf42      	ittt	mi
 8006fb0:	6833      	ldrmi	r3, [r6, #0]
 8006fb2:	3302      	addmi	r3, #2
 8006fb4:	6033      	strmi	r3, [r6, #0]
 8006fb6:	6825      	ldr	r5, [r4, #0]
 8006fb8:	f015 0506 	ands.w	r5, r5, #6
 8006fbc:	d106      	bne.n	8006fcc <_printf_common+0x48>
 8006fbe:	f104 0a19 	add.w	sl, r4, #25
 8006fc2:	68e3      	ldr	r3, [r4, #12]
 8006fc4:	6832      	ldr	r2, [r6, #0]
 8006fc6:	1a9b      	subs	r3, r3, r2
 8006fc8:	42ab      	cmp	r3, r5
 8006fca:	dc26      	bgt.n	800701a <_printf_common+0x96>
 8006fcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006fd0:	6822      	ldr	r2, [r4, #0]
 8006fd2:	3b00      	subs	r3, #0
 8006fd4:	bf18      	it	ne
 8006fd6:	2301      	movne	r3, #1
 8006fd8:	0692      	lsls	r2, r2, #26
 8006fda:	d42b      	bmi.n	8007034 <_printf_common+0xb0>
 8006fdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fe0:	4641      	mov	r1, r8
 8006fe2:	4638      	mov	r0, r7
 8006fe4:	47c8      	blx	r9
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	d01e      	beq.n	8007028 <_printf_common+0xa4>
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	6922      	ldr	r2, [r4, #16]
 8006fee:	f003 0306 	and.w	r3, r3, #6
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	bf02      	ittt	eq
 8006ff6:	68e5      	ldreq	r5, [r4, #12]
 8006ff8:	6833      	ldreq	r3, [r6, #0]
 8006ffa:	1aed      	subeq	r5, r5, r3
 8006ffc:	68a3      	ldr	r3, [r4, #8]
 8006ffe:	bf0c      	ite	eq
 8007000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007004:	2500      	movne	r5, #0
 8007006:	4293      	cmp	r3, r2
 8007008:	bfc4      	itt	gt
 800700a:	1a9b      	subgt	r3, r3, r2
 800700c:	18ed      	addgt	r5, r5, r3
 800700e:	2600      	movs	r6, #0
 8007010:	341a      	adds	r4, #26
 8007012:	42b5      	cmp	r5, r6
 8007014:	d11a      	bne.n	800704c <_printf_common+0xc8>
 8007016:	2000      	movs	r0, #0
 8007018:	e008      	b.n	800702c <_printf_common+0xa8>
 800701a:	2301      	movs	r3, #1
 800701c:	4652      	mov	r2, sl
 800701e:	4641      	mov	r1, r8
 8007020:	4638      	mov	r0, r7
 8007022:	47c8      	blx	r9
 8007024:	3001      	adds	r0, #1
 8007026:	d103      	bne.n	8007030 <_printf_common+0xac>
 8007028:	f04f 30ff 	mov.w	r0, #4294967295
 800702c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007030:	3501      	adds	r5, #1
 8007032:	e7c6      	b.n	8006fc2 <_printf_common+0x3e>
 8007034:	18e1      	adds	r1, r4, r3
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	2030      	movs	r0, #48	@ 0x30
 800703a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800703e:	4422      	add	r2, r4
 8007040:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007044:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007048:	3302      	adds	r3, #2
 800704a:	e7c7      	b.n	8006fdc <_printf_common+0x58>
 800704c:	2301      	movs	r3, #1
 800704e:	4622      	mov	r2, r4
 8007050:	4641      	mov	r1, r8
 8007052:	4638      	mov	r0, r7
 8007054:	47c8      	blx	r9
 8007056:	3001      	adds	r0, #1
 8007058:	d0e6      	beq.n	8007028 <_printf_common+0xa4>
 800705a:	3601      	adds	r6, #1
 800705c:	e7d9      	b.n	8007012 <_printf_common+0x8e>
	...

08007060 <_printf_i>:
 8007060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007064:	7e0f      	ldrb	r7, [r1, #24]
 8007066:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007068:	2f78      	cmp	r7, #120	@ 0x78
 800706a:	4691      	mov	r9, r2
 800706c:	4680      	mov	r8, r0
 800706e:	460c      	mov	r4, r1
 8007070:	469a      	mov	sl, r3
 8007072:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007076:	d807      	bhi.n	8007088 <_printf_i+0x28>
 8007078:	2f62      	cmp	r7, #98	@ 0x62
 800707a:	d80a      	bhi.n	8007092 <_printf_i+0x32>
 800707c:	2f00      	cmp	r7, #0
 800707e:	f000 80d2 	beq.w	8007226 <_printf_i+0x1c6>
 8007082:	2f58      	cmp	r7, #88	@ 0x58
 8007084:	f000 80b9 	beq.w	80071fa <_printf_i+0x19a>
 8007088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800708c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007090:	e03a      	b.n	8007108 <_printf_i+0xa8>
 8007092:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007096:	2b15      	cmp	r3, #21
 8007098:	d8f6      	bhi.n	8007088 <_printf_i+0x28>
 800709a:	a101      	add	r1, pc, #4	@ (adr r1, 80070a0 <_printf_i+0x40>)
 800709c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070a0:	080070f9 	.word	0x080070f9
 80070a4:	0800710d 	.word	0x0800710d
 80070a8:	08007089 	.word	0x08007089
 80070ac:	08007089 	.word	0x08007089
 80070b0:	08007089 	.word	0x08007089
 80070b4:	08007089 	.word	0x08007089
 80070b8:	0800710d 	.word	0x0800710d
 80070bc:	08007089 	.word	0x08007089
 80070c0:	08007089 	.word	0x08007089
 80070c4:	08007089 	.word	0x08007089
 80070c8:	08007089 	.word	0x08007089
 80070cc:	0800720d 	.word	0x0800720d
 80070d0:	08007137 	.word	0x08007137
 80070d4:	080071c7 	.word	0x080071c7
 80070d8:	08007089 	.word	0x08007089
 80070dc:	08007089 	.word	0x08007089
 80070e0:	0800722f 	.word	0x0800722f
 80070e4:	08007089 	.word	0x08007089
 80070e8:	08007137 	.word	0x08007137
 80070ec:	08007089 	.word	0x08007089
 80070f0:	08007089 	.word	0x08007089
 80070f4:	080071cf 	.word	0x080071cf
 80070f8:	6833      	ldr	r3, [r6, #0]
 80070fa:	1d1a      	adds	r2, r3, #4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6032      	str	r2, [r6, #0]
 8007100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007104:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007108:	2301      	movs	r3, #1
 800710a:	e09d      	b.n	8007248 <_printf_i+0x1e8>
 800710c:	6833      	ldr	r3, [r6, #0]
 800710e:	6820      	ldr	r0, [r4, #0]
 8007110:	1d19      	adds	r1, r3, #4
 8007112:	6031      	str	r1, [r6, #0]
 8007114:	0606      	lsls	r6, r0, #24
 8007116:	d501      	bpl.n	800711c <_printf_i+0xbc>
 8007118:	681d      	ldr	r5, [r3, #0]
 800711a:	e003      	b.n	8007124 <_printf_i+0xc4>
 800711c:	0645      	lsls	r5, r0, #25
 800711e:	d5fb      	bpl.n	8007118 <_printf_i+0xb8>
 8007120:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007124:	2d00      	cmp	r5, #0
 8007126:	da03      	bge.n	8007130 <_printf_i+0xd0>
 8007128:	232d      	movs	r3, #45	@ 0x2d
 800712a:	426d      	negs	r5, r5
 800712c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007130:	4859      	ldr	r0, [pc, #356]	@ (8007298 <_printf_i+0x238>)
 8007132:	230a      	movs	r3, #10
 8007134:	e011      	b.n	800715a <_printf_i+0xfa>
 8007136:	6821      	ldr	r1, [r4, #0]
 8007138:	6833      	ldr	r3, [r6, #0]
 800713a:	0608      	lsls	r0, r1, #24
 800713c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007140:	d402      	bmi.n	8007148 <_printf_i+0xe8>
 8007142:	0649      	lsls	r1, r1, #25
 8007144:	bf48      	it	mi
 8007146:	b2ad      	uxthmi	r5, r5
 8007148:	2f6f      	cmp	r7, #111	@ 0x6f
 800714a:	4853      	ldr	r0, [pc, #332]	@ (8007298 <_printf_i+0x238>)
 800714c:	6033      	str	r3, [r6, #0]
 800714e:	bf14      	ite	ne
 8007150:	230a      	movne	r3, #10
 8007152:	2308      	moveq	r3, #8
 8007154:	2100      	movs	r1, #0
 8007156:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800715a:	6866      	ldr	r6, [r4, #4]
 800715c:	60a6      	str	r6, [r4, #8]
 800715e:	2e00      	cmp	r6, #0
 8007160:	bfa2      	ittt	ge
 8007162:	6821      	ldrge	r1, [r4, #0]
 8007164:	f021 0104 	bicge.w	r1, r1, #4
 8007168:	6021      	strge	r1, [r4, #0]
 800716a:	b90d      	cbnz	r5, 8007170 <_printf_i+0x110>
 800716c:	2e00      	cmp	r6, #0
 800716e:	d04b      	beq.n	8007208 <_printf_i+0x1a8>
 8007170:	4616      	mov	r6, r2
 8007172:	fbb5 f1f3 	udiv	r1, r5, r3
 8007176:	fb03 5711 	mls	r7, r3, r1, r5
 800717a:	5dc7      	ldrb	r7, [r0, r7]
 800717c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007180:	462f      	mov	r7, r5
 8007182:	42bb      	cmp	r3, r7
 8007184:	460d      	mov	r5, r1
 8007186:	d9f4      	bls.n	8007172 <_printf_i+0x112>
 8007188:	2b08      	cmp	r3, #8
 800718a:	d10b      	bne.n	80071a4 <_printf_i+0x144>
 800718c:	6823      	ldr	r3, [r4, #0]
 800718e:	07df      	lsls	r7, r3, #31
 8007190:	d508      	bpl.n	80071a4 <_printf_i+0x144>
 8007192:	6923      	ldr	r3, [r4, #16]
 8007194:	6861      	ldr	r1, [r4, #4]
 8007196:	4299      	cmp	r1, r3
 8007198:	bfde      	ittt	le
 800719a:	2330      	movle	r3, #48	@ 0x30
 800719c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071a4:	1b92      	subs	r2, r2, r6
 80071a6:	6122      	str	r2, [r4, #16]
 80071a8:	f8cd a000 	str.w	sl, [sp]
 80071ac:	464b      	mov	r3, r9
 80071ae:	aa03      	add	r2, sp, #12
 80071b0:	4621      	mov	r1, r4
 80071b2:	4640      	mov	r0, r8
 80071b4:	f7ff fee6 	bl	8006f84 <_printf_common>
 80071b8:	3001      	adds	r0, #1
 80071ba:	d14a      	bne.n	8007252 <_printf_i+0x1f2>
 80071bc:	f04f 30ff 	mov.w	r0, #4294967295
 80071c0:	b004      	add	sp, #16
 80071c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	f043 0320 	orr.w	r3, r3, #32
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	4833      	ldr	r0, [pc, #204]	@ (800729c <_printf_i+0x23c>)
 80071d0:	2778      	movs	r7, #120	@ 0x78
 80071d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	6831      	ldr	r1, [r6, #0]
 80071da:	061f      	lsls	r7, r3, #24
 80071dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80071e0:	d402      	bmi.n	80071e8 <_printf_i+0x188>
 80071e2:	065f      	lsls	r7, r3, #25
 80071e4:	bf48      	it	mi
 80071e6:	b2ad      	uxthmi	r5, r5
 80071e8:	6031      	str	r1, [r6, #0]
 80071ea:	07d9      	lsls	r1, r3, #31
 80071ec:	bf44      	itt	mi
 80071ee:	f043 0320 	orrmi.w	r3, r3, #32
 80071f2:	6023      	strmi	r3, [r4, #0]
 80071f4:	b11d      	cbz	r5, 80071fe <_printf_i+0x19e>
 80071f6:	2310      	movs	r3, #16
 80071f8:	e7ac      	b.n	8007154 <_printf_i+0xf4>
 80071fa:	4827      	ldr	r0, [pc, #156]	@ (8007298 <_printf_i+0x238>)
 80071fc:	e7e9      	b.n	80071d2 <_printf_i+0x172>
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	f023 0320 	bic.w	r3, r3, #32
 8007204:	6023      	str	r3, [r4, #0]
 8007206:	e7f6      	b.n	80071f6 <_printf_i+0x196>
 8007208:	4616      	mov	r6, r2
 800720a:	e7bd      	b.n	8007188 <_printf_i+0x128>
 800720c:	6833      	ldr	r3, [r6, #0]
 800720e:	6825      	ldr	r5, [r4, #0]
 8007210:	6961      	ldr	r1, [r4, #20]
 8007212:	1d18      	adds	r0, r3, #4
 8007214:	6030      	str	r0, [r6, #0]
 8007216:	062e      	lsls	r6, r5, #24
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	d501      	bpl.n	8007220 <_printf_i+0x1c0>
 800721c:	6019      	str	r1, [r3, #0]
 800721e:	e002      	b.n	8007226 <_printf_i+0x1c6>
 8007220:	0668      	lsls	r0, r5, #25
 8007222:	d5fb      	bpl.n	800721c <_printf_i+0x1bc>
 8007224:	8019      	strh	r1, [r3, #0]
 8007226:	2300      	movs	r3, #0
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	4616      	mov	r6, r2
 800722c:	e7bc      	b.n	80071a8 <_printf_i+0x148>
 800722e:	6833      	ldr	r3, [r6, #0]
 8007230:	1d1a      	adds	r2, r3, #4
 8007232:	6032      	str	r2, [r6, #0]
 8007234:	681e      	ldr	r6, [r3, #0]
 8007236:	6862      	ldr	r2, [r4, #4]
 8007238:	2100      	movs	r1, #0
 800723a:	4630      	mov	r0, r6
 800723c:	f7f9 f828 	bl	8000290 <memchr>
 8007240:	b108      	cbz	r0, 8007246 <_printf_i+0x1e6>
 8007242:	1b80      	subs	r0, r0, r6
 8007244:	6060      	str	r0, [r4, #4]
 8007246:	6863      	ldr	r3, [r4, #4]
 8007248:	6123      	str	r3, [r4, #16]
 800724a:	2300      	movs	r3, #0
 800724c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007250:	e7aa      	b.n	80071a8 <_printf_i+0x148>
 8007252:	6923      	ldr	r3, [r4, #16]
 8007254:	4632      	mov	r2, r6
 8007256:	4649      	mov	r1, r9
 8007258:	4640      	mov	r0, r8
 800725a:	47d0      	blx	sl
 800725c:	3001      	adds	r0, #1
 800725e:	d0ad      	beq.n	80071bc <_printf_i+0x15c>
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	079b      	lsls	r3, r3, #30
 8007264:	d413      	bmi.n	800728e <_printf_i+0x22e>
 8007266:	68e0      	ldr	r0, [r4, #12]
 8007268:	9b03      	ldr	r3, [sp, #12]
 800726a:	4298      	cmp	r0, r3
 800726c:	bfb8      	it	lt
 800726e:	4618      	movlt	r0, r3
 8007270:	e7a6      	b.n	80071c0 <_printf_i+0x160>
 8007272:	2301      	movs	r3, #1
 8007274:	4632      	mov	r2, r6
 8007276:	4649      	mov	r1, r9
 8007278:	4640      	mov	r0, r8
 800727a:	47d0      	blx	sl
 800727c:	3001      	adds	r0, #1
 800727e:	d09d      	beq.n	80071bc <_printf_i+0x15c>
 8007280:	3501      	adds	r5, #1
 8007282:	68e3      	ldr	r3, [r4, #12]
 8007284:	9903      	ldr	r1, [sp, #12]
 8007286:	1a5b      	subs	r3, r3, r1
 8007288:	42ab      	cmp	r3, r5
 800728a:	dcf2      	bgt.n	8007272 <_printf_i+0x212>
 800728c:	e7eb      	b.n	8007266 <_printf_i+0x206>
 800728e:	2500      	movs	r5, #0
 8007290:	f104 0619 	add.w	r6, r4, #25
 8007294:	e7f5      	b.n	8007282 <_printf_i+0x222>
 8007296:	bf00      	nop
 8007298:	08007751 	.word	0x08007751
 800729c:	08007762 	.word	0x08007762

080072a0 <__sflush_r>:
 80072a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a8:	0716      	lsls	r6, r2, #28
 80072aa:	4605      	mov	r5, r0
 80072ac:	460c      	mov	r4, r1
 80072ae:	d454      	bmi.n	800735a <__sflush_r+0xba>
 80072b0:	684b      	ldr	r3, [r1, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	dc02      	bgt.n	80072bc <__sflush_r+0x1c>
 80072b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	dd48      	ble.n	800734e <__sflush_r+0xae>
 80072bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072be:	2e00      	cmp	r6, #0
 80072c0:	d045      	beq.n	800734e <__sflush_r+0xae>
 80072c2:	2300      	movs	r3, #0
 80072c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80072c8:	682f      	ldr	r7, [r5, #0]
 80072ca:	6a21      	ldr	r1, [r4, #32]
 80072cc:	602b      	str	r3, [r5, #0]
 80072ce:	d030      	beq.n	8007332 <__sflush_r+0x92>
 80072d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80072d2:	89a3      	ldrh	r3, [r4, #12]
 80072d4:	0759      	lsls	r1, r3, #29
 80072d6:	d505      	bpl.n	80072e4 <__sflush_r+0x44>
 80072d8:	6863      	ldr	r3, [r4, #4]
 80072da:	1ad2      	subs	r2, r2, r3
 80072dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80072de:	b10b      	cbz	r3, 80072e4 <__sflush_r+0x44>
 80072e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	2300      	movs	r3, #0
 80072e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072e8:	6a21      	ldr	r1, [r4, #32]
 80072ea:	4628      	mov	r0, r5
 80072ec:	47b0      	blx	r6
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	89a3      	ldrh	r3, [r4, #12]
 80072f2:	d106      	bne.n	8007302 <__sflush_r+0x62>
 80072f4:	6829      	ldr	r1, [r5, #0]
 80072f6:	291d      	cmp	r1, #29
 80072f8:	d82b      	bhi.n	8007352 <__sflush_r+0xb2>
 80072fa:	4a2a      	ldr	r2, [pc, #168]	@ (80073a4 <__sflush_r+0x104>)
 80072fc:	410a      	asrs	r2, r1
 80072fe:	07d6      	lsls	r6, r2, #31
 8007300:	d427      	bmi.n	8007352 <__sflush_r+0xb2>
 8007302:	2200      	movs	r2, #0
 8007304:	6062      	str	r2, [r4, #4]
 8007306:	04d9      	lsls	r1, r3, #19
 8007308:	6922      	ldr	r2, [r4, #16]
 800730a:	6022      	str	r2, [r4, #0]
 800730c:	d504      	bpl.n	8007318 <__sflush_r+0x78>
 800730e:	1c42      	adds	r2, r0, #1
 8007310:	d101      	bne.n	8007316 <__sflush_r+0x76>
 8007312:	682b      	ldr	r3, [r5, #0]
 8007314:	b903      	cbnz	r3, 8007318 <__sflush_r+0x78>
 8007316:	6560      	str	r0, [r4, #84]	@ 0x54
 8007318:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800731a:	602f      	str	r7, [r5, #0]
 800731c:	b1b9      	cbz	r1, 800734e <__sflush_r+0xae>
 800731e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007322:	4299      	cmp	r1, r3
 8007324:	d002      	beq.n	800732c <__sflush_r+0x8c>
 8007326:	4628      	mov	r0, r5
 8007328:	f7ff fbdc 	bl	8006ae4 <_free_r>
 800732c:	2300      	movs	r3, #0
 800732e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007330:	e00d      	b.n	800734e <__sflush_r+0xae>
 8007332:	2301      	movs	r3, #1
 8007334:	4628      	mov	r0, r5
 8007336:	47b0      	blx	r6
 8007338:	4602      	mov	r2, r0
 800733a:	1c50      	adds	r0, r2, #1
 800733c:	d1c9      	bne.n	80072d2 <__sflush_r+0x32>
 800733e:	682b      	ldr	r3, [r5, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0c6      	beq.n	80072d2 <__sflush_r+0x32>
 8007344:	2b1d      	cmp	r3, #29
 8007346:	d001      	beq.n	800734c <__sflush_r+0xac>
 8007348:	2b16      	cmp	r3, #22
 800734a:	d11e      	bne.n	800738a <__sflush_r+0xea>
 800734c:	602f      	str	r7, [r5, #0]
 800734e:	2000      	movs	r0, #0
 8007350:	e022      	b.n	8007398 <__sflush_r+0xf8>
 8007352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007356:	b21b      	sxth	r3, r3
 8007358:	e01b      	b.n	8007392 <__sflush_r+0xf2>
 800735a:	690f      	ldr	r7, [r1, #16]
 800735c:	2f00      	cmp	r7, #0
 800735e:	d0f6      	beq.n	800734e <__sflush_r+0xae>
 8007360:	0793      	lsls	r3, r2, #30
 8007362:	680e      	ldr	r6, [r1, #0]
 8007364:	bf08      	it	eq
 8007366:	694b      	ldreq	r3, [r1, #20]
 8007368:	600f      	str	r7, [r1, #0]
 800736a:	bf18      	it	ne
 800736c:	2300      	movne	r3, #0
 800736e:	eba6 0807 	sub.w	r8, r6, r7
 8007372:	608b      	str	r3, [r1, #8]
 8007374:	f1b8 0f00 	cmp.w	r8, #0
 8007378:	dde9      	ble.n	800734e <__sflush_r+0xae>
 800737a:	6a21      	ldr	r1, [r4, #32]
 800737c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800737e:	4643      	mov	r3, r8
 8007380:	463a      	mov	r2, r7
 8007382:	4628      	mov	r0, r5
 8007384:	47b0      	blx	r6
 8007386:	2800      	cmp	r0, #0
 8007388:	dc08      	bgt.n	800739c <__sflush_r+0xfc>
 800738a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800738e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007392:	81a3      	strh	r3, [r4, #12]
 8007394:	f04f 30ff 	mov.w	r0, #4294967295
 8007398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800739c:	4407      	add	r7, r0
 800739e:	eba8 0800 	sub.w	r8, r8, r0
 80073a2:	e7e7      	b.n	8007374 <__sflush_r+0xd4>
 80073a4:	dfbffffe 	.word	0xdfbffffe

080073a8 <_fflush_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	690b      	ldr	r3, [r1, #16]
 80073ac:	4605      	mov	r5, r0
 80073ae:	460c      	mov	r4, r1
 80073b0:	b913      	cbnz	r3, 80073b8 <_fflush_r+0x10>
 80073b2:	2500      	movs	r5, #0
 80073b4:	4628      	mov	r0, r5
 80073b6:	bd38      	pop	{r3, r4, r5, pc}
 80073b8:	b118      	cbz	r0, 80073c2 <_fflush_r+0x1a>
 80073ba:	6a03      	ldr	r3, [r0, #32]
 80073bc:	b90b      	cbnz	r3, 80073c2 <_fflush_r+0x1a>
 80073be:	f7ff f969 	bl	8006694 <__sinit>
 80073c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f3      	beq.n	80073b2 <_fflush_r+0xa>
 80073ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073cc:	07d0      	lsls	r0, r2, #31
 80073ce:	d404      	bmi.n	80073da <_fflush_r+0x32>
 80073d0:	0599      	lsls	r1, r3, #22
 80073d2:	d402      	bmi.n	80073da <_fflush_r+0x32>
 80073d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073d6:	f7ff fb74 	bl	8006ac2 <__retarget_lock_acquire_recursive>
 80073da:	4628      	mov	r0, r5
 80073dc:	4621      	mov	r1, r4
 80073de:	f7ff ff5f 	bl	80072a0 <__sflush_r>
 80073e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073e4:	07da      	lsls	r2, r3, #31
 80073e6:	4605      	mov	r5, r0
 80073e8:	d4e4      	bmi.n	80073b4 <_fflush_r+0xc>
 80073ea:	89a3      	ldrh	r3, [r4, #12]
 80073ec:	059b      	lsls	r3, r3, #22
 80073ee:	d4e1      	bmi.n	80073b4 <_fflush_r+0xc>
 80073f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073f2:	f7ff fb67 	bl	8006ac4 <__retarget_lock_release_recursive>
 80073f6:	e7dd      	b.n	80073b4 <_fflush_r+0xc>

080073f8 <__swhatbuf_r>:
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	460c      	mov	r4, r1
 80073fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007400:	2900      	cmp	r1, #0
 8007402:	b096      	sub	sp, #88	@ 0x58
 8007404:	4615      	mov	r5, r2
 8007406:	461e      	mov	r6, r3
 8007408:	da0d      	bge.n	8007426 <__swhatbuf_r+0x2e>
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007410:	f04f 0100 	mov.w	r1, #0
 8007414:	bf14      	ite	ne
 8007416:	2340      	movne	r3, #64	@ 0x40
 8007418:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800741c:	2000      	movs	r0, #0
 800741e:	6031      	str	r1, [r6, #0]
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	b016      	add	sp, #88	@ 0x58
 8007424:	bd70      	pop	{r4, r5, r6, pc}
 8007426:	466a      	mov	r2, sp
 8007428:	f000 f862 	bl	80074f0 <_fstat_r>
 800742c:	2800      	cmp	r0, #0
 800742e:	dbec      	blt.n	800740a <__swhatbuf_r+0x12>
 8007430:	9901      	ldr	r1, [sp, #4]
 8007432:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007436:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800743a:	4259      	negs	r1, r3
 800743c:	4159      	adcs	r1, r3
 800743e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007442:	e7eb      	b.n	800741c <__swhatbuf_r+0x24>

08007444 <__smakebuf_r>:
 8007444:	898b      	ldrh	r3, [r1, #12]
 8007446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007448:	079d      	lsls	r5, r3, #30
 800744a:	4606      	mov	r6, r0
 800744c:	460c      	mov	r4, r1
 800744e:	d507      	bpl.n	8007460 <__smakebuf_r+0x1c>
 8007450:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	6123      	str	r3, [r4, #16]
 8007458:	2301      	movs	r3, #1
 800745a:	6163      	str	r3, [r4, #20]
 800745c:	b003      	add	sp, #12
 800745e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007460:	ab01      	add	r3, sp, #4
 8007462:	466a      	mov	r2, sp
 8007464:	f7ff ffc8 	bl	80073f8 <__swhatbuf_r>
 8007468:	9f00      	ldr	r7, [sp, #0]
 800746a:	4605      	mov	r5, r0
 800746c:	4639      	mov	r1, r7
 800746e:	4630      	mov	r0, r6
 8007470:	f7ff fba4 	bl	8006bbc <_malloc_r>
 8007474:	b948      	cbnz	r0, 800748a <__smakebuf_r+0x46>
 8007476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800747a:	059a      	lsls	r2, r3, #22
 800747c:	d4ee      	bmi.n	800745c <__smakebuf_r+0x18>
 800747e:	f023 0303 	bic.w	r3, r3, #3
 8007482:	f043 0302 	orr.w	r3, r3, #2
 8007486:	81a3      	strh	r3, [r4, #12]
 8007488:	e7e2      	b.n	8007450 <__smakebuf_r+0xc>
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	6020      	str	r0, [r4, #0]
 800748e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007492:	81a3      	strh	r3, [r4, #12]
 8007494:	9b01      	ldr	r3, [sp, #4]
 8007496:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800749a:	b15b      	cbz	r3, 80074b4 <__smakebuf_r+0x70>
 800749c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074a0:	4630      	mov	r0, r6
 80074a2:	f000 f837 	bl	8007514 <_isatty_r>
 80074a6:	b128      	cbz	r0, 80074b4 <__smakebuf_r+0x70>
 80074a8:	89a3      	ldrh	r3, [r4, #12]
 80074aa:	f023 0303 	bic.w	r3, r3, #3
 80074ae:	f043 0301 	orr.w	r3, r3, #1
 80074b2:	81a3      	strh	r3, [r4, #12]
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	431d      	orrs	r5, r3
 80074b8:	81a5      	strh	r5, [r4, #12]
 80074ba:	e7cf      	b.n	800745c <__smakebuf_r+0x18>

080074bc <memmove>:
 80074bc:	4288      	cmp	r0, r1
 80074be:	b510      	push	{r4, lr}
 80074c0:	eb01 0402 	add.w	r4, r1, r2
 80074c4:	d902      	bls.n	80074cc <memmove+0x10>
 80074c6:	4284      	cmp	r4, r0
 80074c8:	4623      	mov	r3, r4
 80074ca:	d807      	bhi.n	80074dc <memmove+0x20>
 80074cc:	1e43      	subs	r3, r0, #1
 80074ce:	42a1      	cmp	r1, r4
 80074d0:	d008      	beq.n	80074e4 <memmove+0x28>
 80074d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074da:	e7f8      	b.n	80074ce <memmove+0x12>
 80074dc:	4402      	add	r2, r0
 80074de:	4601      	mov	r1, r0
 80074e0:	428a      	cmp	r2, r1
 80074e2:	d100      	bne.n	80074e6 <memmove+0x2a>
 80074e4:	bd10      	pop	{r4, pc}
 80074e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074ee:	e7f7      	b.n	80074e0 <memmove+0x24>

080074f0 <_fstat_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4d07      	ldr	r5, [pc, #28]	@ (8007510 <_fstat_r+0x20>)
 80074f4:	2300      	movs	r3, #0
 80074f6:	4604      	mov	r4, r0
 80074f8:	4608      	mov	r0, r1
 80074fa:	4611      	mov	r1, r2
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	f7f9 f9e4 	bl	80008ca <_fstat>
 8007502:	1c43      	adds	r3, r0, #1
 8007504:	d102      	bne.n	800750c <_fstat_r+0x1c>
 8007506:	682b      	ldr	r3, [r5, #0]
 8007508:	b103      	cbz	r3, 800750c <_fstat_r+0x1c>
 800750a:	6023      	str	r3, [r4, #0]
 800750c:	bd38      	pop	{r3, r4, r5, pc}
 800750e:	bf00      	nop
 8007510:	200145fc 	.word	0x200145fc

08007514 <_isatty_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4d06      	ldr	r5, [pc, #24]	@ (8007530 <_isatty_r+0x1c>)
 8007518:	2300      	movs	r3, #0
 800751a:	4604      	mov	r4, r0
 800751c:	4608      	mov	r0, r1
 800751e:	602b      	str	r3, [r5, #0]
 8007520:	f7f9 f9e3 	bl	80008ea <_isatty>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_isatty_r+0x1a>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	b103      	cbz	r3, 800752e <_isatty_r+0x1a>
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	200145fc 	.word	0x200145fc

08007534 <_sbrk_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4d06      	ldr	r5, [pc, #24]	@ (8007550 <_sbrk_r+0x1c>)
 8007538:	2300      	movs	r3, #0
 800753a:	4604      	mov	r4, r0
 800753c:	4608      	mov	r0, r1
 800753e:	602b      	str	r3, [r5, #0]
 8007540:	f7f9 f9ec 	bl	800091c <_sbrk>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d102      	bne.n	800754e <_sbrk_r+0x1a>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	b103      	cbz	r3, 800754e <_sbrk_r+0x1a>
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	bd38      	pop	{r3, r4, r5, pc}
 8007550:	200145fc 	.word	0x200145fc

08007554 <_realloc_r>:
 8007554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007558:	4680      	mov	r8, r0
 800755a:	4615      	mov	r5, r2
 800755c:	460c      	mov	r4, r1
 800755e:	b921      	cbnz	r1, 800756a <_realloc_r+0x16>
 8007560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007564:	4611      	mov	r1, r2
 8007566:	f7ff bb29 	b.w	8006bbc <_malloc_r>
 800756a:	b92a      	cbnz	r2, 8007578 <_realloc_r+0x24>
 800756c:	f7ff faba 	bl	8006ae4 <_free_r>
 8007570:	2400      	movs	r4, #0
 8007572:	4620      	mov	r0, r4
 8007574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007578:	f000 f81a 	bl	80075b0 <_malloc_usable_size_r>
 800757c:	4285      	cmp	r5, r0
 800757e:	4606      	mov	r6, r0
 8007580:	d802      	bhi.n	8007588 <_realloc_r+0x34>
 8007582:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007586:	d8f4      	bhi.n	8007572 <_realloc_r+0x1e>
 8007588:	4629      	mov	r1, r5
 800758a:	4640      	mov	r0, r8
 800758c:	f7ff fb16 	bl	8006bbc <_malloc_r>
 8007590:	4607      	mov	r7, r0
 8007592:	2800      	cmp	r0, #0
 8007594:	d0ec      	beq.n	8007570 <_realloc_r+0x1c>
 8007596:	42b5      	cmp	r5, r6
 8007598:	462a      	mov	r2, r5
 800759a:	4621      	mov	r1, r4
 800759c:	bf28      	it	cs
 800759e:	4632      	movcs	r2, r6
 80075a0:	f7ff fa91 	bl	8006ac6 <memcpy>
 80075a4:	4621      	mov	r1, r4
 80075a6:	4640      	mov	r0, r8
 80075a8:	f7ff fa9c 	bl	8006ae4 <_free_r>
 80075ac:	463c      	mov	r4, r7
 80075ae:	e7e0      	b.n	8007572 <_realloc_r+0x1e>

080075b0 <_malloc_usable_size_r>:
 80075b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075b4:	1f18      	subs	r0, r3, #4
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	bfbc      	itt	lt
 80075ba:	580b      	ldrlt	r3, [r1, r0]
 80075bc:	18c0      	addlt	r0, r0, r3
 80075be:	4770      	bx	lr

080075c0 <_init>:
 80075c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c2:	bf00      	nop
 80075c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075c6:	bc08      	pop	{r3}
 80075c8:	469e      	mov	lr, r3
 80075ca:	4770      	bx	lr

080075cc <_fini>:
 80075cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ce:	bf00      	nop
 80075d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d2:	bc08      	pop	{r3}
 80075d4:	469e      	mov	lr, r3
 80075d6:	4770      	bx	lr
